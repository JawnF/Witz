
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FLOAT FLOAT_TYPE FOR FOR_TO GE ID IF INT INT_TYPE LE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | '=' NEW constructor_call\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID check_class\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params scope_constructor func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements return '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n    assign : prop '=' exp\n    constructor_call : ID '(' args ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | empty\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read \n           | math_or \n           | assign\n           | string\n    string : STRING\n    read : READ '(' read_type ')'\n    read_type  :  INT_TYPE\n                  |  FLOAT_TYPE\n                  |  STRING_TYPE   \n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term new_quad math_exp_alt\n                    | '-' term new_quad math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor new_quad term_alt \n                | '/' factor new_quad term_alt\n                | empty\n    new_quad : empty\n    factor : id\n              | number\n              | call \n              | '(' math_or ')'\n    id : ID\n    math_or : math_and math_or_alt\n    math_or_alt : OR math_and new_quad math_or_alt\n                   | empty\n    math_and : math_comp math_and_alt\n    math_and_alt : AND math_comp new_quad math_and_alt\n                    | empty\n    math_comp : math_exp math_comp_alt\n    math_comp_alt : comparison_op math_exp new_quad\n                     | empty\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n                     | LE\n                     | GE\n    call : prop '(' args ')'\n            | stack_call\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' id ')'\n                    | PEEK '(' ')'\n    empty :scope_class : empty\n    scope_function : empty\n    scope_constructor : empty\n    check_class : empty\n    neg_lookup : empty\n    "
    
_lr_action_items = {'PEEK':([99,],[137,]),'RETURN':([18,19,27,42,44,48,54,55,57,60,106,117,181,182,193,210,218,219,220,221,224,],[-105,-3,-38,-34,-35,-39,-40,-36,-37,-2,-56,-4,-48,-50,-46,-105,-53,-49,-47,-105,227,]),'FLOAT_TYPE':([67,71,107,],[110,120,110,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,69,72,73,86,87,100,117,163,179,180,201,209,210,221,227,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,30,-105,-3,-2,-19,30,30,30,30,30,30,-4,30,30,30,-22,-27,-105,30,30,-33,]),'VOID':([107,],[146,]),'STRING_TYPE':([67,71,107,],[112,121,112,]),'NE':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,194,195,207,],[-54,-76,-96,-75,76,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,180,201,209,210,221,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,32,-105,-3,-2,-19,-4,32,-22,-27,-105,32,-33,]),'POP':([99,],[139,]),'INT_TYPE':([67,71,107,],[114,122,114,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,180,201,209,210,221,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,34,-105,-3,-2,-19,-4,34,-22,-27,-105,34,-33,]),'NEW':([69,],[118,]),'#':([0,3,4,5,7,11,18,19,60,63,64,108,117,149,150,201,209,223,229,],[-105,9,-105,-18,9,-17,-105,-3,-2,-19,-105,-105,-4,9,-24,-22,-27,-23,-33,]),'LE':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,194,195,207,],[-54,-76,-96,-75,75,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'$':([0,3,4,5,7,8,10,11,15,18,63,64,117,201,209,210,229,],[-105,-105,-105,-18,-105,16,-26,-17,-25,16,-19,16,-4,-22,-27,16,-33,]),')':([26,28,31,33,35,36,37,40,41,43,45,46,49,50,52,56,59,65,77,81,83,85,86,89,90,91,92,95,98,101,104,110,111,112,113,114,115,116,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,138,142,143,144,152,155,158,159,160,161,162,164,165,167,168,169,170,173,174,176,179,183,184,185,187,188,189,190,191,192,194,195,198,199,200,203,205,207,213,214,222,225,],[-58,-54,-76,-61,-96,-75,-105,-57,-77,-105,-105,-60,-105,-79,-105,-55,-59,-109,-86,-88,127,-79,-105,-83,-85,-80,-82,-70,-73,-66,-69,-10,-12,-11,-13,-9,-5,-105,-64,-65,-63,155,156,157,-105,-78,-98,160,-105,-41,-105,-105,-105,-105,-101,172,-105,-105,-14,-62,-87,-74,-95,-97,-100,-105,-105,-105,-105,189,190,-105,-105,-105,-105,-105,-84,-81,-71,-72,-104,-102,207,-79,-68,-67,211,-30,-105,217,-99,-103,-32,-29,-105,-31,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,30,32,34,38,39,50,51,60,63,65,69,72,73,74,75,76,78,79,80,82,84,85,86,87,88,93,96,97,100,102,103,110,111,112,113,114,116,117,137,139,140,141,145,146,147,148,152,154,163,178,179,180,201,209,210,221,227,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,38,-105,-3,71,72,73,38,86,-45,100,-2,-19,-109,38,38,38,38,-93,-92,-94,-91,-89,-90,86,-45,38,38,38,38,38,38,38,38,38,-10,-12,-11,-13,-9,-105,-4,169,170,171,-44,-43,-15,176,-16,-14,179,38,176,38,38,-22,-27,-105,38,38,-33,]),'+':([28,31,35,36,41,49,50,52,56,85,95,98,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,207,],[-54,-76,-96,-75,-77,-105,-79,103,-55,-79,-70,-73,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,103,103,-71,-72,-104,-102,-103,]),'*':([28,31,35,36,41,49,50,56,85,127,135,136,138,159,160,167,168,189,190,207,],[-54,-76,-96,-75,-77,96,-79,-55,-79,-78,-105,-105,-101,-74,-95,96,96,-104,-102,-103,]),'-':([28,31,35,36,41,49,50,52,56,85,95,98,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,207,],[-54,-76,-96,-75,-77,-105,-79,102,-55,-79,-70,-73,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,102,102,-71,-72,-104,-102,-103,]),',':([26,28,31,33,35,36,37,40,41,43,45,46,49,50,52,56,59,65,77,81,85,89,90,91,92,95,98,101,104,110,111,112,113,114,115,116,126,127,130,131,132,133,135,136,138,143,144,152,155,158,159,160,164,165,167,168,173,174,183,184,185,187,188,189,190,194,195,200,207,222,],[-58,-54,-76,-61,-96,-75,-105,-57,-77,-105,-105,-60,-105,-79,-105,-55,-59,-109,-86,-88,-79,-83,-85,-80,-82,-70,-73,-66,-69,-10,-12,-11,-13,-9,-5,-105,-105,-78,163,-41,-105,-105,-105,-105,-101,-105,-105,-14,-62,-87,-74,-95,-105,-105,-105,-105,-105,-105,163,-84,-81,-71,-72,-104,-102,-68,-67,212,-103,212,]),'/':([28,31,35,36,41,49,50,56,85,127,135,136,138,159,160,167,168,189,190,207,],[-54,-76,-96,-75,-77,97,-79,-55,-79,-78,-105,-105,-101,-74,-95,97,97,-104,-102,-103,]),'.':([50,53,85,],[99,105,99,]),'PUSH':([99,],[140,]),';':([25,26,28,31,33,35,36,37,40,41,43,45,46,49,50,52,56,58,59,65,68,70,77,81,85,89,90,91,92,95,98,101,104,110,111,112,113,114,115,116,119,126,127,131,132,133,135,136,138,143,144,152,153,155,157,158,159,160,164,165,167,168,173,174,184,185,187,188,189,190,194,195,207,217,230,],[-105,-58,-54,-76,-61,-96,-75,-105,-57,-77,-105,-105,-60,-105,-79,-105,-55,106,-59,-109,117,-8,-86,-88,-79,-83,-85,-80,-82,-70,-73,-66,-69,-10,-12,-11,-13,-9,-5,-105,-6,-105,-78,-41,-105,-105,-105,-105,-101,-105,-105,-14,-7,-62,182,-87,-74,-95,-105,-105,-105,-105,-105,-105,-84,-81,-71,-72,-104,-102,-68,-67,-103,-42,231,]),':':([20,24,61,62,],[-105,67,107,-110,]),'=':([25,39,50,65,110,111,112,113,114,115,116,141,145,152,],[69,87,-45,-109,-10,-12,-11,-13,-9,-5,-105,-44,-43,-14,]),'<':([6,28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,194,195,207,],[13,-54,-76,-96,-75,80,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,27,29,42,44,48,54,55,57,60,63,106,117,181,182,193,201,209,218,219,220,229,],[-105,0,-105,-105,-18,-105,-105,-26,-17,-25,-105,-105,-3,-38,-1,-34,-35,-39,-40,-36,-37,-2,-19,-56,-4,-48,-50,-46,-22,-27,-53,-49,-47,-33,]),'@':([0,4,63,201,],[2,2,-19,-22,]),'STRING':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,69,72,73,86,87,100,117,163,179,180,201,209,210,221,227,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,33,-105,-3,-2,-19,33,33,33,33,33,33,-4,33,33,33,-22,-27,-105,33,33,-33,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,180,201,209,210,221,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,47,-105,-3,-2,-19,-4,47,-22,-27,-105,47,-33,]),'SKIP':([28,56,166,],[-54,-55,186,]),'ELSE':([193,218,],[208,-53,]),'GE':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,194,195,207,],[-54,-76,-96,-75,78,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'EQ':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,194,195,207,],[-54,-76,-96,-75,79,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,38,60,63,67,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,99,100,102,103,105,107,117,118,151,163,171,176,179,180,201,209,210,212,221,227,229,],[-105,6,-105,-105,-18,-105,-105,20,-26,-17,23,-25,24,50,-105,-3,85,-2,-19,116,50,50,50,85,-93,-92,-94,-91,-89,-90,50,50,85,85,85,85,141,50,85,85,145,116,-4,154,178,50,192,24,50,50,-22,-27,-105,24,50,50,-33,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,180,201,209,210,221,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,51,-105,-3,-2,-19,-4,51,-22,-27,-105,51,-33,]),'AND':([28,31,35,36,37,41,43,49,50,52,56,77,81,85,95,98,101,104,126,127,132,135,136,138,143,144,158,159,160,164,167,168,173,174,187,188,189,190,194,195,207,],[-54,-76,-96,-75,-105,-77,88,-105,-79,-105,-55,-86,-88,-79,-70,-73,-66,-69,-105,-78,-105,-105,-105,-101,-105,-105,-87,-74,-95,88,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'FOR_TO':([28,56,94,],[-54,-55,134,]),'BOOLEAN_TYPE':([67,107,],[111,111,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,38,60,63,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,100,102,103,117,163,179,180,201,209,210,221,227,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,53,-105,-3,53,-2,-19,53,53,53,53,-93,-92,-94,-91,-89,-90,53,53,53,53,53,53,53,53,53,-4,53,53,53,-22,-27,-105,53,53,-33,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,38,47,60,63,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,100,102,103,117,134,163,179,180,186,201,209,210,221,227,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,28,-105,-3,28,28,-2,-19,28,28,28,28,-93,-92,-94,-91,-89,-90,28,28,28,28,28,28,28,28,28,-4,28,28,28,28,28,-22,-27,-105,28,28,-33,]),'STACK':([67,107,],[113,113,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,38,47,60,63,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,100,102,103,117,134,163,179,180,186,201,209,210,221,227,229,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,56,-105,-3,56,56,-2,-19,56,56,56,56,-93,-92,-94,-91,-89,-90,56,56,56,56,56,56,56,56,56,-4,56,56,56,56,56,-22,-27,-105,56,56,-33,]),'{':([6,12,14,21,22,28,56,109,156,172,175,196,197,202,206,208,211,215,216,],[-105,-105,-21,64,-106,-54,-55,-20,180,180,-105,210,-107,-105,180,180,-28,210,-108,]),'>':([23,28,31,35,36,37,41,49,50,52,56,65,66,85,95,98,101,104,127,135,136,138,143,144,159,160,167,168,173,174,187,188,189,190,194,195,207,],[-105,-54,-76,-96,-75,82,-77,-105,-79,-105,-55,-109,109,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'}':([7,10,15,18,19,27,42,44,48,54,55,57,60,64,106,108,117,149,150,177,180,181,182,193,204,209,210,218,219,220,221,223,224,226,228,229,231,],[-105,-26,-25,-105,-3,-38,-34,-35,-39,-40,-36,-37,-2,-105,-56,-105,-4,-105,-24,201,-105,-48,-50,-46,218,-27,-105,-53,-49,-47,-105,-23,-105,229,-52,-33,-51,]),'OR':([28,31,35,36,37,41,43,45,49,50,52,56,77,81,85,89,90,95,98,101,104,126,127,132,133,135,136,138,143,144,158,159,160,164,165,167,168,173,174,184,187,188,189,190,194,195,207,],[-54,-76,-96,-75,-105,-77,-105,93,-105,-79,-105,-55,-86,-88,-79,-83,-85,-70,-73,-66,-69,-105,-78,-105,-105,-105,-105,-101,-105,-105,-87,-74,-95,-105,93,-105,-105,-105,-105,-84,-71,-72,-104,-102,-68,-67,-103,]),'~':([18,19,60,64,108,117,],[-105,-3,-2,-105,151,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'math_or':([17,38,69,72,73,86,87,100,163,179,180,221,227,],[26,83,26,26,26,26,26,26,26,26,26,26,26,]),'for_block':([17,180,221,],[27,27,27,]),'statements':([17,180,221,],[29,204,224,]),'attrs_alt':([200,222,],[214,225,]),'vars':([8,18,64,210,],[17,60,108,221,]),'stack_method':([99,],[138,]),'math_or_alt':([45,165,],[91,185,]),'number':([17,38,47,69,72,73,74,86,87,88,93,96,97,100,102,103,134,163,179,180,186,221,227,],[31,31,94,31,31,31,31,31,31,31,31,31,31,31,31,31,166,31,31,31,206,31,31,]),'return':([224,],[226,]),'attrs':([176,],[198,]),'constructor_call':([118,],[153,]),'stack_call':([17,38,69,72,73,74,86,87,88,93,96,97,100,102,103,163,179,180,221,227,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'read_type':([71,],[123,]),'id':([17,38,69,72,73,74,86,87,88,93,96,97,100,102,103,163,171,179,180,221,227,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,191,36,36,36,36,]),'scope_function':([175,],[196,]),'string':([17,69,72,73,86,87,100,163,179,180,221,227,],[46,46,46,46,46,46,46,46,46,46,46,46,]),'scope_constructor':([202,],[215,]),'functions':([3,7,149,],[8,15,177,]),'func_block':([196,215,],[209,223,]),'inheritance':([6,],[12,]),'math_exp_alt':([52,173,174,],[101,194,195,]),'prop':([17,38,69,72,73,74,86,87,88,93,96,97,100,102,103,163,179,180,221,227,],[39,84,39,39,39,84,39,39,84,84,84,84,39,84,84,39,39,39,39,39,]),'read':([17,69,72,73,86,87,100,163,179,180,221,227,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'init':([25,],[68,]),'program':([0,],[1,]),'call':([17,38,69,72,73,74,86,87,88,93,96,97,100,102,103,163,179,180,221,227,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'neg_lookup':([20,],[61,]),'statement':([17,180,221,],[42,42,42,]),'factor':([17,38,69,72,73,74,86,87,88,93,96,97,100,102,103,163,179,180,221,227,],[49,49,49,49,49,49,49,49,49,49,135,136,49,49,49,49,49,49,49,49,]),'var':([8,18,64,210,],[18,18,18,18,]),'params':([147,178,],[175,202,]),'type':([67,107,],[115,148,]),'empty':([0,3,4,6,7,8,12,17,18,20,23,25,37,43,45,49,52,64,86,108,116,126,130,132,133,135,136,143,144,149,164,165,167,168,173,174,175,176,179,180,183,200,202,210,221,222,224,],[5,10,5,14,10,19,22,44,19,62,65,70,81,90,92,98,104,19,128,150,65,159,162,159,159,159,159,159,159,10,90,92,98,98,104,104,197,199,128,44,162,213,216,19,44,213,228,]),'function':([3,7,149,],[7,7,7,]),'math_and':([17,38,69,72,73,86,87,93,100,163,179,180,221,227,],[45,45,45,45,45,45,45,133,45,45,45,45,45,45,]),'math_exp':([17,38,69,72,73,74,86,87,88,93,100,163,179,180,221,227,],[37,37,37,37,37,126,37,37,37,37,37,37,37,37,37,37,]),'print_stmt':([17,180,221,],[48,48,48,]),'math_comp':([17,38,69,72,73,86,87,88,93,100,163,179,180,221,227,],[43,43,43,43,43,43,43,132,43,43,43,43,43,43,43,]),'args':([86,179,],[129,203,]),'comparison_op':([37,],[74,]),'class_block':([21,],[63,]),'math_comp_alt':([37,],[77,]),'scope_class':([12,],[21,]),'args_aux':([130,183,],[161,205,]),'return_type':([107,],[147,]),'class':([0,4,],[4,4,]),'term':([17,38,69,72,73,74,86,87,88,93,100,102,103,163,179,180,221,227,],[52,52,52,52,52,52,52,52,52,52,52,143,144,52,52,52,52,52,]),'new_quad':([126,132,133,135,136,143,144,],[158,164,165,167,168,173,174,]),'attr':([16,176,212,],[25,200,222,]),'term_alt':([49,167,168,],[95,187,188,]),'expr':([17,180,221,],[54,54,54,]),'if_block':([17,180,221,],[55,55,55,]),'math_and_alt':([43,164,],[89,184,]),'while_block':([17,180,221,],[57,57,57,]),'classes':([0,4,],[3,11,]),'check_class':([23,116,],[66,152,]),'exp':([17,69,72,73,86,87,100,163,179,180,221,227,],[58,119,124,125,130,131,142,183,130,58,58,230,]),'constructor':([108,],[149,]),'assign':([17,69,72,73,86,87,100,163,179,180,221,227,],[59,59,59,59,59,59,59,59,59,59,59,59,]),'block':([156,172,206,208,],[181,193,219,220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',17),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',21),
  ('vars -> empty','vars',1,'p_vars','grammar.py',22),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',26),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',34),
  ('init -> = exp','init',2,'p_init','grammar.py',40),
  ('init -> = NEW constructor_call','init',3,'p_init','grammar.py',41),
  ('init -> empty','init',1,'p_init','grammar.py',42),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',50),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',51),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',52),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',53),
  ('type -> STACK','type',1,'p_type','grammar.py',54),
  ('type -> ID check_class','type',2,'p_type','grammar.py',55),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',60),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',61),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',66),
  ('classes -> empty','classes',1,'p_classes','grammar.py',67),
  ('class -> @ ID inheritance scope_class class_block','class',5,'p_class','grammar.py',71),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',76),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',77),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',85),
  ('constructor -> ~ ID params scope_constructor func_block','constructor',5,'p_constructor','grammar.py',89),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',90),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',96),
  ('functions -> empty','functions',1,'p_functions','grammar.py',97),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',101),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',106),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',111),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',112),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',120),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',121),
  ('func_block -> { vars statements return }','func_block',5,'p_func_block','grammar.py',129),
  ('statements -> statement','statements',1,'p_statements','grammar.py',133),
  ('statements -> empty','statements',1,'p_statements','grammar.py',134),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',138),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',139),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',140),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',141),
  ('statement -> expr','statement',1,'p_statement','grammar.py',142),
  ('assign -> prop = exp','assign',3,'p_assign','grammar.py',146),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',155),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',162),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',163),
  ('prop -> ID','prop',1,'p_prop','grammar.py',164),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',179),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',180),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',184),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',188),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',192),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',196),
  ('return -> empty','return',1,'p_return','grammar.py',197),
  ('block -> { statements }','block',3,'p_block','grammar.py',205),
  ('number -> FLOAT','number',1,'p_number','grammar.py',209),
  ('number -> INT','number',1,'p_number','grammar.py',210),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',215),
  ('exp -> read','exp',1,'p_exp','grammar.py',219),
  ('exp -> math_or','exp',1,'p_exp','grammar.py',220),
  ('exp -> assign','exp',1,'p_exp','grammar.py',221),
  ('exp -> string','exp',1,'p_exp','grammar.py',222),
  ('string -> STRING','string',1,'p_string','grammar.py',227),
  ('read -> READ ( read_type )','read',4,'p_read','grammar.py',232),
  ('read_type -> INT_TYPE','read_type',1,'p_read_type','grammar.py',236),
  ('read_type -> FLOAT_TYPE','read_type',1,'p_read_type','grammar.py',237),
  ('read_type -> STRING_TYPE','read_type',1,'p_read_type','grammar.py',238),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',242),
  ('math_exp_alt -> + term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',249),
  ('math_exp_alt -> - term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',250),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',251),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',257),
  ('term_alt -> * factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',264),
  ('term_alt -> / factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',265),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',266),
  ('new_quad -> empty','new_quad',1,'p_new_quad','grammar.py',272),
  ('factor -> id','factor',1,'p_factor','grammar.py',283),
  ('factor -> number','factor',1,'p_factor','grammar.py',284),
  ('factor -> call','factor',1,'p_factor','grammar.py',285),
  ('factor -> ( math_or )','factor',3,'p_factor','grammar.py',286),
  ('id -> ID','id',1,'p_id','grammar.py',294),
  ('math_or -> math_and math_or_alt','math_or',2,'p_math_or','grammar.py',300),
  ('math_or_alt -> OR math_and new_quad math_or_alt','math_or_alt',4,'p_math_or_alt','grammar.py',308),
  ('math_or_alt -> empty','math_or_alt',1,'p_math_or_alt','grammar.py',309),
  ('math_and -> math_comp math_and_alt','math_and',2,'p_math_and','grammar.py',315),
  ('math_and_alt -> AND math_comp new_quad math_and_alt','math_and_alt',4,'p_math_and_alt','grammar.py',322),
  ('math_and_alt -> empty','math_and_alt',1,'p_math_and_alt','grammar.py',323),
  ('math_comp -> math_exp math_comp_alt','math_comp',2,'p_math_comp','grammar.py',329),
  ('math_comp_alt -> comparison_op math_exp new_quad','math_comp_alt',3,'p_math_comp_alt','grammar.py',336),
  ('math_comp_alt -> empty','math_comp_alt',1,'p_math_comp_alt','grammar.py',337),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',343),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',344),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',345),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',346),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','grammar.py',347),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','grammar.py',348),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',353),
  ('call -> stack_call','call',1,'p_call','grammar.py',354),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',359),
  ('args -> empty','args',1,'p_args','grammar.py',360),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',368),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',369),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',377),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',382),
  ('stack_method -> PUSH ( id )','stack_method',4,'p_stack_method','grammar.py',383),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',384),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',388),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',399),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',407),
  ('scope_constructor -> empty','scope_constructor',1,'p_scope_constructor','grammar.py',415),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',421),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',426),
]
