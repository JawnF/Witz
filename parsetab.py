
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | '=' NEW constructor_call\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID check_class\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params scope_constructor func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n                 | return\n    assign : prop '=' exp\n    constructor_call : ID '(' args ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read\n           | logic_exp\n           | assign\n           | STRING\n    read : READ '(' string ')'\n    string : ID check_string\n              | STRING\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term math_exp_alt\n                    | '-' term math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor term_alt \n                | '/' factor term_alt\n                | empty\n    factor : ID check_number\n              | number\n              | call\n              | '(' math_exp ')' \n    logic_exp : log_a logic_exp_alt\n    logic_exp_alt : OR log_a logic_exp_alt\n                     | empty\n    log_a : log_b log_a_alt\n    log_a_alt : AND log_b log_a_alt\n                 | empty\n    log_b : '(' logic_exp ')' \n             | bool\n             | comparison\n    bool : TRUE\n            | FALSE\n    comparison : math_exp comparison_op math_exp\n                  | math_exp\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n    call : prop '(' args ')'\n            | stack_call\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' ID check_variable ')'\n                    | PEEK '(' ')'\n    empty :scope_class : empty\n    scope_function : empty\n    scope_constructor : empty\n    check_variable : empty\n    check_class : empty\n    check_string : empty\n    check_number : empty\n    neg_lookup : empty\n    "
    
_lr_action_items = {'PEEK':([108,],[146,]),'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,122,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,34,-104,-3,-2,-19,-4,34,-22,-27,-104,34,-33,]),'FLOAT_TYPE':([71,112,],[115,115,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,34,64,67,73,76,77,90,91,109,122,172,187,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,29,-104,-3,29,-2,-19,29,29,29,29,29,29,-4,29,29,29,-22,-27,-104,29,-33,]),'VOID':([112,],[153,]),'STRING_TYPE':([71,112,],[117,117,]),'NE':([27,30,32,43,44,51,52,53,60,87,89,92,95,98,99,106,107,133,140,141,143,144,147,169,174,175,177,178,193,194,222,],[-55,-74,-95,-104,-75,-104,102,-104,-56,102,-104,-72,-69,-65,-68,-73,-111,-76,-104,-104,-104,-104,-100,-94,-70,-71,-67,-66,-103,-101,-102,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,122,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,31,-104,-3,-2,-19,-4,31,-22,-27,-104,31,-33,]),'POP':([108,],[148,]),'INT_TYPE':([71,112,],[119,119,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,122,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,33,-104,-3,-2,-19,-4,33,-22,-27,-104,33,-33,]),'NEW':([73,],[123,]),'TRUE':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,64,67,73,76,77,80,85,90,91,109,122,172,187,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,35,-104,-3,35,35,-2,-19,35,35,35,35,35,35,35,35,-4,35,35,35,-22,-27,-104,35,-33,]),'#':([0,3,4,5,7,11,18,19,64,67,68,113,122,156,157,202,211,226,229,],[-104,9,-104,-18,9,-17,-104,-3,-2,-19,-104,-104,-4,9,-24,-22,-27,-23,-33,]),'$':([0,3,4,5,7,8,10,11,15,18,67,68,122,202,211,212,229,],[-104,-104,-104,-18,-104,16,-26,-17,-25,16,-19,16,-4,-22,-27,16,-33,]),')':([27,30,32,35,36,37,40,41,43,44,46,48,51,52,53,55,56,60,63,69,81,82,83,84,87,88,89,90,92,95,98,99,106,107,115,116,117,118,119,120,121,125,126,127,128,129,131,132,133,134,135,136,137,138,140,141,143,144,145,147,151,159,162,163,164,167,168,169,170,171,173,174,175,177,178,179,180,184,187,191,193,194,195,199,200,201,204,206,208,209,215,216,222,225,228,],[-55,-74,-95,-86,-104,-104,-58,-84,-104,-75,-59,-61,-104,-89,-104,-85,-87,-56,-60,-109,-82,-80,-77,-79,133,134,-104,-104,-72,-69,-65,-68,-73,-111,-10,-12,-11,-13,-9,-5,-104,162,-104,-64,165,166,-104,-104,-76,-83,-97,169,-104,-42,-104,-104,-104,-104,-88,-100,182,-14,-62,-63,-110,-81,-78,-94,-96,-99,133,-70,-71,-67,-66,193,194,-104,-104,-104,-103,-101,-104,213,-30,-104,219,-98,222,-108,-32,-29,-102,-104,-31,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,29,31,33,34,38,39,53,54,64,67,69,73,76,77,80,85,86,89,90,91,93,94,97,100,101,102,103,104,105,109,115,116,117,118,119,121,122,139,146,148,149,150,152,153,154,155,159,161,172,186,187,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,38,-104,-3,75,76,77,38,38,90,-46,109,-2,-19,-109,38,38,38,38,38,90,-46,38,38,139,139,139,139,139,-93,-92,-90,-91,38,-10,-12,-11,-13,-9,-104,-4,139,179,180,181,-45,-44,-15,184,-16,-14,187,38,184,38,38,-22,-27,-104,38,-33,]),'+':([27,30,32,43,44,51,53,60,89,92,95,106,107,133,140,141,143,144,147,169,174,175,193,194,222,],[-55,-74,-95,-104,-75,100,-104,-56,-104,-72,-69,-73,-111,-76,-104,-104,100,100,-100,-94,-70,-71,-103,-101,-102,]),'*':([27,30,32,43,44,53,60,89,106,107,133,140,141,147,169,193,194,222,],[-55,-74,-95,93,-75,-104,-56,-104,-73,-111,-76,93,93,-100,-94,-103,-101,-102,]),'-':([27,30,32,43,44,51,53,60,89,92,95,106,107,133,140,141,143,144,147,169,174,175,193,194,222,],[-55,-74,-95,-104,-75,97,-104,-56,-104,-72,-69,-73,-111,-76,-104,-104,97,97,-100,-94,-70,-71,-103,-101,-102,]),',':([27,30,32,35,36,37,40,41,43,44,46,48,51,52,53,55,56,60,63,69,81,82,83,84,89,92,95,98,99,106,107,115,116,117,118,119,120,121,131,132,133,134,137,138,140,141,143,144,145,147,159,162,167,168,169,174,175,177,178,191,193,194,201,222,225,],[-55,-74,-95,-86,-104,-104,-58,-84,-104,-75,-59,-61,-104,-89,-104,-85,-87,-56,-60,-109,-82,-80,-77,-79,-104,-72,-69,-65,-68,-73,-111,-10,-12,-11,-13,-9,-5,-104,-104,-104,-76,-83,172,-42,-104,-104,-104,-104,-88,-100,-14,-62,-81,-78,-94,-70,-71,-67,-66,172,-103,-101,214,-102,214,]),'/':([27,30,32,43,44,53,60,89,106,107,133,140,141,147,169,193,194,222,],[-55,-74,-95,94,-75,-104,-56,-104,-73,-111,-76,94,94,-100,-94,-103,-101,-102,]),'.':([53,57,89,],[108,110,108,]),'PUSH':([108,],[149,]),';':([25,27,30,32,34,35,36,37,40,41,43,44,46,48,51,52,53,55,56,60,62,63,69,72,74,79,81,82,83,84,89,92,95,98,99,106,107,115,116,117,118,119,120,121,124,131,132,133,134,138,140,141,143,144,145,147,159,160,162,166,167,168,169,174,175,177,178,193,194,219,222,],[-104,-55,-74,-95,78,-86,-104,-104,-58,-84,-104,-75,-59,-61,-104,-89,-104,-85,-87,-56,111,-60,-109,122,-8,130,-82,-80,-77,-79,-104,-72,-69,-65,-68,-73,-111,-10,-12,-11,-13,-9,-5,-104,-6,-104,-104,-76,-83,-42,-104,-104,-104,-104,-88,-100,-14,-7,-62,190,-81,-78,-94,-70,-71,-67,-66,-103,-101,-43,-102,]),':':([20,24,65,66,],[-104,71,112,-112,]),'=':([25,39,53,69,115,116,117,118,119,120,121,150,152,159,],[73,91,-46,-109,-10,-12,-11,-13,-9,-5,-104,-45,-44,-14,]),'<':([6,27,30,32,43,44,51,52,53,60,87,89,92,95,98,99,106,107,133,140,141,143,144,147,169,174,175,177,178,193,194,222,],[13,-55,-74,-95,-104,-75,-104,104,-104,-56,104,-104,-72,-69,-65,-68,-73,-111,-76,-104,-104,-104,-104,-100,-94,-70,-71,-67,-66,-103,-101,-102,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,26,28,42,45,47,50,58,59,61,64,67,78,111,122,130,189,190,196,202,211,220,221,223,229,],[-104,0,-104,-104,-18,-104,-104,-26,-17,-25,-104,-104,-3,-38,-1,-34,-35,-41,-39,-40,-36,-37,-2,-19,-53,-57,-4,-52,-49,-51,-47,-22,-27,-54,-50,-48,-33,]),'@':([0,4,67,202,],[2,2,-19,-22,]),'STRING':([0,3,4,5,7,8,10,11,15,17,18,19,34,64,67,73,75,76,77,90,91,109,122,172,187,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,48,-104,-3,48,-2,-19,48,127,48,48,48,48,48,-4,48,48,48,-22,-27,-104,48,-33,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,122,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,49,-104,-3,-2,-19,-4,49,-22,-27,-104,49,-33,]),'SKIP':([27,60,176,],[-55,-56,192,]),'ELSE':([196,220,],[210,-54,]),'EQ':([27,30,32,43,44,51,52,53,60,87,89,92,95,98,99,106,107,133,140,141,143,144,147,169,174,175,177,178,193,194,222,],[-55,-74,-95,-104,-75,-104,103,-104,-56,103,-104,-72,-69,-65,-68,-73,-111,-76,-104,-104,-104,-104,-100,-94,-70,-71,-67,-66,-103,-101,-102,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,34,38,64,67,71,73,75,76,77,80,85,90,91,93,94,97,100,101,102,103,104,105,108,109,110,112,122,123,139,158,172,181,184,187,188,202,211,212,214,224,229,],[-104,6,-104,-104,-18,-104,-104,20,-26,-17,23,-25,24,53,-104,-3,53,89,-2,-19,121,53,126,53,53,89,89,53,53,89,89,89,89,89,-93,-92,-90,-91,150,53,152,121,-4,161,89,186,53,195,24,53,53,-22,-27,-104,24,53,-33,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,122,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,54,-104,-3,-2,-19,-4,54,-22,-27,-104,54,-33,]),'AND':([27,30,32,35,36,41,43,44,51,52,53,55,56,60,87,89,92,95,98,99,106,107,131,133,134,140,141,143,144,145,147,169,174,175,177,178,193,194,222,],[-55,-74,-95,-86,80,-84,-104,-75,-104,-89,-104,-85,-87,-56,-89,-104,-72,-69,-65,-68,-73,-111,80,-76,-83,-104,-104,-104,-104,-88,-100,-94,-70,-71,-67,-66,-103,-101,-102,]),'FOR_TO':([27,60,96,],[-55,-56,142,]),'FALSE':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,64,67,73,76,77,80,85,90,91,109,122,172,187,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,56,-104,-3,56,56,-2,-19,56,56,56,56,56,56,56,56,-4,56,56,56,-22,-27,-104,56,-33,]),'BOOLEAN_TYPE':([71,112,],[116,116,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,64,67,73,76,77,80,85,90,91,93,94,97,100,101,102,103,104,105,109,122,139,172,187,188,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,57,-104,-3,57,57,-2,-19,57,57,57,57,57,57,57,57,57,57,57,57,-93,-92,-90,-91,57,-4,57,57,57,57,-22,-27,-104,57,-33,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,49,64,67,73,76,77,80,85,90,91,93,94,97,100,101,102,103,104,105,109,122,139,142,172,187,188,192,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,27,-104,-3,27,27,27,-2,-19,27,27,27,27,27,27,27,27,27,27,27,27,-93,-92,-90,-91,27,-4,27,27,27,27,27,27,-22,-27,-104,27,-33,]),'STACK':([71,112,],[118,118,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,49,64,67,73,76,77,80,85,90,91,93,94,97,100,101,102,103,104,105,109,122,139,142,172,187,188,192,202,211,212,224,229,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,60,-104,-3,60,60,60,-2,-19,60,60,60,60,60,60,60,60,60,60,60,60,-93,-92,-90,-91,60,-4,60,60,60,60,60,60,-22,-27,-104,60,-33,]),'{':([6,12,14,21,22,27,60,114,165,182,183,197,198,203,207,210,213,217,218,],[-104,-104,-21,68,-105,-55,-56,-20,188,188,-104,212,-106,-104,188,188,-28,212,-107,]),'>':([23,27,30,32,43,44,51,52,53,60,69,70,87,89,92,95,98,99,106,107,133,140,141,143,144,147,169,174,175,177,178,193,194,222,],[-104,-55,-74,-95,-104,-75,-104,105,-104,-56,-109,114,105,-104,-72,-69,-65,-68,-73,-111,-76,-104,-104,-104,-104,-100,-94,-70,-71,-67,-66,-103,-101,-102,]),'}':([7,10,15,18,19,26,42,45,47,50,58,59,61,64,68,78,111,113,122,130,156,157,185,188,189,190,196,205,211,212,220,221,223,224,226,227,229,],[-104,-26,-25,-104,-3,-38,-34,-35,-41,-39,-40,-36,-37,-2,-104,-53,-57,-104,-4,-52,-104,-24,202,-104,-49,-51,-47,220,-27,-104,-54,-50,-48,-104,-23,229,-33,]),'OR':([27,30,32,35,36,37,41,43,44,51,52,53,55,56,60,81,82,87,89,92,95,98,99,106,107,131,132,133,134,140,141,143,144,145,147,167,169,174,175,177,178,193,194,222,],[-55,-74,-95,-86,-104,85,-84,-104,-75,-104,-89,-104,-85,-87,-56,-82,-80,-89,-104,-72,-69,-65,-68,-73,-111,-104,85,-76,-83,-104,-104,-104,-104,-88,-100,-81,-94,-70,-71,-67,-66,-103,-101,-102,]),'~':([18,19,64,68,113,122,],[-104,-3,-2,-104,158,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'args_aux':([137,191,],[170,206,]),'for_block':([17,188,224,],[26,26,26,]),'statements':([17,188,224,],[28,205,227,]),'attrs_alt':([201,225,],[216,228,]),'vars':([8,18,68,212,],[17,64,113,224,]),'func_block':([197,217,],[211,226,]),'number':([17,34,38,49,73,76,77,80,85,90,91,93,94,97,100,101,109,139,142,172,187,188,192,224,],[30,30,30,96,30,30,30,30,30,30,30,30,30,30,30,30,30,30,176,30,30,30,207,30,]),'attrs':([184,],[199,]),'params':([154,186,],[183,203,]),'constructor_call':([123,],[160,]),'stack_call':([17,34,38,73,76,77,80,85,90,91,93,94,97,100,101,109,139,172,187,188,224,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'string':([75,],[125,]),'log_b':([17,34,38,73,76,77,80,85,90,91,109,172,187,188,224,],[36,36,36,36,36,36,131,36,36,36,36,36,36,36,36,]),'functions':([3,7,156,],[8,15,185,]),'log_a':([17,34,38,73,76,77,85,90,91,109,172,187,188,224,],[37,37,37,37,37,37,132,37,37,37,37,37,37,37,]),'check_variable':([195,],[208,]),'inheritance':([6,],[12,]),'math_exp_alt':([51,143,144,],[98,177,178,]),'prop':([17,34,38,73,76,77,80,85,90,91,93,94,97,100,101,109,139,172,187,188,224,],[39,39,86,39,39,39,86,86,39,39,86,86,86,86,86,39,86,39,39,39,39,]),'read':([17,34,73,76,77,90,91,109,172,187,188,224,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'init':([25,],[72,]),'program':([0,],[1,]),'call':([17,34,38,73,76,77,80,85,90,91,93,94,97,100,101,109,139,172,187,188,224,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'neg_lookup':([20,],[65,]),'math_exp':([17,34,38,73,76,77,80,85,90,91,101,109,139,172,187,188,224,],[52,52,87,52,52,52,52,52,52,52,145,52,173,52,52,52,52,]),'factor':([17,34,38,73,76,77,80,85,90,91,93,94,97,100,101,109,139,172,187,188,224,],[43,43,43,43,43,43,43,43,43,43,140,141,43,43,43,43,43,43,43,43,43,]),'var':([8,18,68,212,],[18,18,18,18,]),'bool':([17,34,38,73,76,77,80,85,90,91,109,172,187,188,224,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'type':([71,112,],[120,155,]),'empty':([0,3,4,6,7,8,12,17,18,20,23,25,36,37,43,51,53,68,89,90,113,121,126,131,132,137,140,141,143,144,156,183,184,187,188,191,195,201,203,212,224,225,],[5,10,5,14,10,19,22,45,19,66,69,74,81,84,92,99,107,19,107,135,157,69,164,81,84,171,92,92,99,99,10,198,200,135,45,171,209,215,218,19,45,215,]),'logic_exp':([17,34,38,73,76,77,90,91,109,172,187,188,224,],[46,46,88,46,46,46,46,46,46,46,46,46,46,]),'function':([3,7,156,],[7,7,7,]),'scope_constructor':([203,],[217,]),'return':([17,188,224,],[47,47,47,]),'statement':([17,188,224,],[42,42,42,]),'print_stmt':([17,188,224,],[50,50,50,]),'scope_function':([183,],[197,]),'args':([90,187,],[136,204,]),'comparison_op':([52,87,],[101,101,]),'class_block':([21,],[67,]),'log_a_alt':([36,131,],[82,167,]),'scope_class':([12,],[21,]),'logic_exp_alt':([37,132,],[83,168,]),'return_type':([112,],[154,]),'check_number':([53,89,],[106,106,]),'class':([0,4,],[4,4,]),'comparison':([17,34,38,73,76,77,80,85,90,91,109,172,187,188,224,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'term':([17,34,38,73,76,77,80,85,90,91,97,100,101,109,139,172,187,188,224,],[51,51,51,51,51,51,51,51,51,51,143,144,51,51,51,51,51,51,51,]),'check_string':([126,],[163,]),'attr':([16,184,214,],[25,201,225,]),'term_alt':([43,140,141,],[95,174,175,]),'expr':([17,188,224,],[58,58,58,]),'if_block':([17,188,224,],[59,59,59,]),'stack_method':([108,],[147,]),'while_block':([17,188,224,],[61,61,61,]),'classes':([0,4,],[3,11,]),'check_class':([23,121,],[70,159,]),'exp':([17,34,73,76,77,90,91,109,172,187,188,224,],[62,79,124,128,129,137,138,151,191,137,62,62,]),'constructor':([113,],[156,]),'assign':([17,34,73,76,77,90,91,109,172,187,188,224,],[63,63,63,63,63,63,63,63,63,63,63,63,]),'block':([165,182,207,210,],[189,196,221,223,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',12),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',16),
  ('vars -> empty','vars',1,'p_vars','grammar.py',17),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',21),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',29),
  ('init -> = exp','init',2,'p_init','grammar.py',35),
  ('init -> = NEW constructor_call','init',3,'p_init','grammar.py',36),
  ('init -> empty','init',1,'p_init','grammar.py',37),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',42),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',43),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',44),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',45),
  ('type -> STACK','type',1,'p_type','grammar.py',46),
  ('type -> ID check_class','type',2,'p_type','grammar.py',47),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',52),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',53),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',57),
  ('classes -> empty','classes',1,'p_classes','grammar.py',58),
  ('class -> @ ID inheritance scope_class class_block','class',5,'p_class','grammar.py',62),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',67),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',68),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',76),
  ('constructor -> ~ ID params scope_constructor func_block','constructor',5,'p_constructor','grammar.py',80),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',81),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',87),
  ('functions -> empty','functions',1,'p_functions','grammar.py',88),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',92),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',97),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',102),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',103),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',111),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',112),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',120),
  ('statements -> statement','statements',1,'p_statements','grammar.py',124),
  ('statements -> empty','statements',1,'p_statements','grammar.py',125),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',129),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',130),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',131),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',132),
  ('statement -> expr','statement',1,'p_statement','grammar.py',133),
  ('statement -> return','statement',1,'p_statement','grammar.py',134),
  ('assign -> prop = exp','assign',3,'p_assign','grammar.py',138),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',142),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',149),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',150),
  ('prop -> ID','prop',1,'p_prop','grammar.py',151),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',168),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',169),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',173),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',177),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',181),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',185),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',186),
  ('block -> { statements }','block',3,'p_block','grammar.py',190),
  ('number -> FLOAT','number',1,'p_number','grammar.py',194),
  ('number -> INT','number',1,'p_number','grammar.py',195),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',199),
  ('exp -> read','exp',1,'p_exp','grammar.py',203),
  ('exp -> logic_exp','exp',1,'p_exp','grammar.py',204),
  ('exp -> assign','exp',1,'p_exp','grammar.py',205),
  ('exp -> STRING','exp',1,'p_exp','grammar.py',206),
  ('read -> READ ( string )','read',4,'p_read','grammar.py',210),
  ('string -> ID check_string','string',2,'p_string','grammar.py',214),
  ('string -> STRING','string',1,'p_string','grammar.py',215),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',219),
  ('math_exp_alt -> + term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',223),
  ('math_exp_alt -> - term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',224),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',225),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',229),
  ('term_alt -> * factor term_alt','term_alt',3,'p_term_alt','grammar.py',233),
  ('term_alt -> / factor term_alt','term_alt',3,'p_term_alt','grammar.py',234),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',235),
  ('factor -> ID check_number','factor',2,'p_factor','grammar.py',239),
  ('factor -> number','factor',1,'p_factor','grammar.py',240),
  ('factor -> call','factor',1,'p_factor','grammar.py',241),
  ('factor -> ( math_exp )','factor',3,'p_factor','grammar.py',242),
  ('logic_exp -> log_a logic_exp_alt','logic_exp',2,'p_logic_exp','grammar.py',247),
  ('logic_exp_alt -> OR log_a logic_exp_alt','logic_exp_alt',3,'p_logic_exp_alt','grammar.py',251),
  ('logic_exp_alt -> empty','logic_exp_alt',1,'p_logic_exp_alt','grammar.py',252),
  ('log_a -> log_b log_a_alt','log_a',2,'p_log_a','grammar.py',256),
  ('log_a_alt -> AND log_b log_a_alt','log_a_alt',3,'p_log_a_alt','grammar.py',260),
  ('log_a_alt -> empty','log_a_alt',1,'p_log_a_alt','grammar.py',261),
  ('log_b -> ( logic_exp )','log_b',3,'p_log_b','grammar.py',265),
  ('log_b -> bool','log_b',1,'p_log_b','grammar.py',266),
  ('log_b -> comparison','log_b',1,'p_log_b','grammar.py',267),
  ('bool -> TRUE','bool',1,'p_bool','grammar.py',271),
  ('bool -> FALSE','bool',1,'p_bool','grammar.py',272),
  ('comparison -> math_exp comparison_op math_exp','comparison',3,'p_comparison','grammar.py',276),
  ('comparison -> math_exp','comparison',1,'p_comparison','grammar.py',277),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',281),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',282),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',283),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',284),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',288),
  ('call -> stack_call','call',1,'p_call','grammar.py',289),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',294),
  ('args -> empty','args',1,'p_args','grammar.py',295),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',300),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',301),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',306),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',311),
  ('stack_method -> PUSH ( ID check_variable )','stack_method',5,'p_stack_method','grammar.py',312),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',313),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',317),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',328),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',336),
  ('scope_constructor -> empty','scope_constructor',1,'p_scope_constructor','grammar.py',344),
  ('check_variable -> empty','check_variable',1,'p_check_variables','grammar.py',350),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',355),
  ('check_string -> empty','check_string',1,'p_check_string','grammar.py',360),
  ('check_number -> empty','check_number',1,'p_check_number','grammar.py',365),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',370),
]
