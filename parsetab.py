
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID check_class\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params scope_constructor func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID ':' return_type params scope_function func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n                 | return\n    assign : prop '=' expr\n              | prop '=' NEW ID\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read\n           | logic_exp\n           | assign\n    read : READ '(' string ')'\n    string : ID\n              | STRING\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term math_exp_alt\n                    | '-' term math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor term_alt \n                | '/' factor term_alt\n                | empty\n    factor : ID\n              | number\n              | call\n              | '(' math_exp ')' \n    logic_exp : log_a logic_exp_alt\n    logic_exp_alt : OR log_a logic_exp_alt\n                     | empty\n    log_a : log_b log_a_alt\n    log_a_alt : AND log_b log_a_alt\n                 | empty\n    log_b : '(' logic_exp ')' \n             | bool\n             | comparison\n    bool : TRUE\n            | FALSE\n    comparison : math_exp comparison_op math_exp\n                  | math_exp\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n    call : prop '(' args ')'\n            | stack_call '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : prop stack_method\n    stack_method : POP\n                    | PUSH\n                    | PEEK\n    empty :scope_class : empty\n    scope_function : empty\n    scope_constructor : empty\n    check_variable : empty\n    check_class : empty\n    "
    
_lr_action_items = {'PEEK':([38,52,84,87,150,152,],[88,-45,88,-45,-44,-43,]),'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,63,65,125,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,33,-102,-3,-2,-18,-4,33,-26,-102,-21,33,-32,]),'FLOAT_TYPE':([64,69,],[113,113,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,33,63,65,71,74,75,89,93,99,110,125,167,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,29,-102,-3,29,-2,-18,29,29,29,29,29,29,29,-4,29,29,-26,-102,-21,29,-32,]),'VOID':([64,],[114,]),'STRING_TYPE':([64,69,],[116,116,]),'NE':([27,30,42,43,50,51,52,59,85,87,94,97,101,102,135,143,144,147,148,164,170,171,173,174,175,],[-54,-72,-102,-73,-102,105,-71,-55,105,-71,-70,-67,-63,-66,-74,-102,-102,-102,-102,-92,-68,-69,-93,-65,-64,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,63,65,125,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,31,-102,-3,-2,-18,-4,31,-26,-102,-21,31,-32,]),'POP':([38,52,84,87,150,152,],[91,-45,91,-45,-44,-43,]),'INT_TYPE':([64,69,],[118,118,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,63,65,125,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,32,-102,-3,-2,-18,-4,32,-26,-102,-21,32,-32,]),'NEW':([93,],[140,]),'TRUE':([0,3,4,5,7,8,10,11,15,17,18,19,33,37,63,65,71,74,75,78,83,89,93,99,110,125,167,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,34,-102,-3,34,34,-2,-18,34,34,34,34,34,34,34,34,34,-4,34,34,-26,-102,-21,34,-32,]),'#':([0,3,4,5,7,11,18,19,63,65,66,122,125,156,157,190,196,211,212,],[-102,9,-102,-17,9,-16,-102,-3,-2,-18,-102,-102,-4,9,-23,-26,-21,-22,-32,]),'$':([0,3,4,5,7,8,10,11,15,18,65,66,125,190,191,196,212,],[-102,-102,-102,-17,-102,16,-25,-16,-24,16,-18,16,-4,-26,16,-21,-32,]),')':([27,30,34,35,36,39,40,42,43,45,50,51,52,54,55,59,62,67,79,80,81,82,85,86,87,89,94,97,99,101,102,112,113,115,116,117,118,121,124,127,128,129,130,131,133,134,135,136,137,138,139,141,143,144,146,147,148,149,151,154,155,159,162,163,164,165,166,168,169,170,171,173,174,175,179,180,181,187,194,195,199,203,210,],[-54,-72,-84,-102,-102,-57,-82,-102,-73,-58,-102,-87,-71,-83,-85,-55,-59,-107,-80,-78,-75,-77,135,136,-71,-102,-70,-67,-102,-63,-66,-56,-9,-11,-10,-12,-8,-102,-5,-62,-61,159,160,161,-102,-102,-74,-81,-95,164,-102,-41,-102,-102,173,-102,-102,-86,176,-102,-13,-60,-79,-76,-92,-94,-97,-42,135,-68,-69,-93,-65,-64,192,-29,-102,-102,-31,-28,-96,-102,-30,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,29,31,32,33,37,38,48,52,53,63,65,67,71,74,75,78,83,84,87,88,89,90,91,92,93,95,96,99,100,103,104,105,106,107,108,110,113,114,115,116,117,118,119,120,121,125,142,150,152,155,167,183,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,37,-102,-3,73,74,75,37,37,89,99,-45,110,-2,-18,-107,37,37,37,37,37,89,-45,-101,37,-98,-99,-100,37,142,142,37,142,142,142,-91,-90,-88,-89,37,-9,-14,-11,-10,-12,-8,154,-15,-102,-4,142,-44,-43,-13,37,154,37,-26,-102,-21,37,-32,]),'+':([27,30,42,43,50,52,59,87,94,97,135,143,144,147,148,164,170,171,173,],[-54,-72,-102,-73,103,-71,-55,-71,-70,-67,-74,-102,-102,103,103,-92,-68,-69,-93,]),'*':([27,30,42,43,52,59,87,135,143,144,164,173,],[-54,-72,95,-73,-71,-55,-71,-74,95,95,-92,-93,]),'-':([27,30,42,43,50,52,59,87,94,97,135,143,144,147,148,164,170,171,173,],[-54,-72,-102,-73,100,-71,-55,-71,-70,-67,-74,-102,-102,100,100,-92,-68,-69,-93,]),',':([27,30,34,35,36,39,40,42,43,45,50,51,52,54,55,59,62,67,79,80,81,82,87,94,97,101,102,112,113,115,116,117,118,121,124,133,134,135,136,139,141,143,144,147,148,149,155,159,162,163,164,168,170,171,173,174,175,181,187,203,],[-54,-72,-84,-102,-102,-57,-82,-102,-73,-58,-102,-87,-71,-83,-85,-55,-59,-107,-80,-78,-75,-77,-71,-70,-67,-63,-66,-56,-9,-11,-10,-12,-8,-102,-5,-102,-102,-74,-81,167,-41,-102,-102,-102,-102,-86,-13,-60,-79,-76,-92,-42,-68,-69,-93,-65,-64,193,167,193,]),'/':([27,30,42,43,52,59,87,135,143,144,164,173,],[-54,-72,96,-73,-71,-55,-71,-74,96,96,-92,-93,]),'.':([52,56,87,],[109,111,109,]),'PUSH':([38,52,84,87,150,152,],[92,-45,92,-45,-44,-43,]),';':([25,27,30,33,34,35,36,39,40,42,43,45,50,51,52,54,55,59,61,62,67,70,72,77,79,80,81,82,87,94,97,101,102,112,113,115,116,117,118,121,124,126,133,134,135,136,141,143,144,147,148,149,155,159,161,162,163,164,168,170,171,173,174,175,],[-102,-54,-72,76,-84,-102,-102,-57,-82,-102,-73,-58,-102,-87,-71,-83,-85,-55,112,-59,-107,125,-7,132,-80,-78,-75,-77,-71,-70,-67,-63,-66,-56,-9,-11,-10,-12,-8,-102,-5,-6,-102,-102,-74,-81,-41,-102,-102,-102,-102,-86,-13,-60,186,-79,-76,-92,-42,-68,-69,-93,-65,-64,]),':':([20,24,],[64,69,]),'=':([25,38,52,67,113,115,116,117,118,121,124,150,152,155,],[71,93,-45,-107,-9,-11,-10,-12,-8,-102,-5,-44,-43,-13,]),'<':([6,27,30,42,43,50,51,52,59,85,87,94,97,101,102,135,143,144,147,148,164,170,171,173,174,175,],[13,-54,-72,-102,-73,-102,107,-71,-55,107,-71,-70,-67,-63,-66,-74,-102,-102,-102,-102,-92,-68,-69,-93,-65,-64,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,26,28,41,44,46,49,57,58,60,63,65,76,112,125,132,185,186,189,190,196,206,207,208,212,],[-102,0,-102,-102,-17,-102,-102,-25,-16,-24,-102,-102,-3,-37,-1,-33,-34,-40,-38,-39,-35,-36,-2,-18,-52,-56,-4,-51,-48,-50,-46,-26,-21,-53,-49,-47,-32,]),'@':([0,4,65,196,],[2,2,-18,-21,]),'STRING':([73,],[127,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,63,65,125,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,47,-102,-3,-2,-18,-4,47,-26,-102,-21,47,-32,]),'SKIP':([27,59,172,],[-54,-55,188,]),'ELSE':([189,206,],[201,-53,]),'EQ':([27,30,42,43,50,51,52,59,85,87,94,97,101,102,135,143,144,147,148,164,170,171,173,174,175,],[-54,-72,-102,-73,-102,106,-71,-55,106,-71,-70,-67,-63,-66,-74,-102,-102,-102,-102,-92,-68,-69,-93,-65,-64,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,33,37,63,64,65,69,71,73,74,75,78,83,89,93,95,96,99,100,103,104,105,106,107,108,109,110,111,125,140,142,154,158,167,184,190,191,193,196,202,212,],[-102,6,-102,-102,-17,-102,-102,20,-25,-16,23,-24,24,52,-102,-3,52,87,-2,121,-18,121,52,128,52,52,87,87,52,52,87,87,52,87,87,87,-91,-90,-88,-89,150,52,152,-4,168,87,24,183,52,52,-26,-102,24,-21,52,-32,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,63,65,125,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,53,-102,-3,-2,-18,-4,53,-26,-102,-21,53,-32,]),'AND':([27,30,34,35,40,42,43,50,51,52,54,55,59,85,87,94,97,101,102,133,135,136,143,144,147,148,149,164,170,171,173,174,175,],[-54,-72,-84,78,-82,-102,-73,-102,-87,-71,-83,-85,-55,-87,-71,-70,-67,-63,-66,78,-74,-81,-102,-102,-102,-102,-86,-92,-68,-69,-93,-65,-64,]),'FOR_TO':([27,59,98,],[-54,-55,145,]),'FALSE':([0,3,4,5,7,8,10,11,15,17,18,19,33,37,63,65,71,74,75,78,83,89,93,99,110,125,167,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,55,-102,-3,55,55,-2,-18,55,55,55,55,55,55,55,55,55,-4,55,55,-26,-102,-21,55,-32,]),'BOOLEAN_TYPE':([64,69,],[115,115,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,33,37,63,65,71,74,75,78,83,89,93,95,96,99,100,103,104,105,106,107,108,110,125,142,167,184,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,56,-102,-3,56,56,-2,-18,56,56,56,56,56,56,56,56,56,56,56,56,56,-91,-90,-88,-89,56,-4,56,56,56,-26,-102,-21,56,-32,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,33,37,47,63,65,71,74,75,78,83,89,93,95,96,99,100,103,104,105,106,107,108,110,125,142,145,167,184,188,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,27,-102,-3,27,27,27,-2,-18,27,27,27,27,27,27,27,27,27,27,27,27,27,-91,-90,-88,-89,27,-4,27,27,27,27,27,-26,-102,-21,27,-32,]),'STACK':([64,69,],[117,117,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,33,37,47,63,65,71,74,75,78,83,89,93,95,96,99,100,103,104,105,106,107,108,110,125,142,145,167,184,188,190,191,196,202,212,],[-102,-102,-102,-17,-102,-102,-25,-16,-24,59,-102,-3,59,59,59,-2,-18,59,59,59,59,59,59,59,59,59,59,59,59,59,-91,-90,-88,-89,59,-4,59,59,59,59,59,-26,-102,-21,59,-32,]),'{':([6,12,14,21,22,27,59,123,153,160,176,177,178,192,197,200,201,204,205,],[-102,-102,-20,66,-103,-54,-55,-19,-102,184,184,191,-104,-27,-102,184,184,191,-105,]),'>':([23,27,30,42,43,50,51,52,59,67,68,85,87,94,97,101,102,135,143,144,147,148,164,170,171,173,174,175,],[-102,-54,-72,-102,-73,-102,108,-71,-55,-107,123,108,-71,-70,-67,-63,-66,-74,-102,-102,-102,-102,-92,-68,-69,-93,-65,-64,]),'}':([7,10,15,18,19,26,41,44,46,49,57,58,60,63,66,76,112,122,125,132,156,157,182,184,185,186,189,190,191,198,202,206,207,208,209,211,212,],[-102,-25,-24,-102,-3,-37,-33,-34,-40,-38,-39,-35,-36,-2,-102,-52,-56,-102,-4,-51,-102,-23,196,-102,-48,-50,-46,-26,-102,206,-102,-53,-49,-47,212,-22,-32,]),'OR':([27,30,34,35,36,40,42,43,50,51,52,54,55,59,79,80,85,87,94,97,101,102,133,134,135,136,143,144,147,148,149,162,164,170,171,173,174,175,],[-54,-72,-84,-102,83,-82,-102,-73,-102,-87,-71,-83,-85,-55,-80,-78,-87,-71,-70,-67,-63,-66,-102,83,-74,-81,-102,-102,-102,-102,-86,-79,-92,-68,-69,-93,-65,-64,]),'~':([18,19,63,66,122,125,],[-102,-3,-2,-102,158,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'args_aux':([139,187,],[165,199,]),'for_block':([17,184,202,],[26,26,26,]),'statements':([17,184,202,],[28,198,209,]),'attrs_alt':([181,203,],[195,210,]),'vars':([8,18,66,191,],[17,63,122,202,]),'number':([17,33,37,47,71,74,75,78,83,89,93,95,96,99,100,103,104,110,142,145,167,184,188,202,],[30,30,30,98,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,172,30,30,200,30,]),'attrs':([154,],[179,]),'stack_call':([17,33,37,71,74,75,78,83,89,93,95,96,99,100,103,104,110,142,167,184,202,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'string':([73,],[129,]),'log_b':([17,33,37,71,74,75,78,83,89,93,99,110,167,184,202,],[35,35,35,35,35,35,133,35,35,35,35,35,35,35,35,]),'functions':([3,7,156,],[8,15,182,]),'log_a':([17,33,37,71,74,75,83,89,93,99,110,167,184,202,],[36,36,36,36,36,36,134,36,36,36,36,36,36,36,]),'func_block':([177,204,],[190,211,]),'inheritance':([6,],[12,]),'math_exp_alt':([50,147,148,],[101,174,175,]),'prop':([17,33,37,71,74,75,78,83,89,93,95,96,99,100,103,104,110,142,167,184,202,],[38,38,84,38,38,38,84,84,38,38,84,84,38,84,84,84,38,84,38,38,38,]),'read':([17,33,71,74,75,89,93,99,110,167,184,202,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'init':([25,],[70,]),'program':([0,],[1,]),'call':([17,33,37,71,74,75,78,83,89,93,95,96,99,100,103,104,110,142,167,184,202,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'math_exp':([17,33,37,71,74,75,78,83,89,93,99,104,110,142,167,184,202,],[51,51,85,51,51,51,51,51,51,51,51,149,51,169,51,51,51,]),'factor':([17,33,37,71,74,75,78,83,89,93,95,96,99,100,103,104,110,142,167,184,202,],[42,42,42,42,42,42,42,42,42,42,143,144,42,42,42,42,42,42,42,42,42,]),'var':([8,18,66,191,],[18,18,18,18,]),'bool':([17,33,37,71,74,75,78,83,89,93,99,110,167,184,202,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'type':([64,69,],[120,124,]),'empty':([0,3,4,6,7,8,12,17,18,23,25,35,36,42,50,66,89,99,121,122,133,134,139,143,144,147,148,153,154,156,181,184,187,191,197,202,203,],[5,10,5,14,10,19,22,44,19,67,72,79,82,94,102,19,137,137,67,157,79,82,166,94,94,102,102,178,180,10,194,44,166,19,205,44,194,]),'logic_exp':([17,33,37,71,74,75,89,93,99,110,167,184,202,],[45,45,86,45,45,45,45,45,45,45,45,45,45,]),'function':([3,7,156,],[7,7,7,]),'scope_constructor':([197,],[204,]),'return':([17,184,202,],[46,46,46,]),'statement':([17,184,202,],[41,41,41,]),'print_stmt':([17,184,202,],[49,49,49,]),'scope_function':([153,],[177,]),'args':([89,99,],[138,146,]),'comparison_op':([51,85,],[104,104,]),'class_block':([21,],[65,]),'log_a_alt':([35,133,],[80,162,]),'scope_class':([12,],[21,]),'logic_exp_alt':([36,134,],[81,163,]),'return_type':([64,],[119,]),'class':([0,4,],[4,4,]),'comparison':([17,33,37,71,74,75,78,83,89,93,99,110,167,184,202,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'term':([17,33,37,71,74,75,78,83,89,93,99,100,103,104,110,142,167,184,202,],[50,50,50,50,50,50,50,50,50,50,50,147,148,50,50,50,50,50,50,]),'attr':([16,154,193,],[25,181,203,]),'term_alt':([42,143,144,],[97,170,171,]),'expr':([17,93,184,202,],[57,141,57,57,]),'if_block':([17,184,202,],[58,58,58,]),'stack_method':([38,84,],[90,90,]),'constructor':([122,],[156,]),'while_block':([17,184,202,],[60,60,60,]),'classes':([0,4,],[3,11,]),'check_class':([23,121,],[68,155,]),'exp':([17,33,71,74,75,89,93,99,110,167,184,202,],[61,77,126,130,131,139,61,139,151,187,61,61,]),'params':([119,183,],[153,197,]),'assign':([17,33,71,74,75,89,93,99,110,167,184,202,],[62,62,62,62,62,62,62,62,62,62,62,62,]),'block':([160,176,200,201,],[185,189,207,208,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',12),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',16),
  ('vars -> empty','vars',1,'p_vars','grammar.py',17),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',21),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',27),
  ('init -> = exp','init',2,'p_init','grammar.py',33),
  ('init -> empty','init',1,'p_init','grammar.py',34),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',38),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',39),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',40),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',41),
  ('type -> STACK','type',1,'p_type','grammar.py',42),
  ('type -> ID check_class','type',2,'p_type','grammar.py',43),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',48),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',49),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',53),
  ('classes -> empty','classes',1,'p_classes','grammar.py',54),
  ('class -> @ ID inheritance scope_class class_block','class',5,'p_class','grammar.py',58),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',63),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',64),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',72),
  ('constructor -> ~ ID params scope_constructor func_block','constructor',5,'p_constructor','grammar.py',76),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',77),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',83),
  ('functions -> empty','functions',1,'p_functions','grammar.py',84),
  ('function -> # ID : return_type params scope_function func_block','function',7,'p_function','grammar.py',88),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',93),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',98),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',99),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',107),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',108),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',116),
  ('statements -> statement','statements',1,'p_statements','grammar.py',120),
  ('statements -> empty','statements',1,'p_statements','grammar.py',121),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',125),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',126),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',127),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',128),
  ('statement -> expr','statement',1,'p_statement','grammar.py',129),
  ('statement -> return','statement',1,'p_statement','grammar.py',130),
  ('assign -> prop = expr','assign',3,'p_assign','grammar.py',134),
  ('assign -> prop = NEW ID','assign',4,'p_assign','grammar.py',135),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',139),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',140),
  ('prop -> ID','prop',1,'p_prop','grammar.py',141),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',145),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',146),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',150),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',154),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',158),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',162),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',163),
  ('block -> { statements }','block',3,'p_block','grammar.py',167),
  ('number -> FLOAT','number',1,'p_number','grammar.py',171),
  ('number -> INT','number',1,'p_number','grammar.py',172),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',176),
  ('exp -> read','exp',1,'p_exp','grammar.py',180),
  ('exp -> logic_exp','exp',1,'p_exp','grammar.py',181),
  ('exp -> assign','exp',1,'p_exp','grammar.py',182),
  ('read -> READ ( string )','read',4,'p_read','grammar.py',186),
  ('string -> ID','string',1,'p_string','grammar.py',190),
  ('string -> STRING','string',1,'p_string','grammar.py',191),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',195),
  ('math_exp_alt -> + term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',199),
  ('math_exp_alt -> - term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',200),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',201),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',205),
  ('term_alt -> * factor term_alt','term_alt',3,'p_term_alt','grammar.py',209),
  ('term_alt -> / factor term_alt','term_alt',3,'p_term_alt','grammar.py',210),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',211),
  ('factor -> ID','factor',1,'p_factor','grammar.py',215),
  ('factor -> number','factor',1,'p_factor','grammar.py',216),
  ('factor -> call','factor',1,'p_factor','grammar.py',217),
  ('factor -> ( math_exp )','factor',3,'p_factor','grammar.py',218),
  ('logic_exp -> log_a logic_exp_alt','logic_exp',2,'p_logic_exp','grammar.py',222),
  ('logic_exp_alt -> OR log_a logic_exp_alt','logic_exp_alt',3,'p_logic_exp_alt','grammar.py',226),
  ('logic_exp_alt -> empty','logic_exp_alt',1,'p_logic_exp_alt','grammar.py',227),
  ('log_a -> log_b log_a_alt','log_a',2,'p_log_a','grammar.py',231),
  ('log_a_alt -> AND log_b log_a_alt','log_a_alt',3,'p_log_a_alt','grammar.py',235),
  ('log_a_alt -> empty','log_a_alt',1,'p_log_a_alt','grammar.py',236),
  ('log_b -> ( logic_exp )','log_b',3,'p_log_b','grammar.py',240),
  ('log_b -> bool','log_b',1,'p_log_b','grammar.py',241),
  ('log_b -> comparison','log_b',1,'p_log_b','grammar.py',242),
  ('bool -> TRUE','bool',1,'p_bool','grammar.py',246),
  ('bool -> FALSE','bool',1,'p_bool','grammar.py',247),
  ('comparison -> math_exp comparison_op math_exp','comparison',3,'p_comparison','grammar.py',251),
  ('comparison -> math_exp','comparison',1,'p_comparison','grammar.py',252),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',256),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',257),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',258),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',259),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',263),
  ('call -> stack_call ( args )','call',4,'p_call','grammar.py',264),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',268),
  ('args -> empty','args',1,'p_args','grammar.py',269),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',273),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',274),
  ('stack_call -> prop stack_method','stack_call',2,'p_stack_call','grammar.py',278),
  ('stack_method -> POP','stack_method',1,'p_stack_method','grammar.py',282),
  ('stack_method -> PUSH','stack_method',1,'p_stack_method','grammar.py',283),
  ('stack_method -> PEEK','stack_method',1,'p_stack_method','grammar.py',284),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',288),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',298),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',306),
  ('scope_constructor -> empty','scope_constructor',1,'p_scope_constructor','grammar.py',314),
  ('check_variable -> empty','check_variable',1,'p_check_variables','grammar.py',320),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',325),
]
