
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance test class_block\n    test :\n    inheritance : '<' ID '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID ':' return_type params func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n                 | return\n    assign : prop '=' expr\n              | prop '=' NEW ID\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read\n           | logic_exp\n           | assign\n    read : READ '(' string ')'\n    string : ID\n              | STRING\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term math_exp_alt\n                    | '-' term math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor term_alt \n                | '/' factor term_alt\n                | empty\n    factor : ID\n              | number\n              | call\n              | '(' math_exp ')' \n    logic_exp : log_a logic_exp_alt\n    logic_exp_alt : OR log_a logic_exp_alt\n                     | empty\n    log_a : log_b log_a_alt\n    log_a_alt : AND log_b log_a_alt\n                 | empty\n    log_b : '(' logic_exp ')' \n             | bool\n             | comparison\n    bool : TRUE\n            | FALSE\n    comparison : math_exp comparison_op math_exp\n                  | math_exp\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n    call : prop '(' args ')'\n            | stack_call '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : prop stack_method\n    stack_method : POP\n                    | PUSH\n                    | PEEK\n    empty :"
    
_lr_action_items = {'PEEK':([37,51,82,85,147,149,],[86,-46,86,-46,-45,-44,]),'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,62,64,122,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,32,-103,-3,-2,-18,-4,-27,-103,32,32,-22,-33,]),'FLOAT_TYPE':([63,67,],[111,111,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,32,62,64,69,72,73,87,91,97,108,122,163,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,28,-103,-3,28,-2,-18,28,28,28,28,28,28,28,-4,28,-27,-103,28,28,-22,-33,]),'VOID':([63,],[112,]),'STRING_TYPE':([63,67,],[114,114,]),',':([26,29,33,34,35,38,39,41,42,44,49,50,51,53,54,58,61,77,78,79,80,85,92,95,99,100,110,111,113,114,115,116,119,121,130,131,132,133,136,138,140,141,144,145,146,155,158,159,160,164,166,167,169,170,171,175,183,197,],[-55,-73,-85,-103,-103,-58,-83,-103,-74,-59,-103,-88,-72,-84,-86,-56,-60,-81,-79,-76,-78,-72,-71,-68,-64,-67,-57,-9,-11,-10,-12,-8,-13,-5,-103,-103,-75,-82,163,-42,-103,-103,-103,-103,-87,-61,-80,-77,-93,-43,-69,-70,-94,-66,-65,187,163,187,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,62,64,122,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,30,-103,-3,-2,-18,-4,-27,-103,30,30,-22,-33,]),'POP':([37,51,82,85,147,149,],[89,-46,89,-46,-45,-44,]),'INT_TYPE':([63,67,],[116,116,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,62,64,122,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,31,-103,-3,-2,-18,-4,-27,-103,31,31,-22,-33,]),'NEW':([91,],[137,]),'TRUE':([0,3,4,5,7,8,10,11,15,17,18,19,32,36,62,64,69,72,73,76,81,87,91,97,108,122,163,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,33,-103,-3,33,33,-2,-18,33,33,33,33,33,33,33,33,33,-4,33,-27,-103,33,33,-22,-33,]),'#':([0,3,4,5,7,11,18,19,62,64,65,120,122,152,153,176,191,199,204,],[-103,9,-103,-17,9,-16,-103,-3,-2,-18,-103,-103,-4,9,-24,-27,-22,-23,-33,]),'$':([0,3,4,5,7,8,10,11,15,18,64,65,122,176,177,191,204,],[-103,-103,-103,-17,-103,16,-26,-16,-25,16,-18,16,-4,-27,16,-22,-33,]),')':([26,29,33,34,35,38,39,41,42,44,49,50,51,53,54,58,61,77,78,79,80,83,84,85,87,92,95,97,99,100,110,111,113,114,115,116,119,121,124,125,126,127,128,130,131,132,133,134,135,136,138,140,141,143,144,145,146,148,150,155,158,159,160,161,162,164,165,166,167,169,170,171,173,174,175,183,188,189,194,197,203,],[-55,-73,-85,-103,-103,-58,-83,-103,-74,-59,-103,-88,-72,-84,-86,-56,-60,-81,-79,-76,-78,132,133,-72,-103,-71,-68,-103,-64,-67,-57,-9,-11,-10,-12,-8,-13,-5,-63,-62,155,156,157,-103,-103,-75,-82,-96,160,-103,-42,-103,-103,169,-103,-103,-87,172,-103,-61,-80,-77,-93,-95,-98,-43,132,-69,-70,-94,-66,-65,186,-30,-103,-103,-32,-29,-97,-103,-31,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,28,30,31,32,36,37,47,51,52,62,64,69,72,73,76,81,82,85,86,87,88,89,90,91,93,94,97,98,101,102,103,104,105,106,108,111,112,113,114,115,116,117,118,119,122,139,147,149,163,176,177,179,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,36,-103,-3,71,72,73,36,36,87,97,-46,108,-2,-18,36,36,36,36,36,87,-46,-102,36,-99,-100,-101,36,139,139,36,139,139,139,-92,-91,-89,-90,36,-9,-14,-11,-10,-12,-8,150,-15,-13,-4,139,-45,-44,36,-27,-103,150,36,36,-22,-33,]),'+':([26,29,41,42,49,51,58,85,92,95,132,140,141,144,145,160,166,167,169,],[-55,-73,-103,-74,101,-72,-56,-72,-71,-68,-75,-103,-103,101,101,-93,-69,-70,-94,]),'*':([26,29,41,42,51,58,85,132,140,141,160,169,],[-55,-73,93,-74,-72,-56,-72,-75,93,93,-93,-94,]),'-':([26,29,41,42,49,51,58,85,92,95,132,140,141,144,145,160,166,167,169,],[-55,-73,-103,-74,98,-72,-56,-72,-71,-68,-75,-103,-103,98,98,-93,-69,-70,-94,]),'NE':([26,29,41,42,49,50,51,58,83,85,92,95,99,100,132,140,141,144,145,160,166,167,169,170,171,],[-55,-73,-103,-74,-103,103,-72,-56,103,-72,-71,-68,-64,-67,-75,-103,-103,-103,-103,-93,-69,-70,-94,-66,-65,]),'/':([26,29,41,42,51,58,85,132,140,141,160,169,],[-55,-73,94,-74,-72,-56,-72,-75,94,94,-93,-94,]),'.':([51,55,85,],[107,109,107,]),'PUSH':([37,51,82,85,147,149,],[90,-46,90,-46,-45,-44,]),';':([24,26,29,32,33,34,35,38,39,41,42,44,49,50,51,53,54,58,60,61,68,70,75,77,78,79,80,85,92,95,99,100,110,111,113,114,115,116,119,121,123,130,131,132,133,138,140,141,144,145,146,155,157,158,159,160,164,166,167,169,170,171,],[-103,-55,-73,74,-85,-103,-103,-58,-83,-103,-74,-59,-103,-88,-72,-84,-86,-56,110,-60,122,-7,129,-81,-79,-76,-78,-72,-71,-68,-64,-67,-57,-9,-11,-10,-12,-8,-13,-5,-6,-103,-103,-75,-82,-42,-103,-103,-103,-103,-87,-61,182,-80,-77,-93,-43,-69,-70,-94,-66,-65,]),':':([20,23,],[63,67,]),'=':([24,37,51,111,113,114,115,116,119,121,147,149,],[69,91,-46,-9,-11,-10,-12,-8,-13,-5,-45,-44,]),'<':([6,26,29,41,42,49,50,51,58,83,85,92,95,99,100,132,140,141,144,145,160,166,167,169,170,171,],[13,-55,-73,-103,-74,-103,105,-72,-56,105,-72,-71,-68,-64,-67,-75,-103,-103,-103,-103,-93,-69,-70,-94,-66,-65,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,25,27,40,43,45,48,56,57,59,62,64,74,110,122,129,176,181,182,185,191,200,201,202,204,],[-103,0,-103,-103,-17,-103,-103,-26,-16,-25,-103,-103,-3,-38,-1,-34,-35,-41,-39,-40,-36,-37,-2,-18,-53,-57,-4,-52,-27,-49,-51,-47,-22,-54,-50,-48,-33,]),'@':([0,4,64,191,],[2,2,-18,-22,]),'STRING':([71,],[124,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,62,64,122,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,46,-103,-3,-2,-18,-4,-27,-103,46,46,-22,-33,]),'SKIP':([26,58,168,],[-55,-56,184,]),'ELSE':([185,200,],[196,-54,]),'EQ':([26,29,41,42,49,50,51,58,83,85,92,95,99,100,132,140,141,144,145,160,166,167,169,170,171,],[-55,-73,-103,-74,-103,104,-72,-56,104,-72,-71,-68,-64,-67,-75,-103,-103,-103,-103,-93,-69,-70,-94,-66,-65,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,32,36,62,63,64,67,69,71,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,107,108,109,122,137,139,150,154,163,176,177,180,187,190,191,204,],[-103,6,-103,-103,-17,-103,-103,20,-26,-16,22,-25,23,51,-103,-3,51,85,-2,119,-18,119,51,125,51,51,85,85,51,51,85,85,51,85,85,85,-92,-91,-89,-90,147,51,149,-4,164,85,23,179,51,-27,-103,51,23,51,-22,-33,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,62,64,122,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,52,-103,-3,-2,-18,-4,-27,-103,52,52,-22,-33,]),'AND':([26,29,33,34,39,41,42,49,50,51,53,54,58,83,85,92,95,99,100,130,132,133,140,141,144,145,146,160,166,167,169,170,171,],[-55,-73,-85,76,-83,-103,-74,-103,-88,-72,-84,-86,-56,-88,-72,-71,-68,-64,-67,76,-75,-82,-103,-103,-103,-103,-87,-93,-69,-70,-94,-66,-65,]),'FOR_TO':([26,58,96,],[-55,-56,142,]),'FALSE':([0,3,4,5,7,8,10,11,15,17,18,19,32,36,62,64,69,72,73,76,81,87,91,97,108,122,163,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,54,-103,-3,54,54,-2,-18,54,54,54,54,54,54,54,54,54,-4,54,-27,-103,54,54,-22,-33,]),'BOOLEAN_TYPE':([63,67,],[113,113,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,32,36,62,64,69,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,108,122,139,163,176,177,180,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,55,-103,-3,55,55,-2,-18,55,55,55,55,55,55,55,55,55,55,55,55,55,-92,-91,-89,-90,55,-4,55,55,-27,-103,55,55,-22,-33,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,32,36,46,62,64,69,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,108,122,139,142,163,176,177,180,184,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,26,-103,-3,26,26,26,-2,-18,26,26,26,26,26,26,26,26,26,26,26,26,26,-92,-91,-89,-90,26,-4,26,26,26,-27,-103,26,26,26,-22,-33,]),'STACK':([63,67,],[115,115,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,32,36,46,62,64,69,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,108,122,139,142,163,176,177,180,184,190,191,204,],[-103,-103,-103,-17,-103,-103,-26,-16,-25,58,-103,-3,58,58,58,-2,-18,58,58,58,58,58,58,58,58,58,58,58,58,58,-92,-91,-89,-90,58,-4,58,58,58,-27,-103,58,58,58,-22,-33,]),'{':([6,12,14,21,26,58,66,151,156,172,186,192,195,196,],[-103,-19,-21,65,-55,-56,-20,177,180,180,-28,177,180,180,]),'>':([22,26,29,41,42,49,50,51,58,83,85,92,95,99,100,132,140,141,144,145,160,166,167,169,170,171,],[66,-55,-73,-103,-74,-103,106,-72,-56,106,-72,-71,-68,-64,-67,-75,-103,-103,-103,-103,-93,-69,-70,-94,-66,-65,]),'}':([7,10,15,18,19,25,40,43,45,48,56,57,59,62,65,74,110,120,122,129,152,153,176,177,178,180,181,182,185,190,193,198,199,200,201,202,204,],[-103,-26,-25,-103,-3,-38,-34,-35,-41,-39,-40,-36,-37,-2,-103,-53,-57,-103,-4,-52,-103,-24,-27,-103,191,-103,-49,-51,-47,-103,200,204,-23,-54,-50,-48,-33,]),'OR':([26,29,33,34,35,39,41,42,49,50,51,53,54,58,77,78,83,85,92,95,99,100,130,131,132,133,140,141,144,145,146,158,160,166,167,169,170,171,],[-55,-73,-85,-103,81,-83,-103,-74,-103,-88,-72,-84,-86,-56,-81,-79,-88,-72,-71,-68,-64,-67,-103,81,-75,-82,-103,-103,-103,-103,-87,-80,-93,-69,-70,-94,-66,-65,]),'~':([18,19,62,65,120,122,],[-103,-3,-2,-103,154,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'args_aux':([136,183,],[161,194,]),'for_block':([17,180,190,],[25,25,25,]),'statements':([17,180,190,],[27,193,198,]),'attrs_alt':([175,197,],[189,203,]),'vars':([8,18,65,177,],[17,62,120,190,]),'number':([17,32,36,46,69,72,73,76,81,87,91,93,94,97,98,101,102,108,139,142,163,180,184,190,],[29,29,29,96,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,168,29,29,195,29,]),'attrs':([150,],[173,]),'stack_call':([17,32,36,69,72,73,76,81,87,91,93,94,97,98,101,102,108,139,163,180,190,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'log_a_alt':([34,130,],[78,158,]),'string':([71,],[126,]),'log_b':([17,32,36,69,72,73,76,81,87,91,97,108,163,180,190,],[34,34,34,34,34,34,130,34,34,34,34,34,34,34,34,]),'functions':([3,7,152,],[8,15,178,]),'log_a':([17,32,36,69,72,73,81,87,91,97,108,163,180,190,],[35,35,35,35,35,35,131,35,35,35,35,35,35,35,]),'func_block':([151,192,],[176,199,]),'inheritance':([6,],[12,]),'math_exp_alt':([49,144,145,],[99,170,171,]),'prop':([17,32,36,69,72,73,76,81,87,91,93,94,97,98,101,102,108,139,163,180,190,],[37,37,82,37,37,37,82,82,37,37,82,82,37,82,82,82,37,82,37,37,37,]),'read':([17,32,69,72,73,87,91,97,108,163,180,190,],[38,38,38,38,38,38,38,38,38,38,38,38,]),'init':([24,],[68,]),'program':([0,],[1,]),'call':([17,32,36,69,72,73,76,81,87,91,93,94,97,98,101,102,108,139,163,180,190,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'math_exp':([17,32,36,69,72,73,76,81,87,91,97,102,108,139,163,180,190,],[50,50,83,50,50,50,50,50,50,50,50,146,50,165,50,50,50,]),'factor':([17,32,36,69,72,73,76,81,87,91,93,94,97,98,101,102,108,139,163,180,190,],[41,41,41,41,41,41,41,41,41,41,140,141,41,41,41,41,41,41,41,41,41,]),'test':([12,],[21,]),'bool':([17,32,36,69,72,73,76,81,87,91,97,108,163,180,190,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'type':([63,67,],[118,121,]),'empty':([0,3,4,6,7,8,17,18,24,34,35,41,49,65,87,97,120,130,131,136,140,141,144,145,150,152,175,177,180,183,190,197,],[5,10,5,14,10,19,43,19,70,77,80,92,100,19,134,134,153,77,80,162,92,92,100,100,174,10,188,19,43,162,43,188,]),'logic_exp':([17,32,36,69,72,73,87,91,97,108,163,180,190,],[44,44,84,44,44,44,44,44,44,44,44,44,44,]),'function':([3,7,152,],[7,7,7,]),'return':([17,180,190,],[45,45,45,]),'statement':([17,180,190,],[40,40,40,]),'print_stmt':([17,180,190,],[48,48,48,]),'args':([87,97,],[135,143,]),'comparison_op':([50,83,],[102,102,]),'class_block':([21,],[64,]),'var':([8,18,65,177,],[18,18,18,18,]),'return_type':([63,],[117,]),'class':([0,4,],[4,4,]),'comparison':([17,32,36,69,72,73,76,81,87,91,97,108,163,180,190,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'term':([17,32,36,69,72,73,76,81,87,91,97,98,101,102,108,139,163,180,190,],[49,49,49,49,49,49,49,49,49,49,49,144,145,49,49,49,49,49,49,]),'attr':([16,150,187,],[24,175,197,]),'term_alt':([41,140,141,],[95,166,167,]),'expr':([17,91,180,190,],[56,138,56,56,]),'if_block':([17,180,190,],[57,57,57,]),'stack_method':([37,82,],[88,88,]),'constructor':([120,],[152,]),'while_block':([17,180,190,],[59,59,59,]),'classes':([0,4,],[3,11,]),'logic_exp_alt':([35,131,],[79,159,]),'exp':([17,32,69,72,73,87,91,97,108,163,180,190,],[60,75,123,127,128,136,60,136,148,183,60,60,]),'params':([117,179,],[151,192,]),'assign':([17,32,69,72,73,87,91,97,108,163,180,190,],[61,61,61,61,61,61,61,61,61,61,61,61,]),'block':([156,172,195,196,],[181,185,201,202,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',7),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',12),
  ('vars -> empty','vars',1,'p_vars','grammar.py',13),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',17),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',21),
  ('init -> = exp','init',2,'p_init','grammar.py',25),
  ('init -> empty','init',1,'p_init','grammar.py',26),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',30),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',31),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',32),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',33),
  ('type -> STACK','type',1,'p_type','grammar.py',34),
  ('type -> ID','type',1,'p_type','grammar.py',35),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',39),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',40),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',44),
  ('classes -> empty','classes',1,'p_classes','grammar.py',45),
  ('class -> @ ID inheritance test class_block','class',5,'p_class','grammar.py',49),
  ('test -> <empty>','test',0,'p_test','grammar.py',53),
  ('inheritance -> < ID >','inheritance',3,'p_inheritance','grammar.py',58),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',59),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',63),
  ('constructor -> ~ ID params func_block','constructor',4,'p_constructor','grammar.py',68),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',69),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',73),
  ('functions -> empty','functions',1,'p_functions','grammar.py',74),
  ('function -> # ID : return_type params func_block','function',6,'p_function','grammar.py',78),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',82),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',86),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',87),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',91),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',92),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',96),
  ('statements -> statement','statements',1,'p_statements','grammar.py',100),
  ('statements -> empty','statements',1,'p_statements','grammar.py',101),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',105),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',106),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',107),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',108),
  ('statement -> expr','statement',1,'p_statement','grammar.py',109),
  ('statement -> return','statement',1,'p_statement','grammar.py',110),
  ('assign -> prop = expr','assign',3,'p_assign','grammar.py',114),
  ('assign -> prop = NEW ID','assign',4,'p_assign','grammar.py',115),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',119),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',120),
  ('prop -> ID','prop',1,'p_prop','grammar.py',121),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',125),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',126),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',130),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',134),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',138),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',142),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',143),
  ('block -> { statements }','block',3,'p_block','grammar.py',147),
  ('number -> FLOAT','number',1,'p_number','grammar.py',151),
  ('number -> INT','number',1,'p_number','grammar.py',152),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',156),
  ('exp -> read','exp',1,'p_exp','grammar.py',160),
  ('exp -> logic_exp','exp',1,'p_exp','grammar.py',161),
  ('exp -> assign','exp',1,'p_exp','grammar.py',162),
  ('read -> READ ( string )','read',4,'p_read','grammar.py',166),
  ('string -> ID','string',1,'p_string','grammar.py',170),
  ('string -> STRING','string',1,'p_string','grammar.py',171),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',175),
  ('math_exp_alt -> + term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',179),
  ('math_exp_alt -> - term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',180),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',181),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',185),
  ('term_alt -> * factor term_alt','term_alt',3,'p_term_alt','grammar.py',189),
  ('term_alt -> / factor term_alt','term_alt',3,'p_term_alt','grammar.py',190),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',191),
  ('factor -> ID','factor',1,'p_factor','grammar.py',195),
  ('factor -> number','factor',1,'p_factor','grammar.py',196),
  ('factor -> call','factor',1,'p_factor','grammar.py',197),
  ('factor -> ( math_exp )','factor',3,'p_factor','grammar.py',198),
  ('logic_exp -> log_a logic_exp_alt','logic_exp',2,'p_logic_exp','grammar.py',202),
  ('logic_exp_alt -> OR log_a logic_exp_alt','logic_exp_alt',3,'p_logic_exp_alt','grammar.py',206),
  ('logic_exp_alt -> empty','logic_exp_alt',1,'p_logic_exp_alt','grammar.py',207),
  ('log_a -> log_b log_a_alt','log_a',2,'p_log_a','grammar.py',211),
  ('log_a_alt -> AND log_b log_a_alt','log_a_alt',3,'p_log_a_alt','grammar.py',215),
  ('log_a_alt -> empty','log_a_alt',1,'p_log_a_alt','grammar.py',216),
  ('log_b -> ( logic_exp )','log_b',3,'p_log_b','grammar.py',220),
  ('log_b -> bool','log_b',1,'p_log_b','grammar.py',221),
  ('log_b -> comparison','log_b',1,'p_log_b','grammar.py',222),
  ('bool -> TRUE','bool',1,'p_bool','grammar.py',226),
  ('bool -> FALSE','bool',1,'p_bool','grammar.py',227),
  ('comparison -> math_exp comparison_op math_exp','comparison',3,'p_comparison','grammar.py',231),
  ('comparison -> math_exp','comparison',1,'p_comparison','grammar.py',232),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',236),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',237),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',238),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',239),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',243),
  ('call -> stack_call ( args )','call',4,'p_call','grammar.py',244),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',248),
  ('args -> empty','args',1,'p_args','grammar.py',249),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',253),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',254),
  ('stack_call -> prop stack_method','stack_call',2,'p_stack_call','grammar.py',258),
  ('stack_method -> POP','stack_method',1,'p_stack_method','grammar.py',262),
  ('stack_method -> PUSH','stack_method',1,'p_stack_method','grammar.py',263),
  ('stack_method -> PEEK','stack_method',1,'p_stack_method','grammar.py',264),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',269),
]
