
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | '=' NEW constructor_call\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID check_class\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params scope_constructor func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n                 | return\n    assign : prop '=' exp\n    constructor_call : ID '(' args ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read\n           | logic_exp\n           | assign\n           | STRING\n    read : READ '(' string ')'\n    string : ID\n              | STRING\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term math_exp_alt\n                    | '-' term math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor term_alt \n                | '/' factor term_alt\n                | empty\n    factor : ID\n              | number\n              | call\n              | '(' math_exp ')' \n    logic_exp : log_a logic_exp_alt\n    logic_exp_alt : OR log_a logic_exp_alt\n                     | empty\n    log_a : log_b log_a_alt\n    log_a_alt : AND log_b log_a_alt\n                 | empty\n    log_b : '(' logic_exp ')' \n             | bool\n             | comparison\n    bool : TRUE\n            | FALSE\n    comparison : math_exp comparison_op math_exp\n                  | math_exp\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n    call : prop '(' args ')'\n            | stack_call '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : prop stack_method\n    stack_method : POP\n                    | PUSH\n                    | PEEK\n    empty :scope_class : empty\n    scope_function : empty\n    scope_constructor : empty\n    check_variable : empty\n    check_class : empty\n    neg_lookup : empty\n    "
    
_lr_action_items = {'PEEK':([39,53,87,90,150,152,],[91,-46,91,-46,-45,-44,]),'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,125,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,34,-104,-3,-2,-19,-4,34,-22,-27,-104,34,-33,]),'FLOAT_TYPE':([71,115,],[118,118,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,34,64,67,73,76,77,78,92,96,112,125,167,183,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,29,-104,-3,29,-2,-19,29,29,29,29,29,29,29,-4,29,29,29,-22,-27,-104,29,-33,]),'VOID':([115,],[153,]),'STRING_TYPE':([71,115,],[120,120,]),',':([27,30,35,36,37,40,41,43,44,46,48,51,52,53,55,56,60,63,69,82,83,84,85,90,97,100,103,104,118,119,120,121,122,123,124,134,137,138,139,140,142,144,145,147,148,149,159,162,164,169,170,171,173,174,176,177,186,194,215,],[-55,-74,-86,-104,-104,-58,-84,-104,-75,-59,-61,-104,-89,-73,-85,-87,-56,-60,-109,-82,-80,-77,-79,-73,-72,-69,-65,-68,-10,-12,-11,-13,-9,-5,-104,167,-104,-104,-76,-83,-42,-104,-104,-104,-104,-88,-14,-62,-95,-81,-78,-94,-70,-71,-67,-66,167,205,205,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,125,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,31,-104,-3,-2,-19,-4,31,-22,-27,-104,31,-33,]),'POP':([39,53,87,90,150,152,],[94,-46,94,-46,-45,-44,]),'INT_TYPE':([71,115,],[122,122,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,125,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,33,-104,-3,-2,-19,-4,33,-22,-27,-104,33,-33,]),'NEW':([73,],[126,]),'TRUE':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,64,67,73,76,77,78,81,86,92,96,112,125,167,183,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,35,-104,-3,35,35,-2,-19,35,35,35,35,35,35,35,35,35,-4,35,35,35,-22,-27,-104,35,-33,]),'#':([0,3,4,5,7,11,18,19,64,67,68,116,125,156,157,195,202,216,219,],[-104,9,-104,-18,9,-17,-104,-3,-2,-19,-104,-104,-4,9,-24,-22,-27,-23,-33,]),'$':([0,3,4,5,7,8,10,11,15,18,67,68,125,195,202,203,219,],[-104,-104,-104,-18,-104,16,-26,-17,-25,16,-19,16,-4,-22,-27,16,-33,]),')':([27,30,35,36,37,40,41,43,44,46,48,51,52,53,55,56,60,63,69,77,82,83,84,85,88,89,90,92,97,100,103,104,118,119,120,121,122,123,124,128,129,130,131,132,133,134,135,137,138,139,140,141,142,144,145,147,148,149,151,159,162,164,165,166,169,170,171,172,173,174,176,177,180,183,186,192,193,194,197,199,206,207,215,218,],[-55,-74,-86,-104,-104,-58,-84,-104,-75,-59,-61,-104,-89,-73,-85,-87,-56,-60,-109,-104,-82,-80,-77,-79,139,140,-73,-104,-72,-69,-65,-68,-10,-12,-11,-13,-9,-5,-104,-64,-63,162,163,-97,164,-104,168,-104,-104,-76,-83,171,-42,-104,-104,-104,-104,-88,178,-14,-62,-95,-96,-99,-81,-78,-94,139,-70,-71,-67,-66,-104,-104,-104,204,-30,-104,210,-98,-32,-29,-104,-31,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,29,31,32,33,34,38,39,53,54,64,67,69,73,76,77,78,81,86,87,90,91,92,93,94,95,96,98,99,102,105,106,107,108,109,110,112,118,119,120,121,122,124,125,143,150,152,153,154,155,159,161,167,182,183,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,38,-104,-3,75,76,77,78,38,38,92,-46,112,-2,-19,-109,38,38,38,38,38,38,92,-46,-103,38,-100,-101,-102,38,143,143,143,143,143,-93,-92,-90,-91,38,-10,-12,-11,-13,-9,-104,-4,143,-45,-44,-15,180,-16,-14,183,38,180,38,38,-22,-27,-104,38,-33,]),'+':([27,30,43,44,51,53,60,90,97,100,139,144,145,147,148,164,171,173,174,],[-55,-74,-104,-75,105,-73,-56,-73,-72,-69,-76,-104,-104,105,105,-95,-94,-70,-71,]),'*':([27,30,43,44,53,60,90,139,144,145,164,171,],[-55,-74,98,-75,-73,-56,-73,-76,98,98,-95,-94,]),'-':([27,30,43,44,51,53,60,90,97,100,139,144,145,147,148,164,171,173,174,],[-55,-74,-104,-75,102,-73,-56,-73,-72,-69,-76,-104,-104,102,102,-95,-94,-70,-71,]),'NE':([27,30,43,44,51,52,53,60,88,90,97,100,103,104,139,144,145,147,148,164,171,173,174,176,177,],[-55,-74,-104,-75,-104,107,-73,-56,107,-73,-72,-69,-65,-68,-76,-104,-104,-104,-104,-95,-94,-70,-71,-67,-66,]),'/':([27,30,43,44,53,60,90,139,144,145,164,171,],[-55,-74,99,-75,-73,-56,-73,-76,99,99,-95,-94,]),'.':([53,57,90,],[111,113,111,]),'PUSH':([39,53,87,90,150,152,],[95,-46,95,-46,-45,-44,]),';':([25,27,30,34,35,36,37,40,41,43,44,46,48,51,52,53,55,56,60,62,63,69,72,74,80,82,83,84,85,90,97,100,103,104,118,119,120,121,122,123,124,127,137,138,139,140,142,144,145,147,148,149,159,160,162,164,168,169,170,171,173,174,176,177,210,],[-104,-55,-74,79,-86,-104,-104,-58,-84,-104,-75,-59,-61,-104,-89,-73,-85,-87,-56,114,-60,-109,125,-8,136,-82,-80,-77,-79,-73,-72,-69,-65,-68,-10,-12,-11,-13,-9,-5,-104,-6,-104,-104,-76,-83,-42,-104,-104,-104,-104,-88,-14,-7,-62,-95,187,-81,-78,-94,-70,-71,-67,-66,-43,]),':':([20,24,65,66,],[-104,71,115,-110,]),'=':([25,39,53,69,118,119,120,121,122,123,124,150,152,159,],[73,96,-46,-109,-10,-12,-11,-13,-9,-5,-104,-45,-44,-14,]),'<':([6,27,30,43,44,51,52,53,60,88,90,97,100,103,104,139,144,145,147,148,164,171,173,174,176,177,],[13,-55,-74,-104,-75,-104,109,-73,-56,109,-73,-72,-69,-65,-68,-76,-104,-104,-104,-104,-95,-94,-70,-71,-67,-66,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,26,28,42,45,47,50,58,59,61,64,67,79,114,125,136,185,187,189,195,202,211,212,213,219,],[-104,0,-104,-104,-18,-104,-104,-26,-17,-25,-104,-104,-3,-38,-1,-34,-35,-41,-39,-40,-36,-37,-2,-19,-53,-57,-4,-52,-49,-51,-47,-22,-27,-54,-50,-48,-33,]),'@':([0,4,67,195,],[2,2,-19,-22,]),'STRING':([0,3,4,5,7,8,10,11,15,17,18,19,34,64,67,73,75,76,77,78,92,96,112,125,167,183,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,48,-104,-3,48,-2,-19,48,128,48,48,48,48,48,48,-4,48,48,48,-22,-27,-104,48,-33,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,125,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,49,-104,-3,-2,-19,-4,49,-22,-27,-104,49,-33,]),'SKIP':([27,60,175,],[-55,-56,188,]),'ELSE':([189,211,],[201,-54,]),'EQ':([27,30,43,44,51,52,53,60,88,90,97,100,103,104,139,144,145,147,148,164,171,173,174,176,177,],[-55,-74,-104,-75,-104,108,-73,-56,108,-73,-72,-69,-65,-68,-76,-104,-104,-104,-104,-95,-94,-70,-71,-67,-66,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,34,38,64,67,71,73,75,76,77,78,81,86,92,96,98,99,102,105,106,107,108,109,110,111,112,113,115,125,126,143,158,167,180,183,184,195,202,203,205,214,219,],[-104,6,-104,-104,-18,-104,-104,20,-26,-17,23,-25,24,53,-104,-3,53,90,-2,-19,124,53,129,53,53,53,90,90,53,53,90,90,90,90,90,-93,-92,-90,-91,150,53,152,124,-4,161,90,182,53,24,53,53,-22,-27,-104,24,53,-33,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,64,67,125,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,54,-104,-3,-2,-19,-4,54,-22,-27,-104,54,-33,]),'AND':([27,30,35,36,41,43,44,51,52,53,55,56,60,88,90,97,100,103,104,137,139,140,144,145,147,148,149,164,171,173,174,176,177,],[-55,-74,-86,81,-84,-104,-75,-104,-89,-73,-85,-87,-56,-89,-73,-72,-69,-65,-68,81,-76,-83,-104,-104,-104,-104,-88,-95,-94,-70,-71,-67,-66,]),'FOR_TO':([27,60,101,],[-55,-56,146,]),'FALSE':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,64,67,73,76,77,78,81,86,92,96,112,125,167,183,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,56,-104,-3,56,56,-2,-19,56,56,56,56,56,56,56,56,56,-4,56,56,56,-22,-27,-104,56,-33,]),'BOOLEAN_TYPE':([71,115,],[119,119,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,64,67,73,76,77,78,81,86,92,96,98,99,102,105,106,107,108,109,110,112,125,143,167,183,184,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,57,-104,-3,57,57,-2,-19,57,57,57,57,57,57,57,57,57,57,57,57,57,-93,-92,-90,-91,57,-4,57,57,57,57,-22,-27,-104,57,-33,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,49,64,67,73,76,77,78,81,86,92,96,98,99,102,105,106,107,108,109,110,112,125,143,146,167,183,184,188,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,27,-104,-3,27,27,27,-2,-19,27,27,27,27,27,27,27,27,27,27,27,27,27,-93,-92,-90,-91,27,-4,27,27,27,27,27,27,-22,-27,-104,27,-33,]),'STACK':([71,115,],[121,121,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,34,38,49,64,67,73,76,77,78,81,86,92,96,98,99,102,105,106,107,108,109,110,112,125,143,146,167,183,184,188,195,202,203,214,219,],[-104,-104,-104,-18,-104,-104,-26,-17,-25,60,-104,-3,60,60,60,-2,-19,60,60,60,60,60,60,60,60,60,60,60,60,60,-93,-92,-90,-91,60,-4,60,60,60,60,60,60,-22,-27,-104,60,-33,]),'{':([6,12,14,21,22,27,60,117,163,178,179,190,191,196,200,201,204,208,209,],[-104,-104,-21,68,-105,-55,-56,-20,184,184,-104,203,-106,-104,184,184,-28,203,-107,]),'>':([23,27,30,43,44,51,52,53,60,69,70,88,90,97,100,103,104,139,144,145,147,148,164,171,173,174,176,177,],[-104,-55,-74,-104,-75,-104,110,-73,-56,-109,117,110,-73,-72,-69,-65,-68,-76,-104,-104,-104,-104,-95,-94,-70,-71,-67,-66,]),'}':([7,10,15,18,19,26,42,45,47,50,58,59,61,64,68,79,114,116,125,136,156,157,181,184,185,187,189,198,202,203,211,212,213,214,216,217,219,],[-104,-26,-25,-104,-3,-38,-34,-35,-41,-39,-40,-36,-37,-2,-104,-53,-57,-104,-4,-52,-104,-24,195,-104,-49,-51,-47,211,-27,-104,-54,-50,-48,-104,-23,219,-33,]),'OR':([27,30,35,36,37,41,43,44,51,52,53,55,56,60,82,83,88,90,97,100,103,104,137,138,139,140,144,145,147,148,149,164,169,171,173,174,176,177,],[-55,-74,-86,-104,86,-84,-104,-75,-104,-89,-73,-85,-87,-56,-82,-80,-89,-73,-72,-69,-65,-68,-104,86,-76,-83,-104,-104,-104,-104,-88,-95,-81,-94,-70,-71,-67,-66,]),'~':([18,19,64,68,116,125,],[-104,-3,-2,-104,158,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'args_aux':([134,186,],[165,199,]),'for_block':([17,184,214,],[26,26,26,]),'statements':([17,184,214,],[28,198,217,]),'attrs_alt':([194,215,],[207,218,]),'vars':([8,18,68,203,],[17,64,116,214,]),'number':([17,34,38,49,73,76,77,78,81,86,92,96,98,99,102,105,106,112,143,146,167,183,184,188,214,],[30,30,30,101,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,175,30,30,30,200,30,]),'attrs':([180,],[192,]),'params':([154,182,],[179,196,]),'constructor_call':([126,],[160,]),'stack_call':([17,34,38,73,76,77,78,81,86,92,96,98,99,102,105,106,112,143,167,183,184,214,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'string':([75,],[130,]),'log_b':([17,34,38,73,76,77,78,81,86,92,96,112,167,183,184,214,],[36,36,36,36,36,36,36,137,36,36,36,36,36,36,36,36,]),'functions':([3,7,156,],[8,15,181,]),'log_a':([17,34,38,73,76,77,78,86,92,96,112,167,183,184,214,],[37,37,37,37,37,37,37,138,37,37,37,37,37,37,37,]),'func_block':([190,208,],[202,216,]),'inheritance':([6,],[12,]),'math_exp_alt':([51,147,148,],[103,176,177,]),'prop':([17,34,38,73,76,77,78,81,86,92,96,98,99,102,105,106,112,143,167,183,184,214,],[39,39,87,39,39,39,39,87,87,39,39,87,87,87,87,87,39,87,39,39,39,39,]),'read':([17,34,73,76,77,78,92,96,112,167,183,184,214,],[40,40,40,40,40,40,40,40,40,40,40,40,40,]),'init':([25,],[72,]),'program':([0,],[1,]),'call':([17,34,38,73,76,77,78,81,86,92,96,98,99,102,105,106,112,143,167,183,184,214,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'neg_lookup':([20,],[65,]),'math_exp':([17,34,38,73,76,77,78,81,86,92,96,106,112,143,167,183,184,214,],[52,52,88,52,52,52,52,52,52,52,52,149,52,172,52,52,52,52,]),'factor':([17,34,38,73,76,77,78,81,86,92,96,98,99,102,105,106,112,143,167,183,184,214,],[43,43,43,43,43,43,43,43,43,43,43,144,145,43,43,43,43,43,43,43,43,43,]),'var':([8,18,68,203,],[18,18,18,18,]),'bool':([17,34,38,73,76,77,78,81,86,92,96,112,167,183,184,214,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'type':([71,115,],[123,155,]),'empty':([0,3,4,6,7,8,12,17,18,20,23,25,36,37,43,51,68,77,92,116,124,134,137,138,144,145,147,148,156,179,180,183,184,186,194,196,203,214,215,],[5,10,5,14,10,19,22,45,19,66,69,74,82,85,97,104,19,132,132,157,69,166,82,85,97,97,104,104,10,191,193,132,45,166,206,209,19,45,206,]),'logic_exp':([17,34,38,73,76,77,78,92,96,112,167,183,184,214,],[46,46,89,46,46,46,46,46,46,46,46,46,46,46,]),'function':([3,7,156,],[7,7,7,]),'scope_constructor':([196,],[208,]),'return':([17,184,214,],[47,47,47,]),'statement':([17,184,214,],[42,42,42,]),'print_stmt':([17,184,214,],[50,50,50,]),'scope_function':([179,],[190,]),'args':([77,92,183,],[133,141,197,]),'comparison_op':([52,88,],[106,106,]),'class_block':([21,],[67,]),'log_a_alt':([36,137,],[83,169,]),'scope_class':([12,],[21,]),'logic_exp_alt':([37,138,],[84,170,]),'return_type':([115,],[154,]),'class':([0,4,],[4,4,]),'comparison':([17,34,38,73,76,77,78,81,86,92,96,112,167,183,184,214,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'term':([17,34,38,73,76,77,78,81,86,92,96,102,105,106,112,143,167,183,184,214,],[51,51,51,51,51,51,51,51,51,51,51,147,148,51,51,51,51,51,51,51,]),'attr':([16,180,205,],[25,194,215,]),'term_alt':([43,144,145,],[100,173,174,]),'expr':([17,184,214,],[58,58,58,]),'if_block':([17,184,214,],[59,59,59,]),'stack_method':([39,87,],[93,93,]),'while_block':([17,184,214,],[61,61,61,]),'classes':([0,4,],[3,11,]),'check_class':([23,124,],[70,159,]),'exp':([17,34,73,76,77,78,92,96,112,167,183,184,214,],[62,80,127,131,134,135,134,142,151,186,134,62,62,]),'constructor':([116,],[156,]),'assign':([17,34,73,76,77,78,92,96,112,167,183,184,214,],[63,63,63,63,63,63,63,63,63,63,63,63,63,]),'block':([163,178,200,201,],[185,189,212,213,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',12),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',16),
  ('vars -> empty','vars',1,'p_vars','grammar.py',17),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',21),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',27),
  ('init -> = exp','init',2,'p_init','grammar.py',33),
  ('init -> = NEW constructor_call','init',3,'p_init','grammar.py',34),
  ('init -> empty','init',1,'p_init','grammar.py',35),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',39),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',40),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',41),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',42),
  ('type -> STACK','type',1,'p_type','grammar.py',43),
  ('type -> ID check_class','type',2,'p_type','grammar.py',44),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',49),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',50),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',54),
  ('classes -> empty','classes',1,'p_classes','grammar.py',55),
  ('class -> @ ID inheritance scope_class class_block','class',5,'p_class','grammar.py',59),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',64),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',65),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',73),
  ('constructor -> ~ ID params scope_constructor func_block','constructor',5,'p_constructor','grammar.py',77),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',78),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',84),
  ('functions -> empty','functions',1,'p_functions','grammar.py',85),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',89),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',94),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',99),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',100),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',108),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',109),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',117),
  ('statements -> statement','statements',1,'p_statements','grammar.py',121),
  ('statements -> empty','statements',1,'p_statements','grammar.py',122),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',126),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',127),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',128),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',129),
  ('statement -> expr','statement',1,'p_statement','grammar.py',130),
  ('statement -> return','statement',1,'p_statement','grammar.py',131),
  ('assign -> prop = exp','assign',3,'p_assign','grammar.py',135),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',139),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',146),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',147),
  ('prop -> ID','prop',1,'p_prop','grammar.py',148),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',152),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',153),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',157),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',161),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',165),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',169),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',170),
  ('block -> { statements }','block',3,'p_block','grammar.py',174),
  ('number -> FLOAT','number',1,'p_number','grammar.py',178),
  ('number -> INT','number',1,'p_number','grammar.py',179),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',183),
  ('exp -> read','exp',1,'p_exp','grammar.py',187),
  ('exp -> logic_exp','exp',1,'p_exp','grammar.py',188),
  ('exp -> assign','exp',1,'p_exp','grammar.py',189),
  ('exp -> STRING','exp',1,'p_exp','grammar.py',190),
  ('read -> READ ( string )','read',4,'p_read','grammar.py',194),
  ('string -> ID','string',1,'p_string','grammar.py',198),
  ('string -> STRING','string',1,'p_string','grammar.py',199),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',203),
  ('math_exp_alt -> + term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',207),
  ('math_exp_alt -> - term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',208),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',209),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',213),
  ('term_alt -> * factor term_alt','term_alt',3,'p_term_alt','grammar.py',217),
  ('term_alt -> / factor term_alt','term_alt',3,'p_term_alt','grammar.py',218),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',219),
  ('factor -> ID','factor',1,'p_factor','grammar.py',223),
  ('factor -> number','factor',1,'p_factor','grammar.py',224),
  ('factor -> call','factor',1,'p_factor','grammar.py',225),
  ('factor -> ( math_exp )','factor',3,'p_factor','grammar.py',226),
  ('logic_exp -> log_a logic_exp_alt','logic_exp',2,'p_logic_exp','grammar.py',230),
  ('logic_exp_alt -> OR log_a logic_exp_alt','logic_exp_alt',3,'p_logic_exp_alt','grammar.py',234),
  ('logic_exp_alt -> empty','logic_exp_alt',1,'p_logic_exp_alt','grammar.py',235),
  ('log_a -> log_b log_a_alt','log_a',2,'p_log_a','grammar.py',239),
  ('log_a_alt -> AND log_b log_a_alt','log_a_alt',3,'p_log_a_alt','grammar.py',243),
  ('log_a_alt -> empty','log_a_alt',1,'p_log_a_alt','grammar.py',244),
  ('log_b -> ( logic_exp )','log_b',3,'p_log_b','grammar.py',248),
  ('log_b -> bool','log_b',1,'p_log_b','grammar.py',249),
  ('log_b -> comparison','log_b',1,'p_log_b','grammar.py',250),
  ('bool -> TRUE','bool',1,'p_bool','grammar.py',254),
  ('bool -> FALSE','bool',1,'p_bool','grammar.py',255),
  ('comparison -> math_exp comparison_op math_exp','comparison',3,'p_comparison','grammar.py',259),
  ('comparison -> math_exp','comparison',1,'p_comparison','grammar.py',260),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',264),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',265),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',266),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',267),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',271),
  ('call -> stack_call ( args )','call',4,'p_call','grammar.py',272),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',276),
  ('args -> empty','args',1,'p_args','grammar.py',277),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',281),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',282),
  ('stack_call -> prop stack_method','stack_call',2,'p_stack_call','grammar.py',286),
  ('stack_method -> POP','stack_method',1,'p_stack_method','grammar.py',290),
  ('stack_method -> PUSH','stack_method',1,'p_stack_method','grammar.py',291),
  ('stack_method -> PEEK','stack_method',1,'p_stack_method','grammar.py',292),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',296),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',306),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',314),
  ('scope_constructor -> empty','scope_constructor',1,'p_scope_constructor','grammar.py',322),
  ('check_variable -> empty','check_variable',1,'p_check_variables','grammar.py',328),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',333),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',338),
]
