
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance class_block\n    inheritance : '<' ID '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID ':' return_type params func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n                 | return\n    assign : prop '=' expr\n              | prop '=' NEW ID\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read\n           | math_exp\n           | logic_exp\n           | assign\n    read : READ '(' string ')'\n    string : ID\n              | STRING\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term math_exp_alt\n                    | '-' term math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor term_alt \n                | '/' factor term_alt\n                | empty\n    factor : ID\n              | number\n              | '(' math_exp ')' \n    logic_exp : log_a logic_exp_alt\n    logic_exp_alt : OR log_a logic_exp_alt\n                     | empty\n    log_a : log_b log_a_alt\n    log_a_alt : AND log_b log_a_alt\n                 | empty\n    log_b : '(' logic_exp ')' \n             | call\n             | bool\n             | comparison\n    bool : TRUE\n            | FALSE\n    comparison : math_exp comparison_op math_exp\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n    call : prop '(' args ')'\n            | stack_call '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : prop stack_method\n    stack_method : POP\n                    | PUSH\n                    | PEEK\n    empty :"
    
_lr_action_items = {'PEEK':([38,51,82,85,149,153,],[86,-44,86,-44,-43,-42,]),'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,33,-101,-3,-17,-2,-4,-25,-101,-20,33,33,-31,]),'FLOAT_TYPE':([64,67,],[111,111,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,63,69,72,73,87,91,102,104,123,166,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,29,-101,-3,-17,29,-2,29,29,29,29,29,29,29,-4,29,-25,-101,-20,29,29,-31,]),'VOID':([64,],[112,]),'STRING_TYPE':([64,67,],[114,114,]),',':([27,30,34,35,36,39,40,42,43,45,47,51,53,54,55,59,62,77,78,79,80,92,95,106,107,110,111,113,114,115,116,122,131,134,135,136,139,141,143,144,145,146,151,152,158,161,162,163,167,169,170,172,174,175,178,186,199,],[-53,-72,-84,-101,-101,-56,-81,-101,-82,-58,-57,-71,-83,-101,-85,-54,-59,-79,-77,-74,-76,-70,-67,-63,-66,-55,-9,-11,-10,-12,-8,-5,-101,-101,-73,-80,166,-40,-101,-71,-101,-86,-101,-101,-60,-78,-75,-91,-41,-68,-69,-92,-65,-64,190,166,190,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,31,-101,-3,-17,-2,-4,-25,-101,-20,31,31,-31,]),'POP':([38,51,82,85,149,153,],[89,-44,89,-44,-43,-42,]),'INT_TYPE':([64,67,],[116,116,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,32,-101,-3,-17,-2,-4,-25,-101,-20,32,32,-31,]),'NEW':([91,],[140,]),'TRUE':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,63,69,72,73,76,81,87,91,102,104,123,132,166,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,34,-101,-3,-17,34,34,-2,34,34,34,34,34,34,34,34,34,-4,34,34,-25,-101,-20,34,34,-31,]),'#':([0,3,4,5,7,11,18,19,21,22,63,65,119,120,123,179,181,194,205,],[-101,9,-101,-16,9,-15,-101,-3,-17,-101,-2,-101,9,-22,-4,-25,-20,-21,-31,]),'$':([0,3,4,5,7,8,10,11,15,18,21,22,123,179,180,181,205,],[-101,-101,-101,-16,-101,16,-24,-15,-23,16,-17,16,-4,-25,16,-20,-31,]),')':([27,30,34,35,36,39,40,42,43,45,47,51,53,54,55,59,62,77,78,79,80,83,84,85,87,92,95,102,106,107,110,111,113,114,115,116,122,125,126,127,128,129,131,134,135,136,137,138,139,141,143,144,145,146,148,150,151,152,154,158,161,162,163,164,165,167,168,169,170,172,174,175,176,177,178,186,191,192,196,199,204,],[-53,-72,-84,-101,-101,-56,-81,-101,-82,-58,-57,-71,-83,-101,-85,-54,-59,-79,-77,-74,-76,135,136,-71,-101,-70,-67,-101,-63,-66,-55,-9,-11,-10,-12,-8,-5,-62,-61,158,159,160,-101,-101,-73,-80,-94,163,-101,-40,-101,-71,-101,-86,172,173,-101,-101,-101,-60,-78,-75,-91,-93,-96,-41,135,-68,-69,-92,-65,-64,189,-28,-101,-101,-30,-27,-95,-101,-29,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,21,29,31,32,33,37,38,49,51,52,63,69,72,73,76,81,82,85,86,87,88,89,90,91,93,94,96,97,98,99,100,102,104,105,108,111,112,113,114,115,116,117,118,123,132,142,149,153,157,166,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,37,-101,-3,-17,71,72,73,37,37,87,102,-44,104,-2,37,37,37,132,132,87,-44,-100,37,-97,-98,-99,37,142,142,142,-90,-89,-87,-88,37,37,142,142,-9,-13,-11,-10,-12,-8,154,-14,-4,132,142,-43,-42,154,37,-25,-101,-20,37,37,-31,]),'+':([27,30,42,51,54,59,85,92,95,135,143,144,145,151,152,169,170,],[-53,-72,-101,-71,108,-54,-71,-70,-67,-73,-101,-71,-101,108,108,-68,-69,]),'*':([27,30,42,51,59,85,135,143,144,145,],[-53,-72,93,-71,-54,-71,-73,93,-71,93,]),'-':([27,30,42,51,54,59,85,92,95,135,143,144,145,151,152,169,170,],[-53,-72,-101,-71,105,-54,-71,-70,-67,-73,-101,-71,-101,105,105,-68,-69,]),'NE':([27,30,42,47,51,54,59,83,85,92,95,106,107,133,135,143,144,145,151,152,169,170,174,175,],[-53,-72,-101,97,-71,-101,-54,97,-71,-70,-67,-63,-66,97,-73,-101,-71,-101,-101,-101,-68,-69,-65,-64,]),'/':([27,30,42,51,59,85,135,143,144,145,],[-53,-72,94,-71,-54,-71,-73,94,-71,94,]),'.':([51,56,85,],[103,109,103,]),'PUSH':([38,51,82,85,149,153,],[90,-44,90,-44,-43,-42,]),';':([25,27,30,33,34,35,36,39,40,42,43,45,47,51,53,54,55,59,61,62,68,70,75,77,78,79,80,92,95,106,107,110,111,113,114,115,116,122,124,131,134,135,136,141,143,144,145,146,151,152,158,160,161,162,163,167,169,170,172,174,175,],[-101,-53,-72,74,-84,-101,-101,-56,-81,-101,-82,-58,-57,-71,-83,-101,-85,-54,110,-59,123,-7,130,-79,-77,-74,-76,-70,-67,-63,-66,-55,-9,-11,-10,-12,-8,-5,-6,-101,-101,-73,-80,-40,-101,-71,-101,-86,-101,-101,-60,185,-78,-75,-91,-41,-68,-69,-92,-65,-64,]),':':([20,24,],[64,67,]),'=':([25,38,51,111,113,114,115,116,122,149,153,],[69,91,-44,-9,-11,-10,-12,-8,-5,-43,-42,]),'<':([6,27,30,42,47,51,54,59,83,85,92,95,106,107,133,135,143,144,145,151,152,169,170,174,175,],[13,-53,-72,-101,99,-71,-101,-54,99,-71,-70,-67,-63,-66,99,-73,-101,-71,-101,-101,-101,-68,-69,-65,-64,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,21,26,28,41,44,46,50,57,58,60,63,74,110,123,130,179,181,184,185,188,201,202,203,205,],[-101,0,-101,-101,-16,-101,-101,-24,-15,-23,-101,-101,-3,-17,-36,-1,-32,-33,-39,-37,-38,-34,-35,-2,-51,-55,-4,-50,-25,-20,-47,-49,-45,-52,-48,-46,-31,]),'@':([0,4,21,181,],[2,2,-17,-20,]),'STRING':([71,],[125,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,48,-101,-3,-17,-2,-4,-25,-101,-20,48,48,-31,]),'SKIP':([27,59,171,],[-53,-54,187,]),'ELSE':([188,201,],[198,-52,]),'EQ':([27,30,42,47,51,54,59,83,85,92,95,106,107,133,135,143,144,145,151,152,169,170,174,175,],[-53,-72,-101,98,-71,-101,-54,98,-71,-70,-67,-63,-66,98,-73,-101,-71,-101,-101,-101,-68,-69,-65,-64,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,21,33,37,63,69,71,72,73,76,81,87,91,93,94,96,97,98,99,100,102,103,104,105,108,109,121,123,132,140,142,154,166,179,180,181,183,190,193,205,],[-101,6,-101,-101,-16,-101,-101,20,-24,-15,23,-23,24,51,-101,-3,-17,51,85,-2,51,126,51,51,51,51,51,51,144,144,144,-90,-89,-87,-88,51,149,51,144,144,153,157,-4,85,167,144,24,51,-25,-101,-20,51,24,51,-31,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,52,-101,-3,-17,-2,-4,-25,-101,-20,52,52,-31,]),'AND':([27,30,34,35,40,42,43,53,54,55,59,92,95,106,107,131,135,136,143,144,145,146,151,152,163,169,170,172,174,175,],[-53,-72,-84,76,-81,-101,-82,-83,-101,-85,-54,-70,-67,-63,-66,76,-73,-80,-101,-71,-101,-86,-101,-101,-91,-68,-69,-92,-65,-64,]),'FOR_TO':([27,59,101,],[-53,-54,147,]),'FALSE':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,63,69,72,73,76,81,87,91,102,104,123,132,166,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,55,-101,-3,-17,55,55,-2,55,55,55,55,55,55,55,55,55,-4,55,55,-25,-101,-20,55,55,-31,]),'BOOLEAN_TYPE':([64,67,],[113,113,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,63,69,72,73,76,81,87,91,102,104,123,132,166,179,180,181,183,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,56,-101,-3,-17,56,56,-2,56,56,56,56,56,56,56,56,56,-4,56,56,-25,-101,-20,56,56,-31,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,48,63,69,72,73,76,81,87,91,93,94,96,97,98,99,100,102,104,105,108,123,132,142,147,166,179,180,181,183,187,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,27,-101,-3,-17,27,27,27,-2,27,27,27,27,27,27,27,27,27,27,-90,-89,-87,-88,27,27,27,27,-4,27,27,27,27,-25,-101,-20,27,27,27,-31,]),'STACK':([64,67,],[115,115,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,48,63,69,72,73,76,81,87,91,93,94,96,97,98,99,100,102,104,105,108,123,132,142,147,166,179,180,181,183,187,193,205,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,59,-101,-3,-17,59,59,59,-2,59,59,59,59,59,59,59,59,59,59,-90,-89,-87,-88,59,59,59,59,-4,59,59,59,59,-25,-101,-20,59,59,59,-31,]),'{':([6,12,14,27,59,66,155,159,173,182,189,197,198,],[-101,22,-19,-53,-54,-18,180,183,183,180,-26,183,183,]),'>':([23,27,30,42,47,51,54,59,83,85,92,95,106,107,133,135,143,144,145,151,152,169,170,174,175,],[66,-53,-72,-101,100,-71,-101,-54,100,-71,-70,-67,-63,-66,100,-73,-101,-71,-101,-101,-101,-68,-69,-65,-64,]),'}':([7,10,15,18,19,22,26,41,44,46,50,57,58,60,63,65,74,110,119,120,123,130,156,179,180,183,184,185,188,193,194,195,200,201,202,203,205,],[-101,-24,-23,-101,-3,-101,-36,-32,-33,-39,-37,-38,-34,-35,-2,-101,-51,-55,-101,-22,-4,-50,181,-25,-101,-101,-47,-49,-45,-101,-21,201,205,-52,-48,-46,-31,]),'OR':([27,30,34,35,36,40,42,43,53,54,55,59,77,78,92,95,106,107,131,134,135,136,143,144,145,146,151,152,161,163,169,170,172,174,175,],[-53,-72,-84,-101,81,-81,-101,-82,-83,-101,-85,-54,-79,-77,-70,-67,-63,-66,-101,81,-73,-80,-101,-71,-101,-86,-101,-101,-78,-91,-68,-69,-92,-65,-64,]),'~':([18,19,22,63,65,123,],[-101,-3,-101,-2,121,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'args_aux':([139,186,],[164,196,]),'for_block':([17,183,193,],[26,26,26,]),'statements':([17,183,193,],[28,195,200,]),'attrs_alt':([178,199,],[192,204,]),'vars':([8,18,22,180,],[17,63,65,193,]),'class_block':([12,],[21,]),'attrs':([154,],[176,]),'params':([117,157,],[155,182,]),'stack_call':([17,33,37,69,72,73,76,81,87,91,102,104,132,166,183,193,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'string':([71,],[127,]),'log_b':([17,33,37,69,72,73,76,81,87,91,102,104,132,166,183,193,],[35,35,35,35,35,35,131,35,35,35,35,35,35,35,35,35,]),'functions':([3,7,119,],[8,15,156,]),'log_a':([17,33,37,69,72,73,81,87,91,102,104,132,166,183,193,],[36,36,36,36,36,36,134,36,36,36,36,36,36,36,36,]),'func_block':([155,182,],[179,194,]),'inheritance':([6,],[12,]),'math_exp_alt':([54,151,152,],[106,174,175,]),'prop':([17,33,37,69,72,73,76,81,87,91,102,104,132,166,183,193,],[38,38,82,38,38,38,82,82,38,38,38,38,82,38,38,38,]),'read':([17,33,69,72,73,87,91,102,104,166,183,193,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'init':([25,],[68,]),'program':([0,],[1,]),'call':([17,33,37,69,72,73,76,81,87,91,102,104,132,166,183,193,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'math_exp':([17,33,37,69,72,73,76,81,87,91,96,102,104,132,142,166,183,193,],[47,47,83,47,47,47,133,133,47,47,146,47,47,83,168,47,47,47,]),'factor':([17,33,37,69,72,73,76,81,87,91,93,94,96,102,104,105,108,132,142,166,183,193,],[42,42,42,42,42,42,42,42,42,42,143,145,42,42,42,42,42,42,42,42,42,42,]),'var':([8,18,22,180,],[18,18,18,18,]),'bool':([17,33,37,69,72,73,76,81,87,91,102,104,132,166,183,193,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'type':([64,67,],[118,122,]),'empty':([0,3,4,6,7,8,17,18,22,25,35,36,42,54,65,87,102,119,131,134,139,143,145,151,152,154,178,180,183,186,193,199,],[5,10,5,14,10,19,44,19,19,70,77,80,92,107,120,137,137,10,77,80,165,92,92,107,107,177,191,19,44,165,44,191,]),'logic_exp':([17,33,37,69,72,73,87,91,102,104,132,166,183,193,],[45,45,84,45,45,45,45,45,45,45,84,45,45,45,]),'function':([3,7,119,],[7,7,7,]),'return':([17,183,193,],[46,46,46,]),'statement':([17,183,193,],[41,41,41,]),'print_stmt':([17,183,193,],[50,50,50,]),'args':([87,102,],[138,148,]),'comparison_op':([47,83,133,],[96,96,96,]),'number':([17,33,37,48,69,72,73,76,81,87,91,93,94,96,102,104,105,108,132,142,147,166,183,187,193,],[30,30,30,101,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,171,30,30,197,30,]),'log_a_alt':([35,131,],[78,161,]),'return_type':([64,],[117,]),'class':([0,4,],[4,4,]),'comparison':([17,33,37,69,72,73,76,81,87,91,102,104,132,166,183,193,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'term':([17,33,37,69,72,73,76,81,87,91,96,102,104,105,108,132,142,166,183,193,],[54,54,54,54,54,54,54,54,54,54,54,54,54,151,152,54,54,54,54,54,]),'attr':([16,154,190,],[25,178,199,]),'term_alt':([42,143,145,],[95,169,170,]),'expr':([17,91,183,193,],[57,141,57,57,]),'if_block':([17,183,193,],[58,58,58,]),'stack_method':([38,82,],[88,88,]),'while_block':([17,183,193,],[60,60,60,]),'classes':([0,4,],[3,11,]),'logic_exp_alt':([36,134,],[79,162,]),'exp':([17,33,69,72,73,87,91,102,104,166,183,193,],[61,75,124,128,129,139,61,139,150,186,61,61,]),'constructor':([65,],[119,]),'assign':([17,33,69,72,73,87,91,102,104,166,183,193,],[62,62,62,62,62,62,62,62,62,62,62,62,]),'block':([159,173,197,198,],[184,188,202,203,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',5),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',9),
  ('vars -> empty','vars',1,'p_vars','grammar.py',10),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',14),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',18),
  ('init -> = exp','init',2,'p_init','grammar.py',22),
  ('init -> empty','init',1,'p_init','grammar.py',23),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',27),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',28),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',29),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',30),
  ('type -> STACK','type',1,'p_type','grammar.py',31),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',35),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',36),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',40),
  ('classes -> empty','classes',1,'p_classes','grammar.py',41),
  ('class -> @ ID inheritance class_block','class',4,'p_class','grammar.py',45),
  ('inheritance -> < ID >','inheritance',3,'p_inheritance','grammar.py',49),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',50),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',54),
  ('constructor -> ~ ID params func_block','constructor',4,'p_constructor','grammar.py',58),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',59),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',63),
  ('functions -> empty','functions',1,'p_functions','grammar.py',64),
  ('function -> # ID : return_type params func_block','function',6,'p_function','grammar.py',68),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',72),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',76),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',77),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',81),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',82),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',86),
  ('statements -> statement','statements',1,'p_statements','grammar.py',90),
  ('statements -> empty','statements',1,'p_statements','grammar.py',91),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',95),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',96),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',97),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',98),
  ('statement -> expr','statement',1,'p_statement','grammar.py',99),
  ('statement -> return','statement',1,'p_statement','grammar.py',100),
  ('assign -> prop = expr','assign',3,'p_assign','grammar.py',104),
  ('assign -> prop = NEW ID','assign',4,'p_assign','grammar.py',105),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',109),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',110),
  ('prop -> ID','prop',1,'p_prop','grammar.py',111),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',115),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',116),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',120),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',124),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',128),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',132),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',133),
  ('block -> { statements }','block',3,'p_block','grammar.py',137),
  ('number -> FLOAT','number',1,'p_number','grammar.py',141),
  ('number -> INT','number',1,'p_number','grammar.py',142),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',146),
  ('exp -> read','exp',1,'p_exp','grammar.py',150),
  ('exp -> math_exp','exp',1,'p_exp','grammar.py',151),
  ('exp -> logic_exp','exp',1,'p_exp','grammar.py',152),
  ('exp -> assign','exp',1,'p_exp','grammar.py',153),
  ('read -> READ ( string )','read',4,'p_read','grammar.py',157),
  ('string -> ID','string',1,'p_string','grammar.py',161),
  ('string -> STRING','string',1,'p_string','grammar.py',162),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',166),
  ('math_exp_alt -> + term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',170),
  ('math_exp_alt -> - term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',171),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',172),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',176),
  ('term_alt -> * factor term_alt','term_alt',3,'p_term_alt','grammar.py',180),
  ('term_alt -> / factor term_alt','term_alt',3,'p_term_alt','grammar.py',181),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',182),
  ('factor -> ID','factor',1,'p_factor','grammar.py',186),
  ('factor -> number','factor',1,'p_factor','grammar.py',187),
  ('factor -> ( math_exp )','factor',3,'p_factor','grammar.py',188),
  ('logic_exp -> log_a logic_exp_alt','logic_exp',2,'p_logic_exp','grammar.py',192),
  ('logic_exp_alt -> OR log_a logic_exp_alt','logic_exp_alt',3,'p_logic_exp_alt','grammar.py',196),
  ('logic_exp_alt -> empty','logic_exp_alt',1,'p_logic_exp_alt','grammar.py',197),
  ('log_a -> log_b log_a_alt','log_a',2,'p_log_a','grammar.py',201),
  ('log_a_alt -> AND log_b log_a_alt','log_a_alt',3,'p_log_a_alt','grammar.py',205),
  ('log_a_alt -> empty','log_a_alt',1,'p_log_a_alt','grammar.py',206),
  ('log_b -> ( logic_exp )','log_b',3,'p_log_b','grammar.py',210),
  ('log_b -> call','log_b',1,'p_log_b','grammar.py',211),
  ('log_b -> bool','log_b',1,'p_log_b','grammar.py',212),
  ('log_b -> comparison','log_b',1,'p_log_b','grammar.py',213),
  ('bool -> TRUE','bool',1,'p_bool','grammar.py',217),
  ('bool -> FALSE','bool',1,'p_bool','grammar.py',218),
  ('comparison -> math_exp comparison_op math_exp','comparison',3,'p_comparison','grammar.py',222),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',226),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',227),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',228),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',229),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',233),
  ('call -> stack_call ( args )','call',4,'p_call','grammar.py',234),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',238),
  ('args -> empty','args',1,'p_args','grammar.py',239),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',243),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',244),
  ('stack_call -> prop stack_method','stack_call',2,'p_stack_call','grammar.py',248),
  ('stack_method -> POP','stack_method',1,'p_stack_method','grammar.py',252),
  ('stack_method -> PUSH','stack_method',1,'p_stack_method','grammar.py',253),
  ('stack_method -> PEEK','stack_method',1,'p_stack_method','grammar.py',254),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',348),
]
