
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FLOAT FLOAT_TYPE FOR FOR_TO GE ID IF INT INT_TYPE LE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS VOID WHILEprogram : classes functions statements\n    classes : class classes\n               | empty\n    class : '@' ID inheritance params scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    class_block : '{' functions '}'\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    return_type : VOID\n                   | type\n    func_block : '{' statements return '}'\n    return : RETURN exp ';'\n              | empty\n    statements : statement statements\n                  | empty\n    statement : declaration ';'\n                 | print_stmt\n                 | if_block\n                 | while_block\n                 | for_block\n                 | expr\n    declaration : '$' attr \n    attr : ID ':' type\n            | ID ':' stack_type\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | ID check_class\n    stack_type : STACK '(' type ')'\n    print_stmt : PRINT '(' exp ')' ';'\n    expr : exp ';'\n    exp : read \n           | math_or \n           | assign\n           | string\n           | new\n           | stack_call\n    read : READ '(' ')'\n    assign : var '=' exp\n    string : STRING\n    var : prop \n           | declaration\n    new : NEW constructor_call\n    constructor_call : ID '(' args ')'\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' exp ')'\n                    | PEEK '(' ')'\n    math_or : math_and math_or_alt\n    math_or_alt : OR math_and new_quad math_or_alt\n                   | empty\n    math_and : math_comp math_and_alt\n    math_and_alt : AND math_comp new_quad math_and_alt\n                    | empty\n    math_comp : math_exp math_comp_alt\n    math_comp_alt : comparison_op math_exp new_quad\n                     | empty\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n                     | LE\n                     | GE\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term new_quad math_exp_alt\n                    | '-' term new_quad math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor new_quad term_alt \n                | '/' factor new_quad term_alt\n                | empty\n    factor : prop\n              | number\n              | call \n              | '(' math_or ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    number : FLOAT empty\n              | INT\n    call : prop '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    if_block : IF '(' exp exp_evaluation  ')' block \n                | IF '(' exp exp_evaluation ')' block after_if_block ELSE block\n    while_block : WHILE '(' leave_breadcrumb exp exp_evaluation ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    block : '{' statements '}'\n    empty :new_quad : empty\n    scope_class : empty\n    scope_function : empty\n    check_class : empty\n    neg_lookup : empty\n    exp_evaluation : empty\n    after_if_block : empty\n    leave_breadcrumb : empty\n    "
    
_lr_action_items = {'PEEK':([93,],[129,]),'RETURN':([17,33,37,41,47,48,50,79,92,100,182,206,209,211,216,217,219,220,],[-27,-99,-22,-24,-28,-25,-26,-21,-23,-39,-38,-94,-96,-97,-99,-98,222,-95,]),'FLOAT_TYPE':([120,138,184,],[156,156,156,]),'READ':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,60,63,64,83,92,94,100,111,112,113,143,152,170,182,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,20,-14,-2,-13,-27,20,-24,-28,-25,-26,-99,20,20,20,-23,20,-39,20,-107,20,-4,20,20,-38,-12,20,-94,-96,-97,-15,20,-98,-95,20,-18,]),'VOID':([138,],[175,]),'STRING_TYPE':([120,138,184,],[158,158,158,]),'NE':([18,21,27,28,32,42,44,46,52,58,77,78,88,91,95,98,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,195,196,],[-99,-81,-80,67,-82,-99,-86,-99,-88,-87,-80,-86,-76,-79,-72,-75,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,-99,-99,-77,-78,-74,-73,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,92,100,143,182,199,205,206,209,211,215,216,217,220,224,],[-99,-99,-99,-3,-99,22,-14,-2,-13,-27,22,-24,-28,-25,-26,-23,-39,-4,-38,-12,22,-94,-96,-97,-15,22,-98,-95,-18,]),'POP':([93,],[131,]),'INT_TYPE':([120,138,184,],[160,160,160,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,92,100,143,182,199,205,206,209,211,215,216,217,220,224,],[-99,-99,-99,-3,-99,25,-14,-2,-13,-27,25,-24,-28,-25,-26,-23,-39,-4,-38,-12,25,-94,-96,-97,-15,25,-98,-95,-18,]),'NEW':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,60,63,64,83,92,94,100,111,112,113,143,152,170,182,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,24,-14,-2,-13,-27,24,-24,-28,-25,-26,-99,24,24,24,-23,24,-39,24,-107,24,-4,24,24,-38,-12,24,-94,-96,-97,-15,24,-98,-95,24,-18,]),'#':([0,3,4,5,7,11,143,144,199,215,224,],[-99,9,-99,-3,9,-2,-4,9,-12,-15,-18,]),'LE':([18,21,27,28,32,42,44,46,52,58,77,78,88,91,95,98,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,195,196,],[-99,-81,-80,66,-82,-99,-86,-99,-88,-87,-80,-86,-76,-79,-72,-75,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,-99,-99,-77,-78,-74,-73,]),'$':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,60,63,64,83,92,94,100,111,112,113,143,152,170,182,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,29,-14,-2,-13,-27,29,-24,-28,-25,-26,-99,29,29,29,-23,29,-39,29,-107,29,-4,29,29,-38,-12,29,-94,-96,-97,-15,29,-98,-95,29,-18,]),')':([16,18,21,23,26,27,28,31,32,34,36,38,39,42,44,46,52,53,55,58,59,61,64,68,72,76,77,78,81,82,84,85,88,91,95,98,103,104,105,108,110,113,115,116,117,118,119,121,123,124,125,127,128,130,133,134,135,136,137,141,142,146,147,149,150,151,153,154,155,156,157,158,160,161,162,163,164,166,167,168,169,171,172,173,174,178,180,181,183,185,186,187,189,190,191,192,193,195,196,198,201,202,204,210,],[-41,-99,-81,-48,-45,-80,-99,-40,-82,-99,-44,-99,-43,-99,-86,-99,-88,-42,-99,-87,110,-51,-99,-63,-65,121,-80,-86,-60,-62,-57,-59,-76,-79,-72,-75,139,-9,-99,-103,-46,-99,148,-91,149,-99,-99,-83,-99,-47,-99,-99,-99,-53,-85,-99,-99,-99,-84,-11,-8,-99,181,-89,-90,-93,-64,-100,-31,-33,-35,-34,-32,-30,-99,-99,-99,-99,-99,191,192,-105,194,-99,-99,-99,200,-52,-99,-36,-61,-58,-77,-78,-56,-54,204,-74,-73,-10,-92,210,-55,-37,]),'(':([0,3,4,5,6,7,8,10,11,12,14,15,17,20,22,25,27,30,33,41,44,45,47,48,50,60,62,63,64,65,66,67,69,70,71,73,77,78,80,83,86,89,90,92,94,96,97,100,108,111,112,113,129,131,132,133,137,143,145,152,156,157,158,159,160,162,170,175,176,177,182,185,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,-99,30,-14,-2,55,-6,-13,-27,59,60,63,64,30,30,-24,-86,94,-28,-25,-26,-99,113,30,30,30,-70,-69,-71,-68,-66,-67,64,-86,30,30,30,30,30,-23,30,30,30,-39,-103,30,-107,30,168,169,170,-85,-84,-4,-5,30,-33,-35,-34,184,-32,-99,30,-16,55,-17,-38,-36,-12,30,-94,-96,-97,-15,30,-98,-95,30,-18,]),'+':([18,21,27,32,42,44,46,52,58,77,78,88,91,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,],[-99,-81,-80,-82,-99,-86,97,-88,-87,-80,-86,-76,-79,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,97,97,-77,-78,]),'*':([18,21,27,32,42,44,52,58,77,78,121,127,128,133,137,149,154,166,167,],[-99,-81,-80,-82,89,-86,-88,-87,-80,-86,-83,-99,-99,-85,-84,-89,-100,89,89,]),'-':([18,21,27,32,42,44,46,52,58,77,78,88,91,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,],[-99,-81,-80,-82,-99,-86,96,-88,-87,-80,-86,-76,-79,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,96,96,-77,-78,]),',':([16,18,21,23,26,27,28,31,32,34,36,38,39,42,44,46,52,53,58,61,68,72,77,78,81,82,84,85,88,91,95,98,105,108,110,118,119,121,123,124,125,127,128,130,133,135,136,137,149,153,154,155,156,157,158,160,161,162,163,164,166,167,173,174,178,181,183,185,186,187,189,190,191,192,195,196,204,210,],[-41,-99,-81,-48,-45,-80,-99,-40,-82,-99,-44,-99,-43,-99,-86,-99,-88,-42,-87,-51,-63,-65,-80,-86,-60,-62,-57,-59,-76,-79,-72,-75,140,-103,-46,152,-99,-83,-99,-47,-99,-99,-99,-53,-85,-99,-99,-84,-89,-64,-100,-31,-33,-35,-34,-32,-30,-99,-99,-99,-99,-99,-99,-99,140,-52,152,-36,-61,-58,-77,-78,-56,-54,-74,-73,-55,-37,]),'/':([18,21,27,32,42,44,52,58,77,78,121,127,128,133,137,149,154,166,167,],[-99,-81,-80,-82,90,-86,-88,-87,-80,-86,-83,-99,-99,-85,-84,-89,-100,90,90,]),'.':([44,49,78,],[93,99,122,]),'PUSH':([93,],[132,]),';':([16,18,21,23,26,27,28,31,32,34,36,38,39,42,43,44,46,51,52,53,58,61,68,72,74,77,78,81,82,84,85,88,91,95,98,108,110,119,121,123,124,125,127,128,130,133,135,136,137,148,149,153,154,155,156,157,158,160,161,162,163,164,166,167,173,174,181,185,186,187,189,190,191,192,195,196,204,210,225,],[-41,-99,-81,-48,-45,-80,-99,-40,-82,-99,-44,-99,-43,-99,92,-86,-99,100,-88,-42,-87,-51,-63,-65,-29,-80,-86,-60,-62,-57,-59,-76,-79,-72,-75,-103,-46,-99,-83,-99,-47,-99,-99,-99,-53,-85,-99,-99,-84,182,-89,-64,-100,-31,-33,-35,-34,-32,-30,-99,-99,-99,-99,-99,-99,-99,-52,-36,-61,-58,-77,-78,-56,-54,-74,-73,-55,-37,226,]),':':([54,75,101,102,],[-99,120,138,-104,]),'=':([27,35,43,44,74,108,114,133,137,155,156,157,158,160,161,162,185,210,],[-49,83,-50,-86,-29,-103,-50,-85,-84,-31,-33,-35,-34,-32,-30,-99,-36,-37,]),'<':([6,18,21,27,28,32,42,44,46,52,58,77,78,88,91,95,98,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,195,196,],[13,-99,-81,-80,71,-82,-99,-86,-99,-88,-87,-80,-86,-76,-79,-72,-75,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,-99,-99,-77,-78,-74,-73,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,19,33,37,41,47,48,50,79,92,100,143,182,199,206,209,211,215,217,220,224,],[-99,0,-99,-99,-3,-99,-99,-14,-2,-13,-27,-1,-99,-22,-24,-28,-25,-26,-21,-23,-39,-4,-38,-12,-94,-96,-97,-15,-98,-95,-18,]),'@':([0,4,143,199,],[2,2,-4,-12,]),'STRING':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,60,63,64,83,92,94,100,111,112,113,143,152,170,182,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,23,-14,-2,-13,-27,23,-24,-28,-25,-26,-99,23,23,23,-23,23,-39,23,-107,23,-4,23,23,-38,-12,23,-94,-96,-97,-15,23,-98,-95,23,-18,]),'FOR':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,92,100,143,182,199,205,206,209,211,215,216,217,220,224,],[-99,-99,-99,-3,-99,40,-14,-2,-13,-27,40,-24,-28,-25,-26,-23,-39,-4,-38,-12,40,-94,-96,-97,-15,40,-98,-95,-18,]),'SKIP':([18,52,58,165,],[-99,-88,-87,188,]),'ELSE':([206,213,214,217,],[-99,218,-106,-98,]),'GE':([18,21,27,28,32,42,44,46,52,58,77,78,88,91,95,98,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,195,196,],[-99,-81,-80,69,-82,-99,-86,-99,-88,-87,-80,-86,-76,-79,-72,-75,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,-99,-99,-77,-78,-74,-73,]),'EQ':([18,21,27,28,32,42,44,46,52,58,77,78,88,91,95,98,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,195,196,],[-99,-81,-80,70,-82,-99,-86,-99,-88,-87,-80,-86,-76,-79,-72,-75,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,-99,-99,-77,-78,-74,-73,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,17,24,29,30,33,41,47,48,50,55,60,63,64,65,66,67,69,70,71,73,80,83,86,89,90,92,93,94,96,97,99,100,111,112,113,120,122,138,140,143,152,170,182,184,199,205,206,209,211,215,216,217,220,222,224,],[-99,6,-99,-99,-3,-99,44,54,-14,-2,57,-13,-27,62,75,78,44,-24,-28,-25,-26,75,-99,44,44,78,-70,-69,-71,-68,-66,-67,78,44,78,78,78,-23,133,44,78,78,137,-39,44,-107,44,162,133,162,75,-4,44,44,-38,162,-12,44,-94,-96,-97,-15,44,-98,-95,44,-18,]),'IF':([0,3,4,5,7,8,10,11,15,17,33,41,47,48,50,92,100,143,182,199,205,206,209,211,215,216,217,220,224,],[-99,-99,-99,-3,-99,45,-14,-2,-13,-27,45,-24,-28,-25,-26,-23,-39,-4,-38,-12,45,-94,-96,-97,-15,45,-98,-95,-18,]),'AND':([18,21,27,28,32,34,42,44,46,52,58,68,72,77,78,88,91,95,98,119,121,123,127,128,133,135,136,137,149,153,154,163,166,167,173,174,189,190,195,196,],[-99,-81,-80,-99,-82,80,-99,-86,-99,-88,-87,-63,-65,-80,-86,-76,-79,-72,-75,-99,-83,-99,-99,-99,-85,-99,-99,-84,-89,-64,-100,80,-99,-99,-99,-99,-77,-78,-74,-73,]),'FOR_TO':([18,52,58,87,],[-99,-88,-87,126,]),'BOOLEAN_TYPE':([120,138,184,],[157,157,157,]),'THIS':([0,3,4,5,7,8,10,11,15,17,30,33,41,47,48,50,60,63,64,65,66,67,69,70,71,73,80,83,86,89,90,92,94,96,97,100,111,112,113,143,152,170,182,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,49,-14,-2,-13,-27,49,49,-24,-28,-25,-26,-99,49,49,49,-70,-69,-71,-68,-66,-67,49,49,49,49,49,-23,49,49,49,-39,49,-107,49,-4,49,49,-38,-12,49,-94,-96,-97,-15,49,-98,-95,49,-18,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,30,33,40,41,47,48,50,60,63,64,65,66,67,69,70,71,73,80,83,86,89,90,92,94,96,97,100,111,112,113,126,143,152,170,182,188,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,18,-14,-2,-13,-27,18,18,18,-24,-28,-25,-26,-99,18,18,18,-70,-69,-71,-68,-66,-67,18,18,18,18,18,-23,18,18,18,-39,18,-107,18,18,-4,18,18,-38,18,-12,18,-94,-96,-97,-15,18,-98,-95,18,-18,]),'STACK':([120,],[159,]),'INT':([0,3,4,5,7,8,10,11,15,17,30,33,40,41,47,48,50,60,63,64,65,66,67,69,70,71,73,80,83,86,89,90,92,94,96,97,100,111,112,113,126,143,152,170,182,188,199,205,206,209,211,215,216,217,220,222,224,],[-99,-99,-99,-3,-99,52,-14,-2,-13,-27,52,52,52,-24,-28,-25,-26,-99,52,52,52,-70,-69,-71,-68,-66,-67,52,52,52,52,52,-23,52,52,52,-39,52,-107,52,52,-4,52,52,-38,52,-12,52,-94,-96,-97,-15,52,-98,-95,52,-18,]),'{':([18,52,56,58,106,107,139,194,197,200,203,207,208,218,],[-99,-88,-99,-87,144,-101,-7,205,-99,205,205,216,-102,205,]),'>':([18,21,27,28,32,42,44,46,52,57,58,77,78,88,91,95,98,108,109,121,127,128,133,135,136,137,149,154,166,167,173,174,189,190,195,196,],[-99,-81,-80,73,-82,-99,-86,-99,-88,-99,-87,-80,-86,-76,-79,-72,-75,-103,145,-83,-99,-99,-85,-99,-99,-84,-89,-100,-99,-99,-99,-99,-77,-78,-74,-73,]),'}':([7,10,15,17,33,37,41,47,48,50,79,92,100,144,179,182,205,206,209,211,212,215,216,217,219,220,221,223,224,226,],[-99,-14,-13,-27,-99,-22,-24,-28,-25,-26,-21,-23,-39,-99,199,-38,-99,-94,-96,-97,217,-15,-99,-98,-99,-95,224,-20,-18,-19,]),'OR':([18,21,27,28,32,34,38,42,44,46,52,58,68,72,77,78,81,82,88,91,95,98,119,121,123,125,127,128,133,135,136,137,149,153,154,163,164,166,167,173,174,186,189,190,195,196,],[-99,-81,-80,-99,-82,-99,86,-99,-86,-99,-88,-87,-63,-65,-80,-86,-60,-62,-76,-79,-72,-75,-99,-83,-99,-99,-99,-99,-85,-99,-99,-84,-89,-64,-100,-99,86,-99,-99,-99,-99,-61,-77,-78,-74,-73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'math_or':([8,30,33,63,64,83,94,111,113,152,170,205,216,222,],[16,76,16,16,16,16,16,16,16,16,16,16,16,16,]),'for_block':([8,33,205,216,],[17,17,17,17,]),'statements':([8,33,205,216,],[19,79,212,219,]),'attrs_alt':([105,178,],[142,198,]),'stack_method':([93,],[130,]),'leave_breadcrumb':([60,],[111,]),'number':([8,30,33,40,63,64,65,80,83,86,89,90,94,96,97,111,113,126,152,170,188,205,216,222,],[21,21,21,87,21,21,21,21,21,21,21,21,21,21,21,21,21,165,21,21,203,21,21,21,]),'return':([219,],[221,]),'attrs':([55,],[103,]),'constructor_call':([24,],[61,]),'stack_call':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'classes':([0,4,],[3,11,]),'scope_function':([197,],[207,]),'math_or_alt':([38,164,],[84,187,]),'functions':([3,7,144,],[8,15,179,]),'after_if_block':([206,],[213,]),'func_block':([207,],[215,]),'inheritance':([6,],[12,]),'math_exp_alt':([46,173,174,],[95,195,196,]),'prop':([8,30,33,63,64,65,80,83,86,89,90,94,96,97,111,113,152,170,205,216,222,],[27,77,27,27,27,77,77,27,77,77,77,27,77,77,27,27,27,27,27,27,27,]),'read':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[31,31,31,31,31,31,31,31,31,31,31,31,31,]),'program':([0,],[1,]),'call':([8,30,33,63,64,65,80,83,86,89,90,94,96,97,111,113,152,170,205,216,222,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'neg_lookup':([54,],[101,]),'math_exp':([8,30,33,63,64,65,80,83,86,94,111,113,152,170,205,216,222,],[28,28,28,28,28,119,28,28,28,28,28,28,28,28,28,28,28,]),'factor':([8,30,33,63,64,65,80,83,86,89,90,94,96,97,111,113,152,170,205,216,222,],[42,42,42,42,42,42,42,42,42,127,128,42,42,42,42,42,42,42,42,42,42,]),'var':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[35,35,35,35,35,35,35,35,35,35,35,35,35,]),'new':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[36,36,36,36,36,36,36,36,36,36,36,36,36,]),'type':([120,138,184,],[161,177,202,]),'empty':([0,3,4,6,7,8,18,28,33,34,38,42,46,54,55,56,57,60,64,105,113,118,119,123,125,127,128,134,135,136,144,146,162,163,164,166,167,173,174,178,183,197,205,206,216,219,],[5,10,5,14,10,37,58,72,37,82,85,91,98,102,104,107,108,112,116,141,116,151,154,154,154,154,154,171,154,154,10,171,108,82,85,91,91,98,98,141,151,208,37,214,37,223,]),'function':([3,7,144,],[7,7,7,]),'math_and':([8,30,33,63,64,83,86,94,111,113,152,170,205,216,222,],[38,38,38,38,38,38,125,38,38,38,38,38,38,38,38,]),'string':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[39,39,39,39,39,39,39,39,39,39,39,39,39,]),'print_stmt':([8,33,205,216,],[41,41,41,41,]),'math_comp':([8,30,33,63,64,80,83,86,94,111,113,152,170,205,216,222,],[34,34,34,34,34,123,34,34,34,34,34,34,34,34,34,34,]),'args':([64,113,],[117,147,]),'comparison_op':([28,],[65,]),'class_block':([106,],[143,]),'stack_type':([120,],[155,]),'math_comp_alt':([28,],[68,]),'scope_class':([56,],[106,]),'declaration':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[43,43,114,114,114,114,114,114,114,114,43,43,114,]),'new_quad':([119,123,125,127,128,135,136,],[153,163,164,166,167,173,174,]),'return_type':([138,],[176,]),'class':([0,4,],[4,4,]),'term':([8,30,33,63,64,65,80,83,86,94,96,97,111,113,152,170,205,216,222,],[46,46,46,46,46,46,46,46,46,46,135,136,46,46,46,46,46,46,46,]),'args_aux':([118,183,],[150,201,]),'attr':([29,55,140,],[74,105,178,]),'term_alt':([42,166,167,],[88,189,190,]),'expr':([8,33,205,216,],[47,47,47,47,]),'if_block':([8,33,205,216,],[48,48,48,48,]),'math_and_alt':([34,163,],[81,186,]),'while_block':([8,33,205,216,],[50,50,50,50,]),'statement':([8,33,205,216,],[33,33,33,33,]),'check_class':([57,162,],[109,185,]),'exp':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[51,51,115,118,124,134,146,118,183,193,51,51,225,]),'params':([12,176,],[56,197,]),'exp_evaluation':([134,146,],[172,180,]),'assign':([8,33,63,64,83,94,111,113,152,170,205,216,222,],[53,53,53,53,53,53,53,53,53,53,53,53,53,]),'block':([194,200,203,218,],[206,209,211,220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions statements','program',3,'p_program','grammar.py',8),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',24),
  ('classes -> empty','classes',1,'p_classes','grammar.py',25),
  ('class -> @ ID inheritance params scope_class class_block','class',6,'p_class','grammar.py',30),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',35),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',36),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',44),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',49),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',50),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',58),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',59),
  ('class_block -> { functions }','class_block',3,'p_class_block','grammar.py',67),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',82),
  ('functions -> empty','functions',1,'p_functions','grammar.py',83),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',87),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',92),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',93),
  ('func_block -> { statements return }','func_block',4,'p_func_block','grammar.py',98),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',103),
  ('return -> empty','return',1,'p_return','grammar.py',104),
  ('statements -> statement statements','statements',2,'p_statements','grammar.py',122),
  ('statements -> empty','statements',1,'p_statements','grammar.py',123),
  ('statement -> declaration ;','statement',2,'p_statement','grammar.py',127),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',128),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',129),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',130),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',131),
  ('statement -> expr','statement',1,'p_statement','grammar.py',132),
  ('declaration -> $ attr','declaration',2,'p_declaration','grammar.py',136),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',141),
  ('attr -> ID : stack_type','attr',3,'p_attr','grammar.py',142),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',148),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',149),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',150),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',151),
  ('type -> ID check_class','type',2,'p_type','grammar.py',152),
  ('stack_type -> STACK ( type )','stack_type',4,'p_stack_type','grammar.py',157),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',162),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',180),
  ('exp -> read','exp',1,'p_exp','grammar.py',186),
  ('exp -> math_or','exp',1,'p_exp','grammar.py',187),
  ('exp -> assign','exp',1,'p_exp','grammar.py',188),
  ('exp -> string','exp',1,'p_exp','grammar.py',189),
  ('exp -> new','exp',1,'p_exp','grammar.py',190),
  ('exp -> stack_call','exp',1,'p_exp','grammar.py',191),
  ('read -> READ ( )','read',3,'p_read','grammar.py',196),
  ('assign -> var = exp','assign',3,'p_assign','grammar.py',201),
  ('string -> STRING','string',1,'p_string','grammar.py',208),
  ('var -> prop','var',1,'p_var','grammar.py',214),
  ('var -> declaration','var',1,'p_var','grammar.py',215),
  ('new -> NEW constructor_call','new',2,'p_new','grammar.py',220),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',225),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',232),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',240),
  ('stack_method -> PUSH ( exp )','stack_method',4,'p_stack_method','grammar.py',241),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',242),
  ('math_or -> math_and math_or_alt','math_or',2,'p_math_or','grammar.py',261),
  ('math_or_alt -> OR math_and new_quad math_or_alt','math_or_alt',4,'p_math_or_alt','grammar.py',268),
  ('math_or_alt -> empty','math_or_alt',1,'p_math_or_alt','grammar.py',269),
  ('math_and -> math_comp math_and_alt','math_and',2,'p_math_and','grammar.py',275),
  ('math_and_alt -> AND math_comp new_quad math_and_alt','math_and_alt',4,'p_math_and_alt','grammar.py',282),
  ('math_and_alt -> empty','math_and_alt',1,'p_math_and_alt','grammar.py',283),
  ('math_comp -> math_exp math_comp_alt','math_comp',2,'p_math_comp','grammar.py',289),
  ('math_comp_alt -> comparison_op math_exp new_quad','math_comp_alt',3,'p_math_comp_alt','grammar.py',296),
  ('math_comp_alt -> empty','math_comp_alt',1,'p_math_comp_alt','grammar.py',297),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',303),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',304),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',305),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',306),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','grammar.py',307),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','grammar.py',308),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',324),
  ('math_exp_alt -> + term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',331),
  ('math_exp_alt -> - term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',332),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',333),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',339),
  ('term_alt -> * factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',346),
  ('term_alt -> / factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',347),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',348),
  ('factor -> prop','factor',1,'p_factor','grammar.py',354),
  ('factor -> number','factor',1,'p_factor','grammar.py',355),
  ('factor -> call','factor',1,'p_factor','grammar.py',356),
  ('factor -> ( math_or )','factor',3,'p_factor','grammar.py',357),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',365),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',366),
  ('prop -> ID','prop',1,'p_prop','grammar.py',367),
  ('number -> FLOAT empty','number',2,'p_number','grammar.py',384),
  ('number -> INT','number',1,'p_number','grammar.py',385),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',407),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',412),
  ('args -> empty','args',1,'p_args','grammar.py',413),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',421),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',422),
  ('if_block -> IF ( exp exp_evaluation ) block','if_block',6,'p_if_block','grammar.py',441),
  ('if_block -> IF ( exp exp_evaluation ) block after_if_block ELSE block','if_block',9,'p_if_block','grammar.py',442),
  ('while_block -> WHILE ( leave_breadcrumb exp exp_evaluation ) block','while_block',7,'p_while_block','grammar.py',447),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',452),
  ('block -> { statements }','block',3,'p_block','grammar.py',456),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',471),
  ('new_quad -> empty','new_quad',1,'p_new_quad','grammar.py',493),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',506),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',516),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',524),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',530),
  ('exp_evaluation -> empty','exp_evaluation',1,'p_exp_evaluation','grammar.py',539),
  ('after_if_block -> empty','after_if_block',1,'p_after_if_block','grammar.py',544),
  ('leave_breadcrumb -> empty','leave_breadcrumb',1,'p_leave_breadcrumb','grammar.py',550),
]
