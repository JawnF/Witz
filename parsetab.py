
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FLOAT FLOAT_TYPE FOR FOR_TO GE ID IF INT INT_TYPE LE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS VOID WHILEprogram : classes functions statements\n    declaration : '$' attr \n    new : NEW constructor_call\n    attr : ID ':' type\n    var : prop \n           | declaration\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID check_class\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance class_attribute scope_class store_attributes class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    class_block : '{' functions '}'\n    class_attribute : '(' attrs ')'\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' statements return '}'\n    statements : statement statements\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n    assign : var '=' exp\n    init : \n    constructor_call : ID '(' args ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp exp_evaluation  ')' block \n                | IF '(' exp exp_evaluation ')' block after_if_block ELSE block\n    while_block : WHILE '(' leave_breadcrumb exp exp_evaluation ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | empty\n    block : '{' statements '}'\n    number : FLOAT empty\n              | INT\n    expr : exp ';'\n    exp : read \n           | math_or \n           | assign\n           | string\n           | new\n    string : STRING\n    read : READ '(' ')'\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term new_quad math_exp_alt\n                    | '-' term new_quad math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor new_quad term_alt \n                | '/' factor new_quad term_alt\n                | empty\n    new_quad : empty\n    factor : id\n              | number\n              | call \n              | '(' math_or ')'\n    id : ID\n    math_or : math_and math_or_alt\n    math_or_alt : OR math_and new_quad math_or_alt\n                   | empty\n    math_and : math_comp math_and_alt\n    math_and_alt : AND math_comp new_quad math_and_alt\n                    | empty\n    math_comp : math_exp math_comp_alt\n    math_comp_alt : comparison_op math_exp new_quad\n                     | empty\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n                     | LE\n                     | GE\n    call : prop '(' args ')'\n            | stack_call\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' id ')'\n                    | PEEK '(' ')'\n    empty :scope_class : empty\n    scope_function : empty\n    scope_constructor : empty\n    check_class : empty\n    neg_lookup : empty\n    store_attributes : empty\n    exp_evaluation : empty\n    after_if_block : empty\n    leave_breadcrumb : empty\n    "
    
_lr_action_items = {'@':([0,3,194,216,],[5,5,-17,-20,]),'#':([0,2,3,4,7,10,194,195,213,216,224,],[-101,9,-101,-16,9,-15,-17,9,-24,-20,-30,]),'IF':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,61,178,194,197,198,211,212,213,214,216,218,220,224,],[-101,-101,-101,-16,20,-101,-23,-15,20,-33,-34,-35,-36,-37,-22,-54,-48,-17,-44,20,-46,-47,-24,20,-20,-51,-45,-30,]),'WHILE':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,61,178,194,197,198,211,212,213,214,216,218,220,224,],[-101,-101,-101,-16,23,-101,-23,-15,23,-33,-34,-35,-36,-37,-22,-54,-48,-17,-44,23,-46,-47,-24,23,-20,-51,-45,-30,]),'FOR':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,61,178,194,197,198,211,212,213,214,216,218,220,224,],[-101,-101,-101,-16,24,-101,-23,-15,24,-33,-34,-35,-36,-37,-22,-54,-48,-17,-44,24,-46,-47,-24,24,-20,-51,-45,-30,]),'PRINT':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,61,178,194,197,198,211,212,213,214,216,218,220,224,],[-101,-101,-101,-16,26,-101,-23,-15,26,-33,-34,-35,-36,-37,-22,-54,-48,-17,-44,26,-46,-47,-24,26,-20,-51,-45,-30,]),'READ':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,57,61,62,64,69,75,105,106,112,148,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,32,-101,-23,-15,32,-33,-34,-35,-36,-37,-22,32,-54,-101,32,32,32,32,-110,32,32,-48,-17,-44,32,-46,-47,-24,32,-20,-51,-45,32,-30,]),'STRING':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,57,61,62,64,69,75,105,106,112,148,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,35,-101,-23,-15,35,-33,-34,-35,-36,-37,-22,35,-54,-101,35,35,35,35,-110,35,35,-48,-17,-44,35,-46,-47,-24,35,-20,-51,-45,35,-30,]),'NEW':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,57,61,62,64,69,75,105,106,112,148,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,36,-101,-23,-15,36,-33,-34,-35,-36,-37,-22,36,-54,-101,36,36,36,36,-110,36,36,-48,-17,-44,36,-46,-47,-24,36,-20,-51,-45,36,-30,]),'THIS':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,21,51,57,61,62,64,67,69,73,75,77,79,80,81,82,83,84,90,91,94,95,105,106,112,148,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,41,-101,-23,-15,41,-33,-34,-35,-36,-37,41,-22,41,-54,-101,41,41,41,41,41,41,-85,-86,-87,-88,-89,-90,41,41,41,41,41,-110,41,41,-48,-17,-44,41,-46,-47,-24,41,-20,-51,-45,41,-30,]),'ID':([0,2,3,4,5,6,7,8,9,10,13,15,16,17,18,19,21,36,43,51,54,57,61,62,64,67,69,73,75,77,79,80,81,82,83,84,85,86,90,91,94,95,101,105,106,112,124,129,148,152,172,178,193,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,11,42,-101,-23,52,-15,42,-33,-34,-35,-36,-37,59,71,88,-22,102,42,-54,-101,42,59,42,59,42,59,-85,-86,-87,-88,-89,-90,118,119,59,59,59,59,88,42,-110,42,154,154,42,185,88,-48,88,-17,-44,42,-46,-47,-24,42,-20,-51,-45,42,-30,]),'$':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,51,57,61,62,64,69,75,105,106,112,148,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,43,-101,-23,-15,43,-33,-34,-35,-36,-37,-22,43,-54,-101,43,43,43,43,-110,43,43,-48,-17,-44,43,-46,-47,-24,43,-20,-51,-45,43,-30,]),'(':([0,2,3,4,6,7,8,10,11,13,15,16,17,18,19,20,21,23,26,32,38,42,51,53,55,57,59,60,61,62,64,67,69,71,73,75,77,79,80,81,82,83,84,90,91,94,95,105,106,112,118,119,121,122,123,136,148,154,156,157,158,159,160,165,166,167,174,178,187,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,21,-101,-23,-15,-101,21,-33,-34,-35,-36,-37,57,21,62,64,65,75,-43,-22,101,-19,21,-43,75,-54,-101,21,21,21,112,21,21,21,-85,-86,-87,-88,-89,-90,21,21,21,21,21,-110,21,-41,-42,151,152,153,-105,21,-101,-7,-8,-9,-10,-11,193,-13,-14,-18,-48,-12,-17,-44,21,-46,-47,-24,21,-20,-51,-45,21,-30,]),'FLOAT':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,21,24,51,57,61,62,64,67,69,73,75,77,79,80,81,82,83,84,90,91,94,95,105,106,107,112,148,177,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,48,-101,-23,-15,48,-33,-34,-35,-36,-37,48,48,-22,48,-54,-101,48,48,48,48,48,48,-85,-86,-87,-88,-89,-90,48,48,48,48,48,-110,48,48,48,48,-48,-17,-44,48,-46,-47,-24,48,-20,-51,-45,48,-30,]),'INT':([0,2,3,4,6,7,8,10,13,15,16,17,18,19,21,24,51,57,61,62,64,67,69,73,75,77,79,80,81,82,83,84,90,91,94,95,105,106,107,112,148,177,178,194,197,198,211,212,213,214,216,218,220,222,224,],[-101,-101,-101,-16,49,-101,-23,-15,49,-33,-34,-35,-36,-37,49,49,-22,49,-54,-101,49,49,49,49,49,49,-85,-86,-87,-88,-89,-90,49,49,49,49,49,-110,49,49,49,49,-48,-17,-44,49,-46,-47,-24,49,-20,-51,-45,49,-30,]),'$end':([0,1,2,3,4,6,7,8,10,12,13,14,15,16,17,18,19,51,56,61,178,194,197,211,212,213,216,218,220,224,],[-101,0,-101,-101,-16,-101,-101,-23,-15,-1,-101,-32,-33,-34,-35,-36,-37,-22,-31,-54,-48,-17,-44,-46,-47,-24,-20,-51,-45,-30,]),'}':([7,8,13,14,15,16,17,18,19,51,56,61,178,195,197,198,206,210,211,212,213,214,218,219,220,221,223,224,226,],[-101,-23,-101,-32,-33,-34,-35,-36,-37,-22,-31,-54,-48,-101,-44,-101,216,218,-46,-47,-24,-101,-51,-101,-45,224,-50,-30,-49,]),'<':([11,25,40,42,44,45,46,47,48,49,50,59,89,92,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,188,189,190,191,202,],[54,-72,79,-75,-101,-101,-71,-73,-101,-53,-92,-75,-62,-65,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'RETURN':([13,14,15,16,17,18,19,56,61,178,197,211,212,214,218,219,220,],[-101,-32,-33,-34,-35,-36,-37,-31,-54,-48,-44,-46,-47,-101,-51,222,-45,]),';':([22,25,27,28,29,30,31,33,35,37,40,42,44,45,46,47,48,49,50,59,66,68,70,72,74,76,78,89,92,93,96,97,104,109,110,111,113,117,120,125,126,127,128,141,142,143,145,146,150,161,162,163,164,179,180,181,183,186,188,189,190,191,202,225,],[61,-72,-55,-56,-57,-58,-59,-101,-60,-101,-101,-75,-101,-101,-71,-73,-101,-53,-92,-75,-76,-78,-3,-79,-81,-82,-84,-62,-65,-66,-69,-52,-74,-61,-101,-38,-101,-101,-97,-101,-101,-101,-101,178,-101,-70,-101,-91,-83,-101,-101,-101,-101,-77,-40,-80,-98,-100,-63,-64,-67,-68,-99,226,]),'*':([25,42,45,46,47,48,49,50,59,97,104,120,127,128,143,146,163,164,183,186,202,],[-72,-75,94,-71,-73,-101,-53,-92,-75,-52,-74,-97,-101,-101,-70,-91,94,94,-98,-100,-99,]),'/':([25,42,45,46,47,48,49,50,59,97,104,120,127,128,143,146,163,164,183,186,202,],[-72,-75,95,-71,-73,-101,-53,-92,-75,-52,-74,-97,-101,-101,-70,-91,95,95,-98,-100,-99,]),'+':([25,42,44,45,46,47,48,49,50,59,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,190,191,202,],[-72,-75,90,-101,-71,-73,-101,-53,-92,-75,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,90,90,-101,-101,-98,-100,-67,-68,-99,]),'-':([25,42,44,45,46,47,48,49,50,59,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,190,191,202,],[-72,-75,91,-101,-71,-73,-101,-53,-92,-75,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,91,91,-101,-101,-98,-100,-67,-68,-99,]),'>':([25,40,42,44,45,46,47,48,49,50,59,89,92,93,96,97,102,104,120,125,126,127,128,135,136,143,146,161,162,163,164,183,186,188,189,190,191,202,],[-72,80,-75,-101,-101,-71,-73,-101,-53,-92,-75,-62,-65,-66,-69,-52,-101,-74,-97,-101,-101,-101,-101,174,-105,-70,-91,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'EQ':([25,40,42,44,45,46,47,48,49,50,59,89,92,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,188,189,190,191,202,],[-72,81,-75,-101,-101,-71,-73,-101,-53,-92,-75,-62,-65,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'NE':([25,40,42,44,45,46,47,48,49,50,59,89,92,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,188,189,190,191,202,],[-72,82,-75,-101,-101,-71,-73,-101,-53,-92,-75,-62,-65,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'LE':([25,40,42,44,45,46,47,48,49,50,59,89,92,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,188,189,190,191,202,],[-72,83,-75,-101,-101,-71,-73,-101,-53,-92,-75,-62,-65,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'GE':([25,40,42,44,45,46,47,48,49,50,59,89,92,93,96,97,104,120,125,126,127,128,143,146,161,162,163,164,183,186,188,189,190,191,202,],[-72,84,-75,-101,-101,-71,-73,-101,-53,-92,-75,-62,-65,-66,-69,-52,-74,-97,-101,-101,-101,-101,-70,-91,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'AND':([25,37,40,42,44,45,46,47,48,49,50,59,76,78,89,92,93,96,97,104,113,117,120,125,126,127,128,143,145,146,150,161,162,163,164,183,186,188,189,190,191,202,],[-72,73,-101,-75,-101,-101,-71,-73,-101,-53,-92,-75,-82,-84,-62,-65,-66,-69,-52,-74,-101,-101,-97,-101,-101,-101,-101,-70,73,-91,-83,-101,-101,-101,-101,-98,-100,-63,-64,-67,-68,-99,]),'OR':([25,33,37,40,42,44,45,46,47,48,49,50,59,72,74,76,78,89,92,93,96,97,104,110,113,117,120,125,126,127,128,142,143,145,146,150,161,162,163,164,181,183,186,188,189,190,191,202,],[-72,67,-101,-101,-75,-101,-101,-71,-73,-101,-53,-92,-75,-79,-81,-82,-84,-62,-65,-66,-69,-52,-74,-101,-101,-101,-97,-101,-101,-101,-101,67,-70,-101,-91,-83,-101,-101,-101,-101,-80,-98,-100,-63,-64,-67,-68,-99,]),')':([25,27,28,29,30,31,33,35,37,40,42,44,45,46,47,48,49,50,58,59,65,66,68,70,72,74,75,76,78,89,92,93,96,97,101,103,104,108,109,110,111,112,113,114,115,116,117,120,125,126,127,128,132,133,134,136,137,138,139,142,143,144,145,146,147,149,150,151,153,154,155,156,157,158,159,160,161,162,163,164,171,173,176,179,180,181,182,183,184,185,186,187,188,189,190,191,193,196,201,202,205,207,],[-72,-55,-56,-57,-58,-59,-101,-60,-101,-101,-75,-101,-101,-71,-73,-101,-53,-92,104,-75,109,-76,-78,-3,-79,-81,-101,-82,-84,-62,-65,-66,-69,-52,-101,-101,-74,141,-61,-101,-38,-101,-101,146,-101,-94,-101,-97,-101,-101,-101,-101,170,-101,-27,-105,175,-108,-101,-101,-70,180,-101,-91,-93,-96,-83,183,186,-101,-4,-7,-8,-9,-10,-11,-101,-101,-101,-101,-26,-29,199,-77,-40,-80,-101,-98,202,-75,-100,-12,-63,-64,-67,-68,-101,-101,-95,-99,215,-28,]),',':([25,27,28,29,30,31,33,35,37,40,42,44,45,46,47,48,49,50,59,66,68,70,72,74,76,78,89,92,93,96,97,104,109,110,111,113,115,117,120,125,126,127,128,133,136,142,143,145,146,150,154,155,156,157,158,159,160,161,162,163,164,179,180,181,182,183,186,187,188,189,190,191,196,202,],[-72,-55,-56,-57,-58,-59,-101,-60,-101,-101,-75,-101,-101,-71,-73,-101,-53,-92,-75,-76,-78,-3,-79,-81,-82,-84,-62,-65,-66,-69,-52,-74,-61,-101,-38,-101,148,-101,-97,-101,-101,-101,-101,172,-105,-101,-70,-101,-91,-83,-101,-4,-7,-8,-9,-10,-11,-101,-101,-101,-101,-77,-40,-80,148,-98,-100,-12,-63,-64,-67,-68,172,-99,]),'=':([34,38,39,42,87,118,119,136,154,155,156,157,158,159,160,187,],[69,-5,-6,-43,-2,-41,-42,-105,-101,-4,-7,-8,-9,-10,-11,-12,]),'.':([41,42,59,],[85,86,86,]),'FOR_TO':([48,49,63,97,],[-101,-53,107,-52,]),'SKIP':([48,49,97,140,],[-101,-53,-52,177,]),'{':([48,49,97,100,130,131,168,169,170,175,192,199,200,203,204,215,217,],[-101,-53,-52,-101,-101,-102,195,-107,-21,198,-101,198,198,214,-103,-25,198,]),':':([52,88,98,99,],[-101,124,129,-106,]),'POP':([86,],[121,]),'PUSH':([86,],[122,]),'PEEK':([86,],[123,]),'INT_TYPE':([124,129,],[156,156,]),'FLOAT_TYPE':([124,129,],[157,157,]),'STRING_TYPE':([124,129,],[158,158,]),'BOOLEAN_TYPE':([124,129,],[159,159,]),'STACK':([124,129,],[160,160,]),'VOID':([129,],[166,]),'ELSE':([197,208,209,218,],[-101,217,-109,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'classes':([0,3,],[2,10,]),'class':([0,3,],[3,3,]),'empty':([0,2,3,6,7,11,13,33,37,40,44,45,48,52,62,75,100,101,102,103,110,112,113,115,117,125,126,127,128,130,133,139,142,145,154,161,162,163,164,182,192,193,195,196,197,198,214,219,],[4,8,4,14,8,55,14,68,74,78,92,96,97,99,106,116,131,134,136,138,143,116,143,149,143,143,143,143,143,169,173,138,68,74,136,92,92,96,96,149,204,134,8,173,209,14,14,223,]),'functions':([2,7,195,],[6,51,206,]),'function':([2,7,195,],[7,7,7,]),'statements':([6,13,198,214,],[12,56,210,219,]),'statement':([6,13,198,214,],[13,13,13,13,]),'if_block':([6,13,198,214,],[15,15,15,15,]),'while_block':([6,13,198,214,],[16,16,16,16,]),'for_block':([6,13,198,214,],[17,17,17,17,]),'print_stmt':([6,13,198,214,],[18,18,18,18,]),'expr':([6,13,198,214,],[19,19,19,19,]),'exp':([6,13,57,64,69,75,105,112,148,198,214,222,],[22,22,103,108,111,115,139,115,182,22,22,225,]),'number':([6,13,21,24,57,64,67,69,73,75,77,90,91,94,95,105,107,112,148,177,198,214,222,],[25,25,25,63,25,25,25,25,25,25,25,25,25,25,25,25,140,25,25,200,25,25,25,]),'read':([6,13,57,64,69,75,105,112,148,198,214,222,],[27,27,27,27,27,27,27,27,27,27,27,27,]),'math_or':([6,13,21,57,64,69,75,105,112,148,198,214,222,],[28,28,58,28,28,28,28,28,28,28,28,28,28,]),'assign':([6,13,57,64,69,75,105,112,148,198,214,222,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'string':([6,13,57,64,69,75,105,112,148,198,214,222,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'new':([6,13,57,64,69,75,105,112,148,198,214,222,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'math_and':([6,13,21,57,64,67,69,75,105,112,148,198,214,222,],[33,33,33,33,33,110,33,33,33,33,33,33,33,33,]),'var':([6,13,57,64,69,75,105,112,148,198,214,222,],[34,34,34,34,34,34,34,34,34,34,34,34,]),'math_comp':([6,13,21,57,64,67,69,73,75,105,112,148,198,214,222,],[37,37,37,37,37,37,37,113,37,37,37,37,37,37,37,]),'prop':([6,13,21,57,64,67,69,73,75,77,90,91,94,95,105,112,148,198,214,222,],[38,38,60,38,38,60,38,60,38,60,60,60,60,60,38,38,38,38,38,38,]),'declaration':([6,13,57,64,69,75,105,112,148,198,214,222,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'math_exp':([6,13,21,57,64,67,69,73,75,77,105,112,148,198,214,222,],[40,40,40,40,40,40,40,40,40,117,40,40,40,40,40,40,]),'term':([6,13,21,57,64,67,69,73,75,77,90,91,105,112,148,198,214,222,],[44,44,44,44,44,44,44,44,44,44,125,126,44,44,44,44,44,44,]),'factor':([6,13,21,57,64,67,69,73,75,77,90,91,94,95,105,112,148,198,214,222,],[45,45,45,45,45,45,45,45,45,45,45,45,127,128,45,45,45,45,45,45,]),'id':([6,13,21,57,64,67,69,73,75,77,90,91,94,95,105,112,148,152,198,214,222,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,184,46,46,46,]),'call':([6,13,21,57,64,67,69,73,75,77,90,91,94,95,105,112,148,198,214,222,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'stack_call':([6,13,21,57,64,67,69,73,75,77,90,91,94,95,105,112,148,198,214,222,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'inheritance':([11,],[53,]),'math_or_alt':([33,142,],[66,179,]),'constructor_call':([36,],[70,]),'math_and_alt':([37,145,],[72,181,]),'math_comp_alt':([40,],[76,]),'comparison_op':([40,],[77,]),'attr':([43,101,172,193,],[87,133,196,133,]),'math_exp_alt':([44,161,162,],[89,188,189,]),'term_alt':([45,163,164,],[93,190,191,]),'neg_lookup':([52,],[98,]),'class_attribute':([53,],[100,]),'leave_breadcrumb':([62,],[105,]),'args':([75,112,],[114,144,]),'stack_method':([86,],[120,]),'scope_class':([100,],[130,]),'attrs':([101,193,],[132,205,]),'check_class':([102,154,],[135,187,]),'exp_evaluation':([103,139,],[137,176,]),'new_quad':([110,113,117,125,126,127,128,],[142,145,150,161,162,163,164,]),'args_aux':([115,182,],[147,201,]),'type':([124,129,],[155,167,]),'return_type':([129,],[165,]),'store_attributes':([130,],[168,]),'attrs_alt':([133,196,],[171,207,]),'params':([165,],[192,]),'class_block':([168,],[194,]),'block':([175,199,200,217,],[197,211,212,220,]),'scope_function':([192,],[203,]),'after_if_block':([197,],[208,]),'func_block':([203,],[213,]),'return':([219,],[221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions statements','program',3,'p_program','grammar.py',8),
  ('declaration -> $ attr','declaration',2,'p_declaration','grammar.py',26),
  ('new -> NEW constructor_call','new',2,'p_new','grammar.py',31),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',36),
  ('var -> prop','var',1,'p_var','grammar.py',42),
  ('var -> declaration','var',1,'p_var','grammar.py',43),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',48),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',49),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',50),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',51),
  ('type -> STACK','type',1,'p_type','grammar.py',52),
  ('type -> ID check_class','type',2,'p_type','grammar.py',53),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',58),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',59),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',64),
  ('classes -> empty','classes',1,'p_classes','grammar.py',65),
  ('class -> @ ID inheritance class_attribute scope_class store_attributes class_block','class',7,'p_class','grammar.py',69),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',75),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',76),
  ('class_block -> { functions }','class_block',3,'p_class_block','grammar.py',84),
  ('class_attribute -> ( attrs )','class_attribute',3,'p_class_attribute','grammar.py',89),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',94),
  ('functions -> empty','functions',1,'p_functions','grammar.py',95),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',99),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',105),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',110),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',111),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',119),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',120),
  ('func_block -> { statements return }','func_block',4,'p_func_block','grammar.py',128),
  ('statements -> statement statements','statements',2,'p_statements','grammar.py',132),
  ('statements -> empty','statements',1,'p_statements','grammar.py',133),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',137),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',138),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',139),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',140),
  ('statement -> expr','statement',1,'p_statement','grammar.py',141),
  ('assign -> var = exp','assign',3,'p_assign','grammar.py',145),
  ('init -> <empty>','init',0,'p_init','grammar.py',156),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',160),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',170),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',171),
  ('prop -> ID','prop',1,'p_prop','grammar.py',172),
  ('if_block -> IF ( exp exp_evaluation ) block','if_block',6,'p_if_block','grammar.py',194),
  ('if_block -> IF ( exp exp_evaluation ) block after_if_block ELSE block','if_block',9,'p_if_block','grammar.py',195),
  ('while_block -> WHILE ( leave_breadcrumb exp exp_evaluation ) block','while_block',7,'p_while_block','grammar.py',202),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',208),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',212),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',218),
  ('return -> empty','return',1,'p_return','grammar.py',219),
  ('block -> { statements }','block',3,'p_block','grammar.py',230),
  ('number -> FLOAT empty','number',2,'p_number','grammar.py',234),
  ('number -> INT','number',1,'p_number','grammar.py',235),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',247),
  ('exp -> read','exp',1,'p_exp','grammar.py',253),
  ('exp -> math_or','exp',1,'p_exp','grammar.py',254),
  ('exp -> assign','exp',1,'p_exp','grammar.py',255),
  ('exp -> string','exp',1,'p_exp','grammar.py',256),
  ('exp -> new','exp',1,'p_exp','grammar.py',257),
  ('string -> STRING','string',1,'p_string','grammar.py',262),
  ('read -> READ ( )','read',3,'p_read','grammar.py',269),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',274),
  ('math_exp_alt -> + term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',281),
  ('math_exp_alt -> - term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',282),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',283),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',290),
  ('term_alt -> * factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',297),
  ('term_alt -> / factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',298),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',299),
  ('new_quad -> empty','new_quad',1,'p_new_quad','grammar.py',305),
  ('factor -> id','factor',1,'p_factor','grammar.py',317),
  ('factor -> number','factor',1,'p_factor','grammar.py',318),
  ('factor -> call','factor',1,'p_factor','grammar.py',319),
  ('factor -> ( math_or )','factor',3,'p_factor','grammar.py',320),
  ('id -> ID','id',1,'p_id','grammar.py',328),
  ('math_or -> math_and math_or_alt','math_or',2,'p_math_or','grammar.py',335),
  ('math_or_alt -> OR math_and new_quad math_or_alt','math_or_alt',4,'p_math_or_alt','grammar.py',343),
  ('math_or_alt -> empty','math_or_alt',1,'p_math_or_alt','grammar.py',344),
  ('math_and -> math_comp math_and_alt','math_and',2,'p_math_and','grammar.py',350),
  ('math_and_alt -> AND math_comp new_quad math_and_alt','math_and_alt',4,'p_math_and_alt','grammar.py',357),
  ('math_and_alt -> empty','math_and_alt',1,'p_math_and_alt','grammar.py',358),
  ('math_comp -> math_exp math_comp_alt','math_comp',2,'p_math_comp','grammar.py',364),
  ('math_comp_alt -> comparison_op math_exp new_quad','math_comp_alt',3,'p_math_comp_alt','grammar.py',371),
  ('math_comp_alt -> empty','math_comp_alt',1,'p_math_comp_alt','grammar.py',372),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',378),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',379),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',380),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',381),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','grammar.py',382),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','grammar.py',383),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',388),
  ('call -> stack_call','call',1,'p_call','grammar.py',389),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',395),
  ('args -> empty','args',1,'p_args','grammar.py',396),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',404),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',405),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',413),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',419),
  ('stack_method -> PUSH ( id )','stack_method',4,'p_stack_method','grammar.py',420),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',421),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',425),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',435),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',444),
  ('scope_constructor -> empty','scope_constructor',1,'p_scope_constructor','grammar.py',453),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',461),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',467),
  ('store_attributes -> empty','store_attributes',1,'p_store_attributes','grammar.py',474),
  ('exp_evaluation -> empty','exp_evaluation',1,'p_exp_evaluation','grammar.py',482),
  ('after_if_block -> empty','after_if_block',1,'p_after_if_block','grammar.py',487),
  ('leave_breadcrumb -> empty','leave_breadcrumb',1,'p_leave_breadcrumb','grammar.py',493),
]
