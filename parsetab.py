
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FLOAT FLOAT_TYPE FOR FOR_TO GE ID IF INT INT_TYPE LE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS VOID WHILEprogram : classes functions fill_goto statements\n    fill_goto : empty\n    classes : class classes\n               | empty\n    class : '@' ID inheritance params scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    class_block : '{' functions '}'\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    return_type : VOID\n                   | type\n    func_block : '{' statements return '}'\n    return : RETURN exp ';'\n              | empty\n    statements : statement statements\n                  | empty\n    statement : declaration ';'\n                 | print_stmt\n                 | if_block\n                 | while_block\n                 | for_block\n                 | expr\n    declaration : '$' attr \n    attr : ID ':' type\n            | ID ':' stack_type\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | ID check_class\n    stack_type : STACK '(' type ')'\n    print_stmt : PRINT '(' exp ')' ';'\n    expr : exp ';'\n    exp : read \n           | math_or \n           | assign\n           | string\n           | new\n           | stack_call\n    read : READ '(' ')'\n    assign : var '=' exp\n    string : STRING\n    var : prop \n           | declaration\n    new : NEW constructor_call\n    constructor_call : ID '(' args ')'\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' exp ')'\n                    | PEEK '(' ')'\n    math_or : math_and math_or_alt\n    math_or_alt : OR math_and new_quad math_or_alt\n                   | empty\n    math_and : math_comp math_and_alt\n    math_and_alt : AND math_comp new_quad math_and_alt\n                    | empty\n    math_comp : math_exp math_comp_alt\n    math_comp_alt : comparison_op math_exp new_quad\n                     | empty\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n                     | LE\n                     | GE\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term new_quad math_exp_alt\n                    | '-' term new_quad math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor new_quad term_alt \n                | '/' factor new_quad term_alt\n                | empty\n    factor : prop\n              | number\n              | call \n              | '(' math_or ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    number : FLOAT empty\n              | INT\n    call : prop '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    if_block : IF '(' exp exp_evaluation  ')' block \n                | IF '(' exp exp_evaluation ')' block after_if_block ELSE block\n    while_block : WHILE '(' leave_breadcrumb exp exp_evaluation ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    block : '{' statements '}'\n    empty :new_quad : empty\n    scope_class : empty\n    scope_function : empty\n    check_class : empty\n    neg_lookup : empty\n    exp_evaluation : empty\n    after_if_block : empty\n    leave_breadcrumb : empty\n    "
    
_lr_action_items = {'PEEK':([104,],[139,]),'RETURN':([23,39,43,47,53,54,56,90,103,111,189,210,212,214,215,219,220,225,],[-28,-100,-23,-25,-29,-26,-27,-22,-24,-40,-39,-95,-100,-97,-98,223,-99,-96,]),'FLOAT_TYPE':([112,114,184,],[148,148,148,]),'READ':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,72,75,76,94,103,105,111,118,122,123,124,167,177,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,26,-2,-28,26,-25,-29,-26,-27,-100,26,26,26,-24,26,-40,-5,26,-108,26,26,26,-13,-39,26,-95,-16,26,-97,-98,-99,26,-96,-19,]),'VOID':([112,],[149,]),'STRING_TYPE':([112,114,184,],[151,151,151,]),'NE':([24,27,33,34,38,48,50,52,58,70,88,89,99,102,106,109,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,200,201,],[-100,-82,-81,79,-83,-100,-87,-100,-89,-88,-81,-87,-77,-80,-73,-76,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,-100,-100,-78,-79,-75,-74,]),'WHILE':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,103,111,118,186,189,209,210,211,212,214,215,220,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,28,-2,-28,28,-25,-29,-26,-27,-24,-40,-5,-13,-39,28,-95,-16,28,-97,-98,-99,-96,-19,]),'POP':([104,],[141,]),'INT_TYPE':([112,114,184,],[152,152,152,]),'PRINT':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,103,111,118,186,189,209,210,211,212,214,215,220,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,31,-2,-28,31,-25,-29,-26,-27,-24,-40,-5,-13,-39,31,-95,-16,31,-97,-98,-99,-96,-19,]),'NEW':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,72,75,76,94,103,105,111,118,122,123,124,167,177,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,30,-2,-28,30,-25,-29,-26,-27,-100,30,30,30,-24,30,-40,-5,30,-108,30,30,30,-13,-39,30,-95,-16,30,-97,-98,-99,30,-96,-19,]),'#':([0,3,4,5,7,11,118,119,186,211,226,],[-100,9,-100,-4,9,-3,-5,9,-13,-16,-19,]),'LE':([24,27,33,34,38,48,50,52,58,70,88,89,99,102,106,109,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,200,201,],[-100,-82,-81,78,-83,-100,-87,-100,-89,-88,-81,-87,-77,-80,-73,-76,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,-100,-100,-78,-79,-75,-74,]),'$':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,72,75,76,94,103,105,111,118,122,123,124,167,177,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,35,-2,-28,35,-25,-29,-26,-27,-100,35,35,35,-24,35,-40,-5,35,-108,35,35,35,-13,-39,35,-95,-16,35,-97,-98,-99,35,-96,-19,]),')':([19,22,24,27,29,32,33,34,37,38,40,42,44,45,48,50,52,58,59,62,64,65,68,70,71,73,76,80,84,87,88,89,92,93,95,96,99,102,106,109,116,117,121,124,126,127,128,129,130,131,133,134,135,137,138,140,143,144,145,146,147,148,150,151,152,155,156,158,159,161,162,164,165,166,168,169,170,171,173,174,175,176,178,179,180,181,183,185,187,188,190,191,192,194,195,196,197,198,200,201,204,206,208,213,],[-100,-42,-100,-82,-49,-46,-81,-100,-41,-83,-100,-45,-100,-44,-100,-87,-100,-89,-43,113,-10,-100,-104,-88,121,-52,-100,-64,-66,131,-81,-87,-61,-63,-58,-60,-77,-80,-73,-76,-12,-9,-47,-100,163,-92,164,-100,-100,-84,-100,-48,-100,-100,-100,-54,-86,-100,-100,-100,-85,-34,-36,-35,-33,-100,-32,-31,-100,-100,188,-90,-91,-94,-65,-101,-100,-100,-100,-100,196,197,-106,199,-100,-100,-37,-11,205,-53,-100,-62,-59,-78,-79,-57,-55,208,-75,-74,213,-93,-56,-38,]),'(':([0,3,4,5,6,7,8,10,11,12,14,15,16,17,23,26,28,31,33,36,39,47,50,51,53,54,56,68,72,74,75,76,77,78,79,81,82,83,85,88,89,91,94,97,100,101,103,105,107,108,111,118,120,122,123,124,139,141,142,143,147,148,149,150,151,152,153,154,155,157,167,177,183,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-100,-15,-3,19,-7,-14,36,-2,-28,71,72,75,76,36,36,-25,-87,105,-29,-26,-27,-104,-100,124,36,36,36,-71,-70,-72,-69,-67,-68,76,-87,36,36,36,36,36,-24,36,36,36,-40,-5,-6,36,-108,36,175,176,177,-86,-85,-34,-17,-36,-35,-33,19,-18,-100,184,36,36,-37,-13,-39,36,-95,-16,36,-97,-98,-99,36,-96,-19,]),'+':([24,27,33,38,48,50,52,58,70,88,89,99,102,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,],[-100,-82,-81,-83,-100,-87,108,-89,-88,-81,-87,-77,-80,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,108,108,-78,-79,]),'*':([24,27,33,38,48,50,58,70,88,89,131,137,138,143,147,164,169,173,174,],[-100,-82,-81,-83,100,-87,-89,-88,-81,-87,-84,-100,-100,-86,-85,-90,-101,100,100,]),'-':([24,27,33,38,48,50,52,58,70,88,89,99,102,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,],[-100,-82,-81,-83,-100,-87,107,-89,-88,-81,-87,-77,-80,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,107,107,-78,-79,]),',':([22,24,27,29,32,33,34,37,38,40,42,44,45,48,50,52,58,59,65,68,70,73,80,84,88,89,92,93,95,96,99,102,106,109,121,129,130,131,133,134,135,137,138,140,143,145,146,147,148,150,151,152,155,156,158,159,164,168,169,170,171,173,174,180,181,183,188,190,191,192,194,195,196,197,200,201,208,213,],[-42,-100,-82,-49,-46,-81,-100,-41,-83,-100,-45,-100,-44,-100,-87,-100,-89,-43,115,-104,-88,-52,-64,-66,-81,-87,-61,-63,-58,-60,-77,-80,-73,-76,-47,167,-100,-84,-100,-48,-100,-100,-100,-54,-86,-100,-100,-85,-34,-36,-35,-33,-100,-32,-31,115,-90,-65,-101,-100,-100,-100,-100,-100,-100,-37,-53,167,-62,-59,-78,-79,-57,-55,-75,-74,-56,-38,]),'/':([24,27,33,38,48,50,58,70,88,89,131,137,138,143,147,164,169,173,174,],[-100,-82,-81,-83,101,-87,-89,-88,-81,-87,-84,-100,-100,-86,-85,-90,-101,101,101,]),'.':([50,55,89,],[104,110,132,]),'PUSH':([104,],[142,]),';':([22,24,27,29,32,33,34,37,38,40,42,44,45,48,49,50,52,57,58,59,68,70,73,80,84,86,88,89,92,93,95,96,99,102,106,109,121,130,131,133,134,135,137,138,140,143,145,146,147,148,150,151,152,155,156,158,163,164,168,169,170,171,173,174,180,181,183,188,191,192,194,195,196,197,200,201,208,213,227,],[-42,-100,-82,-49,-46,-81,-100,-41,-83,-100,-45,-100,-44,-100,103,-87,-100,111,-89,-43,-104,-88,-52,-64,-66,-30,-81,-87,-61,-63,-58,-60,-77,-80,-73,-76,-47,-100,-84,-100,-48,-100,-100,-100,-54,-86,-100,-100,-85,-34,-36,-35,-33,-100,-32,-31,189,-90,-65,-101,-100,-100,-100,-100,-100,-100,-37,-53,-62,-59,-78,-79,-57,-55,-75,-74,-56,-38,228,]),':':([18,60,61,63,],[-100,112,-105,114,]),'=':([33,41,49,50,68,86,125,143,147,148,150,151,152,155,156,158,183,213,],[-50,94,-51,-87,-104,-30,-51,-86,-85,-34,-36,-35,-33,-100,-32,-31,-37,-38,]),'<':([6,24,27,33,34,38,48,50,52,58,70,88,89,99,102,106,109,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,200,201,],[13,-100,-82,-81,83,-83,-100,-87,-100,-89,-88,-81,-87,-77,-80,-73,-76,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,-100,-100,-78,-79,-75,-74,]),'$end':([0,1,3,4,5,7,8,10,11,15,16,17,23,25,39,43,47,53,54,56,90,103,111,118,186,189,210,211,214,215,220,225,226,],[-100,0,-100,-100,-4,-100,-100,-15,-3,-14,-100,-2,-28,-1,-100,-23,-25,-29,-26,-27,-22,-24,-40,-5,-13,-39,-95,-16,-97,-98,-99,-96,-19,]),'@':([0,4,118,186,],[2,2,-5,-13,]),'STRING':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,72,75,76,94,103,105,111,118,122,123,124,167,177,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,29,-2,-28,29,-25,-29,-26,-27,-100,29,29,29,-24,29,-40,-5,29,-108,29,29,29,-13,-39,29,-95,-16,29,-97,-98,-99,29,-96,-19,]),'FOR':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,103,111,118,186,189,209,210,211,212,214,215,220,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,46,-2,-28,46,-25,-29,-26,-27,-24,-40,-5,-13,-39,46,-95,-16,46,-97,-98,-99,-96,-19,]),'SKIP':([24,58,70,172,],[-100,-89,-88,193,]),'ELSE':([210,217,218,220,],[-100,221,-107,-99,]),'GE':([24,27,33,34,38,48,50,52,58,70,88,89,99,102,106,109,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,200,201,],[-100,-82,-81,81,-83,-100,-87,-100,-89,-88,-81,-87,-77,-80,-73,-76,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,-100,-100,-78,-79,-75,-74,]),'EQ':([24,27,33,34,38,48,50,52,58,70,88,89,99,102,106,109,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,200,201,],[-100,-82,-81,82,-83,-100,-87,-100,-89,-88,-81,-87,-77,-80,-73,-76,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,-100,-100,-78,-79,-75,-74,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,19,23,30,35,36,39,47,53,54,56,72,75,76,77,78,79,81,82,83,85,91,94,97,100,101,103,104,105,107,108,110,111,112,114,115,118,122,123,124,132,167,177,184,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,6,-100,-100,-4,-100,-100,18,-15,-3,21,-14,50,-2,63,-28,74,63,89,50,-25,-29,-26,-27,-100,50,50,89,-71,-70,-72,-69,-67,-68,89,50,89,89,89,-24,143,50,89,89,147,-40,155,155,63,-5,50,-108,50,143,50,50,155,-13,-39,50,-95,-16,50,-97,-98,-99,50,-96,-19,]),'IF':([0,3,4,5,7,8,10,11,15,16,17,23,39,47,53,54,56,103,111,118,186,189,209,210,211,212,214,215,220,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,51,-2,-28,51,-25,-29,-26,-27,-24,-40,-5,-13,-39,51,-95,-16,51,-97,-98,-99,-96,-19,]),'AND':([24,27,33,34,38,40,48,50,52,58,70,80,84,88,89,99,102,106,109,130,131,133,137,138,143,145,146,147,164,168,169,170,173,174,180,181,194,195,200,201,],[-100,-82,-81,-100,-83,91,-100,-87,-100,-89,-88,-64,-66,-81,-87,-77,-80,-73,-76,-100,-84,-100,-100,-100,-86,-100,-100,-85,-90,-65,-101,91,-100,-100,-100,-100,-78,-79,-75,-74,]),'FOR_TO':([24,58,70,98,],[-100,-89,-88,136,]),'BOOLEAN_TYPE':([112,114,184,],[150,150,150,]),'THIS':([0,3,4,5,7,8,10,11,15,16,17,23,36,39,47,53,54,56,72,75,76,77,78,79,81,82,83,85,91,94,97,100,101,103,105,107,108,111,118,122,123,124,167,177,186,189,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,55,-2,-28,55,55,-25,-29,-26,-27,-100,55,55,55,-71,-70,-72,-69,-67,-68,55,55,55,55,55,-24,55,55,55,-40,-5,55,-108,55,55,55,-13,-39,55,-95,-16,55,-97,-98,-99,55,-96,-19,]),'FLOAT':([0,3,4,5,7,8,10,11,15,16,17,23,36,39,46,47,53,54,56,72,75,76,77,78,79,81,82,83,85,91,94,97,100,101,103,105,107,108,111,118,122,123,124,136,167,177,186,189,193,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,24,-2,-28,24,24,24,-25,-29,-26,-27,-100,24,24,24,-71,-70,-72,-69,-67,-68,24,24,24,24,24,-24,24,24,24,-40,-5,24,-108,24,24,24,24,-13,-39,24,24,-95,-16,24,-97,-98,-99,24,-96,-19,]),'STACK':([114,],[157,]),'INT':([0,3,4,5,7,8,10,11,15,16,17,23,36,39,46,47,53,54,56,72,75,76,77,78,79,81,82,83,85,91,94,97,100,101,103,105,107,108,111,118,122,123,124,136,167,177,186,189,193,209,210,211,212,214,215,220,223,225,226,],[-100,-100,-100,-4,-100,-100,-15,-3,-14,58,-2,-28,58,58,58,-25,-29,-26,-27,-100,58,58,58,-71,-70,-72,-69,-67,-68,58,58,58,58,58,-24,58,58,58,-40,-5,58,-108,58,58,58,58,-13,-39,58,58,-95,-16,58,-97,-98,-99,58,-96,-19,]),'{':([20,24,58,66,67,70,113,182,199,202,203,205,207,221,],[-100,-100,-89,119,-102,-88,-8,-100,209,212,-103,209,209,209,]),'>':([21,24,27,33,34,38,48,50,52,58,68,69,70,88,89,99,102,106,109,131,137,138,143,145,146,147,164,169,173,174,180,181,194,195,200,201,],[-100,-100,-82,-81,85,-83,-100,-87,-100,-89,-104,120,-88,-81,-87,-77,-80,-73,-76,-84,-100,-100,-86,-100,-100,-85,-90,-101,-100,-100,-100,-100,-78,-79,-75,-74,]),'}':([7,10,15,23,39,43,47,53,54,56,90,103,111,119,160,189,209,210,211,212,214,215,216,219,220,222,224,225,226,228,],[-100,-15,-14,-28,-100,-23,-25,-29,-26,-27,-22,-24,-40,-100,186,-39,-100,-95,-16,-100,-97,-98,220,-100,-99,226,-21,-96,-19,-20,]),'OR':([24,27,33,34,38,40,44,48,50,52,58,70,80,84,88,89,92,93,99,102,106,109,130,131,133,135,137,138,143,145,146,147,164,168,169,170,171,173,174,180,181,191,194,195,200,201,],[-100,-82,-81,-100,-83,-100,97,-100,-87,-100,-89,-88,-64,-66,-81,-87,-61,-63,-77,-80,-73,-76,-100,-84,-100,-100,-100,-100,-86,-100,-100,-85,-90,-65,-101,-100,97,-100,-100,-100,-100,-62,-78,-79,-75,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'math_or':([16,36,39,75,76,94,105,122,124,167,177,209,212,223,],[22,87,22,22,22,22,22,22,22,22,22,22,22,22,]),'for_block':([16,39,209,212,],[23,23,23,23,]),'statements':([16,39,209,212,],[25,90,216,219,]),'attrs_alt':([65,159,],[117,185,]),'stack_method':([104,],[140,]),'leave_breadcrumb':([72,],[122,]),'number':([16,36,39,46,75,76,77,91,94,97,100,101,105,107,108,122,124,136,167,177,193,209,212,223,],[27,27,27,98,27,27,27,27,27,27,27,27,27,27,27,27,27,172,27,27,207,27,27,27,]),'call':([16,36,39,75,76,77,91,94,97,100,101,105,107,108,122,124,167,177,209,212,223,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'return':([219,],[222,]),'attrs':([19,],[62,]),'constructor_call':([30,],[73,]),'stack_call':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[32,32,32,32,32,32,32,32,32,32,32,32,32,]),'scope_function':([182,],[202,]),'math_or_alt':([44,171,],[95,192,]),'functions':([3,7,119,],[8,15,160,]),'math_exp':([16,36,39,75,76,77,91,94,97,105,122,124,167,177,209,212,223,],[34,34,34,34,34,130,34,34,34,34,34,34,34,34,34,34,34,]),'after_if_block':([210,],[217,]),'func_block':([202,],[211,]),'inheritance':([6,],[12,]),'comparison_op':([34,],[77,]),'prop':([16,36,39,75,76,77,91,94,97,100,101,105,107,108,122,124,167,177,209,212,223,],[33,88,33,33,33,88,88,33,88,88,88,33,88,88,33,33,33,33,33,33,33,]),'read':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[37,37,37,37,37,37,37,37,37,37,37,37,37,]),'program':([0,],[1,]),'params':([12,153,],[20,182,]),'neg_lookup':([18,],[60,]),'statement':([16,39,209,212,],[39,39,39,39,]),'factor':([16,36,39,75,76,77,91,94,97,100,101,105,107,108,122,124,167,177,209,212,223,],[48,48,48,48,48,48,48,48,48,137,138,48,48,48,48,48,48,48,48,48,48,]),'var':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'new':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[42,42,42,42,42,42,42,42,42,42,42,42,42,]),'type':([112,114,184,],[154,158,204,]),'empty':([0,3,4,6,7,8,16,18,19,20,21,24,34,39,40,44,48,52,65,72,76,119,124,129,130,133,135,137,138,144,145,146,155,159,161,170,171,173,174,180,181,182,190,209,210,212,219,],[5,10,5,14,10,17,43,61,64,67,68,70,84,43,93,96,102,109,116,123,127,10,127,166,169,169,169,169,169,178,169,169,68,116,178,93,96,102,102,109,109,203,166,43,218,43,224,]),'function':([3,7,119,],[7,7,7,]),'math_and':([16,36,39,75,76,94,97,105,122,124,167,177,209,212,223,],[44,44,44,44,44,44,135,44,44,44,44,44,44,44,44,]),'string':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[45,45,45,45,45,45,45,45,45,45,45,45,45,]),'print_stmt':([16,39,209,212,],[47,47,47,47,]),'math_comp':([16,36,39,75,76,91,94,97,105,122,124,167,177,209,212,223,],[40,40,40,40,40,133,40,40,40,40,40,40,40,40,40,40,]),'args':([76,124,],[128,162,]),'fill_goto':([8,],[16,]),'class_block':([66,],[118,]),'stack_type':([114,],[156,]),'math_comp_alt':([34,],[80,]),'scope_class':([20,],[66,]),'declaration':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[49,49,125,125,125,125,125,125,125,125,49,49,125,]),'new_quad':([130,133,135,137,138,145,146,],[168,170,171,173,174,180,181,]),'return_type':([112,],[153,]),'class':([0,4,],[4,4,]),'math_exp_alt':([52,180,181,],[106,200,201,]),'term':([16,36,39,75,76,77,91,94,97,105,107,108,122,124,167,177,209,212,223,],[52,52,52,52,52,52,52,52,52,52,145,146,52,52,52,52,52,52,52,]),'args_aux':([129,190,],[165,206,]),'attr':([19,35,115,],[65,86,159,]),'term_alt':([48,173,174,],[99,194,195,]),'expr':([16,39,209,212,],[53,53,53,53,]),'if_block':([16,39,209,212,],[54,54,54,54,]),'math_and_alt':([40,170,],[92,191,]),'while_block':([16,39,209,212,],[56,56,56,56,]),'classes':([0,4,],[3,11,]),'check_class':([21,155,],[69,183,]),'exp':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[57,57,126,129,134,144,161,129,190,198,57,57,227,]),'exp_evaluation':([144,161,],[179,187,]),'assign':([16,39,75,76,94,105,122,124,167,177,209,212,223,],[59,59,59,59,59,59,59,59,59,59,59,59,59,]),'block':([199,205,207,221,],[210,214,215,225,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions fill_goto statements','program',4,'p_program','grammar.py',8),
  ('fill_goto -> empty','fill_goto',1,'p_fill_goto','grammar.py',13),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',29),
  ('classes -> empty','classes',1,'p_classes','grammar.py',30),
  ('class -> @ ID inheritance params scope_class class_block','class',6,'p_class','grammar.py',35),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',40),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',41),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',49),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',54),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',55),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',63),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',64),
  ('class_block -> { functions }','class_block',3,'p_class_block','grammar.py',72),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',87),
  ('functions -> empty','functions',1,'p_functions','grammar.py',88),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',92),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',97),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',98),
  ('func_block -> { statements return }','func_block',4,'p_func_block','grammar.py',103),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',108),
  ('return -> empty','return',1,'p_return','grammar.py',109),
  ('statements -> statement statements','statements',2,'p_statements','grammar.py',127),
  ('statements -> empty','statements',1,'p_statements','grammar.py',128),
  ('statement -> declaration ;','statement',2,'p_statement','grammar.py',132),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',133),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',134),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',135),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',136),
  ('statement -> expr','statement',1,'p_statement','grammar.py',137),
  ('declaration -> $ attr','declaration',2,'p_declaration','grammar.py',141),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',146),
  ('attr -> ID : stack_type','attr',3,'p_attr','grammar.py',147),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',152),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',153),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',154),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',155),
  ('type -> ID check_class','type',2,'p_type','grammar.py',156),
  ('stack_type -> STACK ( type )','stack_type',4,'p_stack_type','grammar.py',161),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',166),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',184),
  ('exp -> read','exp',1,'p_exp','grammar.py',190),
  ('exp -> math_or','exp',1,'p_exp','grammar.py',191),
  ('exp -> assign','exp',1,'p_exp','grammar.py',192),
  ('exp -> string','exp',1,'p_exp','grammar.py',193),
  ('exp -> new','exp',1,'p_exp','grammar.py',194),
  ('exp -> stack_call','exp',1,'p_exp','grammar.py',195),
  ('read -> READ ( )','read',3,'p_read','grammar.py',200),
  ('assign -> var = exp','assign',3,'p_assign','grammar.py',205),
  ('string -> STRING','string',1,'p_string','grammar.py',212),
  ('var -> prop','var',1,'p_var','grammar.py',218),
  ('var -> declaration','var',1,'p_var','grammar.py',219),
  ('new -> NEW constructor_call','new',2,'p_new','grammar.py',224),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',229),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',237),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',245),
  ('stack_method -> PUSH ( exp )','stack_method',4,'p_stack_method','grammar.py',246),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',247),
  ('math_or -> math_and math_or_alt','math_or',2,'p_math_or','grammar.py',266),
  ('math_or_alt -> OR math_and new_quad math_or_alt','math_or_alt',4,'p_math_or_alt','grammar.py',273),
  ('math_or_alt -> empty','math_or_alt',1,'p_math_or_alt','grammar.py',274),
  ('math_and -> math_comp math_and_alt','math_and',2,'p_math_and','grammar.py',280),
  ('math_and_alt -> AND math_comp new_quad math_and_alt','math_and_alt',4,'p_math_and_alt','grammar.py',287),
  ('math_and_alt -> empty','math_and_alt',1,'p_math_and_alt','grammar.py',288),
  ('math_comp -> math_exp math_comp_alt','math_comp',2,'p_math_comp','grammar.py',294),
  ('math_comp_alt -> comparison_op math_exp new_quad','math_comp_alt',3,'p_math_comp_alt','grammar.py',301),
  ('math_comp_alt -> empty','math_comp_alt',1,'p_math_comp_alt','grammar.py',302),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',308),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',309),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',310),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',311),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','grammar.py',312),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','grammar.py',313),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',329),
  ('math_exp_alt -> + term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',336),
  ('math_exp_alt -> - term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',337),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',338),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',344),
  ('term_alt -> * factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',351),
  ('term_alt -> / factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',352),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',353),
  ('factor -> prop','factor',1,'p_factor','grammar.py',359),
  ('factor -> number','factor',1,'p_factor','grammar.py',360),
  ('factor -> call','factor',1,'p_factor','grammar.py',361),
  ('factor -> ( math_or )','factor',3,'p_factor','grammar.py',362),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',370),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',371),
  ('prop -> ID','prop',1,'p_prop','grammar.py',372),
  ('number -> FLOAT empty','number',2,'p_number','grammar.py',389),
  ('number -> INT','number',1,'p_number','grammar.py',390),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',412),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',417),
  ('args -> empty','args',1,'p_args','grammar.py',418),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',426),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',427),
  ('if_block -> IF ( exp exp_evaluation ) block','if_block',6,'p_if_block','grammar.py',446),
  ('if_block -> IF ( exp exp_evaluation ) block after_if_block ELSE block','if_block',9,'p_if_block','grammar.py',447),
  ('while_block -> WHILE ( leave_breadcrumb exp exp_evaluation ) block','while_block',7,'p_while_block','grammar.py',452),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',457),
  ('block -> { statements }','block',3,'p_block','grammar.py',461),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',476),
  ('new_quad -> empty','new_quad',1,'p_new_quad','grammar.py',498),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',511),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',520),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',528),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',534),
  ('exp_evaluation -> empty','exp_evaluation',1,'p_exp_evaluation','grammar.py',543),
  ('after_if_block -> empty','after_if_block',1,'p_after_if_block','grammar.py',548),
  ('leave_breadcrumb -> empty','leave_breadcrumb',1,'p_leave_breadcrumb','grammar.py',554),
]
