
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FLOAT FLOAT_TYPE GE ID IF INT INT_TYPE LE NE NEW OR PEEK POP PRINT PUSH READ RETURN SIZE STACK STRING STRING_TYPE THIS VOID WHILEprogram : classes functions fill_goto statements\n    fill_goto : empty\n    classes : class classes\n               | empty\n    class : '@' ID inheritance params scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    class_block : '{' functions '}'\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    return_type : VOID\n                   | type\n    func_block : '{' statements return '}'\n    return : RETURN exp ';'\n              | empty\n    statements : statement statements\n                  | empty\n    statement : declaration ';'\n                 | print_stmt\n                 | if_block\n                 | while_block\n                 | expr\n    declaration : '$' attr \n    attr : ID ':' type\n            | ID ':' stack_type\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | ID check_class\n    stack_type : STACK '(' type ')'\n    print_stmt : PRINT '(' exp ')' ';'\n    expr : exp ';'\n    exp : read \n           | math_or \n           | assign\n           | string\n           | new\n           | stack_call\n    read : READ '(' ')'\n    assign : var '=' exp\n    string : STRING\n    var : prop \n           | declaration\n    new : NEW constructor_call\n    constructor_call : ID '(' args ')'\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' exp ')'\n                    | PEEK '(' ')'\n                    | SIZE '(' ')'\n    math_or : math_and math_or_alt\n    math_or_alt : OR math_and new_quad math_or_alt\n                   | empty\n    math_and : math_comp math_and_alt\n    math_and_alt : AND math_comp new_quad math_and_alt\n                    | empty\n    math_comp : math_exp math_comp_alt\n    math_comp_alt : comparison_op math_exp new_quad\n                     | empty\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n                     | LE\n                     | GE\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term new_quad math_exp_alt\n                    | '-' term new_quad math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor new_quad term_alt \n                | '/' factor new_quad term_alt\n                | empty\n    factor : prop\n              | number\n              | call \n              | '(' math_or ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    number : FLOAT empty\n              | INT\n    call : prop '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    if_block : IF '(' exp exp_evaluation  ')' block \n                | IF '(' exp exp_evaluation ')' block after_if_block ELSE block\n    while_block : WHILE '(' leave_breadcrumb exp exp_evaluation ')' block\n    block : '{' statements '}'\n    empty :new_quad : empty\n    scope_class : empty\n    scope_function : empty\n    check_class : empty\n    neg_lookup : empty\n    exp_evaluation : empty\n    after_if_block : empty\n    leave_breadcrumb : empty\n    "
    
_lr_action_items = {'PEEK':([101,],[135,]),'RETURN':([38,42,45,51,52,54,88,100,108,186,206,208,210,214,215,220,],[-99,-23,-25,-28,-26,-27,-22,-24,-39,-38,-95,-99,-97,218,-98,-96,]),'FLOAT_TYPE':([109,111,181,],[145,145,145,]),'READ':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,70,73,74,93,100,102,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,25,-2,25,-25,-28,-26,-27,-99,25,25,25,-24,25,-39,-5,25,-107,25,25,25,-13,-38,25,-95,-16,25,-97,-98,25,-96,-19,]),'VOID':([109,],[146,]),'STRING_TYPE':([109,111,181,],[148,148,148,]),'NE':([23,26,32,33,37,39,48,50,56,68,86,87,89,92,103,106,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,197,198,],[-99,-82,-81,77,-83,-99,-87,-99,-89,-88,-81,-87,-77,-80,-73,-76,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,-99,-99,-78,-79,-75,-74,]),'WHILE':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,100,108,115,183,186,205,206,207,208,210,215,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,27,-2,27,-25,-28,-26,-27,-24,-39,-5,-13,-38,27,-95,-16,27,-97,-98,-96,-19,]),'POP':([101,],[137,]),'INT_TYPE':([109,111,181,],[149,149,149,]),'PRINT':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,100,108,115,183,186,205,206,207,208,210,215,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,30,-2,30,-25,-28,-26,-27,-24,-39,-5,-13,-38,30,-95,-16,30,-97,-98,-96,-19,]),'NEW':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,70,73,74,93,100,102,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,29,-2,29,-25,-28,-26,-27,-99,29,29,29,-24,29,-39,-5,29,-107,29,29,29,-13,-38,29,-95,-16,29,-97,-98,29,-96,-19,]),'#':([0,3,4,5,7,11,115,116,183,207,221,],[-99,9,-99,-4,9,-3,-5,9,-13,-16,-19,]),'LE':([23,26,32,33,37,39,48,50,56,68,86,87,89,92,103,106,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,197,198,],[-99,-82,-81,76,-83,-99,-87,-99,-89,-88,-81,-87,-77,-80,-73,-76,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,-99,-99,-78,-79,-75,-74,]),'$':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,70,73,74,93,100,102,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,34,-2,34,-25,-28,-26,-27,-99,34,34,34,-24,34,-39,-5,34,-107,34,34,34,-13,-38,34,-95,-16,34,-97,-98,34,-96,-19,]),')':([19,22,23,26,28,31,32,33,36,37,39,41,43,44,46,48,50,56,57,60,62,63,66,68,69,71,74,78,82,85,86,87,89,92,94,95,98,99,103,106,113,114,118,121,123,124,125,126,127,128,130,131,132,133,134,136,139,141,142,143,144,145,147,148,149,152,153,155,156,158,159,161,162,163,165,166,167,168,169,170,171,172,174,175,176,177,178,180,182,184,185,187,188,189,190,191,192,193,194,195,197,198,201,203,204,209,],[-99,-41,-99,-82,-48,-45,-81,-99,-40,-83,-99,-44,-99,-43,-99,-87,-99,-89,-42,110,-10,-99,-103,-88,118,-51,-99,-64,-66,128,-81,-87,-77,-80,-58,-60,-61,-63,-73,-76,-12,-9,-46,-99,160,-92,161,-99,-99,-84,-99,-99,-47,-99,-99,-53,-86,-99,-99,-99,-85,-33,-35,-34,-32,-99,-31,-30,-99,-99,185,-90,-91,-94,-65,-100,-99,-99,-99,-99,192,193,195,-105,196,-99,-99,-36,-11,202,-52,-99,-78,-79,-59,-62,-56,-54,204,-57,-75,-74,209,-93,-55,-37,]),'(':([0,3,4,5,6,7,8,10,11,12,14,15,16,17,25,27,30,32,35,38,45,48,49,51,52,54,66,70,72,73,74,75,76,77,79,80,81,83,86,87,90,91,93,96,97,100,102,104,105,108,115,117,119,120,121,135,137,138,139,140,144,145,146,147,148,149,150,151,152,154,164,173,180,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-99,-15,-3,19,-7,-14,35,-2,69,70,73,74,35,35,-25,-87,102,-28,-26,-27,-103,-99,121,35,35,35,-71,-70,-72,-69,-67,-68,74,-87,35,35,35,35,35,-24,35,35,35,-39,-5,-6,35,-107,35,171,172,173,-86,174,-85,-33,-17,-35,-34,-32,19,-18,-99,181,35,35,-36,-13,-38,35,-95,-16,35,-97,-98,35,-96,-19,]),'+':([23,26,32,37,39,48,50,56,68,86,87,89,92,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,],[-99,-82,-81,-83,-99,-87,105,-89,-88,-81,-87,-77,-80,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,105,105,-78,-79,]),'*':([23,26,32,37,39,48,56,68,86,87,128,130,131,139,144,161,166,167,168,],[-99,-82,-81,-83,90,-87,-89,-88,-81,-87,-84,-99,-99,-86,-85,-90,-100,90,90,]),'-':([23,26,32,37,39,48,50,56,68,86,87,89,92,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,],[-99,-82,-81,-83,-99,-87,104,-89,-88,-81,-87,-77,-80,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,104,104,-78,-79,]),',':([22,23,26,28,31,32,33,36,37,39,41,43,44,46,48,50,56,57,63,66,68,71,78,82,86,87,89,92,94,95,98,99,103,106,118,126,127,128,130,131,132,133,134,136,139,142,143,144,145,147,148,149,152,153,155,156,161,165,166,167,168,169,170,177,178,180,185,187,188,189,190,191,192,193,195,197,198,204,209,],[-41,-99,-82,-48,-45,-81,-99,-40,-83,-99,-44,-99,-43,-99,-87,-99,-89,-42,112,-103,-88,-51,-64,-66,-81,-87,-77,-80,-58,-60,-61,-63,-73,-76,-46,164,-99,-84,-99,-99,-47,-99,-99,-53,-86,-99,-99,-85,-33,-35,-34,-32,-99,-31,-30,112,-90,-65,-100,-99,-99,-99,-99,-99,-99,-36,-52,164,-78,-79,-59,-62,-56,-54,-57,-75,-74,-55,-37,]),'/':([23,26,32,37,39,48,56,68,86,87,128,130,131,139,144,161,166,167,168,],[-99,-82,-81,-83,91,-87,-89,-88,-81,-87,-84,-99,-99,-86,-85,-90,-100,91,91,]),'.':([48,53,87,],[101,107,129,]),'PUSH':([101,],[138,]),';':([22,23,26,28,31,32,33,36,37,39,41,43,44,46,47,48,50,55,56,57,66,68,71,78,82,84,86,87,89,92,94,95,98,99,103,106,118,127,128,130,131,132,133,134,136,139,142,143,144,145,147,148,149,152,153,155,160,161,165,166,167,168,169,170,177,178,180,185,188,189,190,191,192,193,195,197,198,204,209,222,],[-41,-99,-82,-48,-45,-81,-99,-40,-83,-99,-44,-99,-43,-99,100,-87,-99,108,-89,-42,-103,-88,-51,-64,-66,-29,-81,-87,-77,-80,-58,-60,-61,-63,-73,-76,-46,-99,-84,-99,-99,-47,-99,-99,-53,-86,-99,-99,-85,-33,-35,-34,-32,-99,-31,-30,186,-90,-65,-100,-99,-99,-99,-99,-99,-99,-36,-52,-78,-79,-59,-62,-56,-54,-57,-75,-74,-55,-37,223,]),':':([18,58,59,61,],[-99,109,-104,111,]),'=':([32,40,47,48,66,84,122,139,144,145,147,148,149,152,153,155,180,209,],[-49,93,-50,-87,-103,-29,-50,-86,-85,-33,-35,-34,-32,-99,-31,-30,-36,-37,]),'<':([6,23,26,32,33,37,39,48,50,56,68,86,87,89,92,103,106,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,197,198,],[13,-99,-82,-81,81,-83,-99,-87,-99,-89,-88,-81,-87,-77,-80,-73,-76,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,-99,-99,-78,-79,-75,-74,]),'$end':([0,1,3,4,5,7,8,10,11,15,16,17,24,38,42,45,51,52,54,88,100,108,115,183,186,206,207,210,215,220,221,],[-99,0,-99,-99,-4,-99,-99,-15,-3,-14,-99,-2,-1,-99,-23,-25,-28,-26,-27,-22,-24,-39,-5,-13,-38,-95,-16,-97,-98,-96,-19,]),'@':([0,4,115,183,],[2,2,-5,-13,]),'STRING':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,70,73,74,93,100,102,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,28,-2,28,-25,-28,-26,-27,-99,28,28,28,-24,28,-39,-5,28,-107,28,28,28,-13,-38,28,-95,-16,28,-97,-98,28,-96,-19,]),'ELSE':([206,212,213,215,],[-99,216,-106,-98,]),'GE':([23,26,32,33,37,39,48,50,56,68,86,87,89,92,103,106,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,197,198,],[-99,-82,-81,79,-83,-99,-87,-99,-89,-88,-81,-87,-77,-80,-73,-76,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,-99,-99,-78,-79,-75,-74,]),'EQ':([23,26,32,33,37,39,48,50,56,68,86,87,89,92,103,106,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,197,198,],[-99,-82,-81,80,-83,-99,-87,-99,-89,-88,-81,-87,-77,-80,-73,-76,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,-99,-99,-78,-79,-75,-74,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,19,29,34,35,38,45,51,52,54,70,73,74,75,76,77,79,80,81,83,90,91,93,96,97,100,101,102,104,105,107,108,109,111,112,115,119,120,121,129,164,173,181,183,186,205,206,207,208,210,215,218,220,221,],[-99,6,-99,-99,-4,-99,-99,18,-15,-3,21,-14,48,-2,61,72,61,87,48,-25,-28,-26,-27,-99,48,48,87,-71,-70,-72,-69,-67,-68,87,87,48,87,87,-24,139,48,87,87,144,-39,152,152,61,-5,48,-107,48,139,48,48,152,-13,-38,48,-95,-16,48,-97,-98,48,-96,-19,]),'SIZE':([101,],[140,]),'IF':([0,3,4,5,7,8,10,11,15,16,17,38,45,51,52,54,100,108,115,183,186,205,206,207,208,210,215,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,49,-2,49,-25,-28,-26,-27,-24,-39,-5,-13,-38,49,-95,-16,49,-97,-98,-96,-19,]),'AND':([23,26,32,33,37,39,46,48,50,56,68,78,82,86,87,89,92,103,106,127,128,130,131,134,139,142,143,144,161,165,166,167,168,170,177,178,188,189,197,198,],[-99,-82,-81,-99,-83,-99,97,-87,-99,-89,-88,-64,-66,-81,-87,-77,-80,-73,-76,-99,-84,-99,-99,-99,-86,-99,-99,-85,-90,-65,-100,-99,-99,97,-99,-99,-78,-79,-75,-74,]),'BOOLEAN_TYPE':([109,111,181,],[147,147,147,]),'THIS':([0,3,4,5,7,8,10,11,15,16,17,35,38,45,51,52,54,70,73,74,75,76,77,79,80,81,83,90,91,93,96,97,100,102,104,105,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,53,-2,53,53,-25,-28,-26,-27,-99,53,53,53,-71,-70,-72,-69,-67,-68,53,53,53,53,53,-24,53,53,53,-39,-5,53,-107,53,53,53,-13,-38,53,-95,-16,53,-97,-98,53,-96,-19,]),'FLOAT':([0,3,4,5,7,8,10,11,15,16,17,35,38,45,51,52,54,70,73,74,75,76,77,79,80,81,83,90,91,93,96,97,100,102,104,105,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,23,-2,23,23,-25,-28,-26,-27,-99,23,23,23,-71,-70,-72,-69,-67,-68,23,23,23,23,23,-24,23,23,23,-39,-5,23,-107,23,23,23,-13,-38,23,-95,-16,23,-97,-98,23,-96,-19,]),'STACK':([111,],[154,]),'INT':([0,3,4,5,7,8,10,11,15,16,17,35,38,45,51,52,54,70,73,74,75,76,77,79,80,81,83,90,91,93,96,97,100,102,104,105,108,115,119,120,121,164,173,183,186,205,206,207,208,210,215,218,220,221,],[-99,-99,-99,-4,-99,-99,-15,-3,-14,56,-2,56,56,-25,-28,-26,-27,-99,56,56,56,-71,-70,-72,-69,-67,-68,56,56,56,56,56,-24,56,56,56,-39,-5,56,-107,56,56,56,-13,-38,56,-95,-16,56,-97,-98,56,-96,-19,]),'{':([20,64,65,110,179,196,199,200,202,216,],[-99,116,-101,-8,-99,205,208,-102,205,205,]),'>':([21,23,26,32,33,37,39,48,50,56,66,67,68,86,87,89,92,103,106,128,130,131,139,142,143,144,161,166,167,168,177,178,188,189,197,198,],[-99,-99,-82,-81,83,-83,-99,-87,-99,-89,-103,117,-88,-81,-87,-77,-80,-73,-76,-84,-99,-99,-86,-99,-99,-85,-90,-100,-99,-99,-99,-99,-78,-79,-75,-74,]),'}':([7,10,15,38,42,45,51,52,54,88,100,108,116,157,186,205,206,207,208,210,211,214,215,217,219,220,221,223,],[-99,-15,-14,-99,-23,-25,-28,-26,-27,-22,-24,-39,-99,183,-38,-99,-95,-16,-99,-97,215,-99,-98,221,-21,-96,-19,-20,]),'OR':([23,26,32,33,37,39,43,46,48,50,56,68,78,82,86,87,89,92,98,99,103,106,127,128,130,131,133,134,139,142,143,144,161,165,166,167,168,169,170,177,178,188,189,191,197,198,],[-99,-82,-81,-99,-83,-99,96,-99,-87,-99,-89,-88,-64,-66,-81,-87,-77,-80,-61,-63,-73,-76,-99,-84,-99,-99,-99,-99,-86,-99,-99,-85,-90,-65,-100,-99,-99,96,-99,-99,-99,-78,-79,-62,-75,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'math_or':([16,35,38,73,74,93,102,119,121,164,173,205,208,218,],[22,85,22,22,22,22,22,22,22,22,22,22,22,22,]),'statements':([16,38,205,208,],[24,88,211,214,]),'attrs_alt':([63,156,],[114,182,]),'stack_method':([101,],[136,]),'leave_breadcrumb':([70,],[119,]),'number':([16,35,38,73,74,75,90,91,93,96,97,102,104,105,119,121,164,173,205,208,218,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'call':([16,35,38,73,74,75,90,91,93,96,97,102,104,105,119,121,164,173,205,208,218,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'return':([214,],[217,]),'attrs':([19,],[60,]),'constructor_call':([29,],[71,]),'stack_call':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[31,31,31,31,31,31,31,31,31,31,31,31,31,]),'scope_function':([179,],[199,]),'math_or_alt':([43,169,],[94,190,]),'functions':([3,7,116,],[8,15,157,]),'math_exp':([16,35,38,73,74,75,93,96,97,102,119,121,164,173,205,208,218,],[33,33,33,33,33,127,33,33,33,33,33,33,33,33,33,33,33,]),'after_if_block':([206,],[212,]),'func_block':([199,],[207,]),'inheritance':([6,],[12,]),'comparison_op':([33,],[75,]),'prop':([16,35,38,73,74,75,90,91,93,96,97,102,104,105,119,121,164,173,205,208,218,],[32,86,32,32,32,86,86,86,32,86,86,32,86,86,32,32,32,32,32,32,32,]),'read':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[36,36,36,36,36,36,36,36,36,36,36,36,36,]),'program':([0,],[1,]),'params':([12,150,],[20,179,]),'neg_lookup':([18,],[58,]),'statement':([16,38,205,208,],[38,38,38,38,]),'factor':([16,35,38,73,74,75,90,91,93,96,97,102,104,105,119,121,164,173,205,208,218,],[39,39,39,39,39,39,130,131,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'var':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[40,40,40,40,40,40,40,40,40,40,40,40,40,]),'new':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'type':([109,111,181,],[151,155,201,]),'empty':([0,3,4,6,7,8,16,18,19,20,21,23,33,38,39,43,46,50,63,70,74,116,121,126,127,130,131,133,134,141,142,143,152,156,158,167,168,169,170,177,178,179,187,205,206,208,214,],[5,10,5,14,10,17,42,59,62,65,66,68,82,42,92,95,99,106,113,120,124,10,124,163,166,166,166,166,166,175,166,166,66,113,175,92,92,95,99,106,106,200,163,42,213,42,219,]),'function':([3,7,116,],[7,7,7,]),'math_and':([16,35,38,73,74,93,96,102,119,121,164,173,205,208,218,],[43,43,43,43,43,43,133,43,43,43,43,43,43,43,43,]),'string':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'print_stmt':([16,38,205,208,],[45,45,45,45,]),'math_comp':([16,35,38,73,74,93,96,97,102,119,121,164,173,205,208,218,],[46,46,46,46,46,46,46,134,46,46,46,46,46,46,46,46,]),'args':([74,121,],[125,159,]),'fill_goto':([8,],[16,]),'class_block':([64,],[115,]),'stack_type':([111,],[153,]),'math_comp_alt':([33,],[78,]),'scope_class':([20,],[64,]),'declaration':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[47,47,122,122,122,122,122,122,122,122,47,47,122,]),'new_quad':([127,130,131,133,134,142,143,],[165,167,168,169,170,177,178,]),'return_type':([109,],[150,]),'class':([0,4,],[4,4,]),'math_exp_alt':([50,177,178,],[103,197,198,]),'term':([16,35,38,73,74,75,93,96,97,102,104,105,119,121,164,173,205,208,218,],[50,50,50,50,50,50,50,50,50,50,142,143,50,50,50,50,50,50,50,]),'args_aux':([126,187,],[162,203,]),'attr':([19,34,112,],[63,84,156,]),'term_alt':([39,167,168,],[89,188,189,]),'expr':([16,38,205,208,],[51,51,51,51,]),'if_block':([16,38,205,208,],[52,52,52,52,]),'math_and_alt':([46,170,],[98,191,]),'while_block':([16,38,205,208,],[54,54,54,54,]),'classes':([0,4,],[3,11,]),'check_class':([21,152,],[67,180,]),'exp':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[55,55,123,126,132,141,158,126,187,194,55,55,222,]),'exp_evaluation':([141,158,],[176,184,]),'assign':([16,38,73,74,93,102,119,121,164,173,205,208,218,],[57,57,57,57,57,57,57,57,57,57,57,57,57,]),'block':([196,202,216,],[206,210,220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions fill_goto statements','program',4,'p_program','grammar.py',10),
  ('fill_goto -> empty','fill_goto',1,'p_fill_goto','grammar.py',15),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',31),
  ('classes -> empty','classes',1,'p_classes','grammar.py',32),
  ('class -> @ ID inheritance params scope_class class_block','class',6,'p_class','grammar.py',37),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',42),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',43),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',51),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',56),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',57),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',65),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',66),
  ('class_block -> { functions }','class_block',3,'p_class_block','grammar.py',74),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',89),
  ('functions -> empty','functions',1,'p_functions','grammar.py',90),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',94),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',99),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',100),
  ('func_block -> { statements return }','func_block',4,'p_func_block','grammar.py',105),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',109),
  ('return -> empty','return',1,'p_return','grammar.py',110),
  ('statements -> statement statements','statements',2,'p_statements','grammar.py',130),
  ('statements -> empty','statements',1,'p_statements','grammar.py',131),
  ('statement -> declaration ;','statement',2,'p_statement','grammar.py',135),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',136),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',137),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',138),
  ('statement -> expr','statement',1,'p_statement','grammar.py',139),
  ('declaration -> $ attr','declaration',2,'p_declaration','grammar.py',143),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',148),
  ('attr -> ID : stack_type','attr',3,'p_attr','grammar.py',149),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',154),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',155),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',156),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',157),
  ('type -> ID check_class','type',2,'p_type','grammar.py',158),
  ('stack_type -> STACK ( type )','stack_type',4,'p_stack_type','grammar.py',163),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',168),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',186),
  ('exp -> read','exp',1,'p_exp','grammar.py',192),
  ('exp -> math_or','exp',1,'p_exp','grammar.py',193),
  ('exp -> assign','exp',1,'p_exp','grammar.py',194),
  ('exp -> string','exp',1,'p_exp','grammar.py',195),
  ('exp -> new','exp',1,'p_exp','grammar.py',196),
  ('exp -> stack_call','exp',1,'p_exp','grammar.py',197),
  ('read -> READ ( )','read',3,'p_read','grammar.py',202),
  ('assign -> var = exp','assign',3,'p_assign','grammar.py',207),
  ('string -> STRING','string',1,'p_string','grammar.py',214),
  ('var -> prop','var',1,'p_var','grammar.py',220),
  ('var -> declaration','var',1,'p_var','grammar.py',221),
  ('new -> NEW constructor_call','new',2,'p_new','grammar.py',226),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',231),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',238),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',246),
  ('stack_method -> PUSH ( exp )','stack_method',4,'p_stack_method','grammar.py',247),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',248),
  ('stack_method -> SIZE ( )','stack_method',3,'p_stack_method','grammar.py',249),
  ('math_or -> math_and math_or_alt','math_or',2,'p_math_or','grammar.py',268),
  ('math_or_alt -> OR math_and new_quad math_or_alt','math_or_alt',4,'p_math_or_alt','grammar.py',275),
  ('math_or_alt -> empty','math_or_alt',1,'p_math_or_alt','grammar.py',276),
  ('math_and -> math_comp math_and_alt','math_and',2,'p_math_and','grammar.py',282),
  ('math_and_alt -> AND math_comp new_quad math_and_alt','math_and_alt',4,'p_math_and_alt','grammar.py',289),
  ('math_and_alt -> empty','math_and_alt',1,'p_math_and_alt','grammar.py',290),
  ('math_comp -> math_exp math_comp_alt','math_comp',2,'p_math_comp','grammar.py',296),
  ('math_comp_alt -> comparison_op math_exp new_quad','math_comp_alt',3,'p_math_comp_alt','grammar.py',303),
  ('math_comp_alt -> empty','math_comp_alt',1,'p_math_comp_alt','grammar.py',304),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',310),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',311),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',312),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',313),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','grammar.py',314),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','grammar.py',315),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',331),
  ('math_exp_alt -> + term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',338),
  ('math_exp_alt -> - term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',339),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',340),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',349),
  ('term_alt -> * factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',356),
  ('term_alt -> / factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',357),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',358),
  ('factor -> prop','factor',1,'p_factor','grammar.py',367),
  ('factor -> number','factor',1,'p_factor','grammar.py',368),
  ('factor -> call','factor',1,'p_factor','grammar.py',369),
  ('factor -> ( math_or )','factor',3,'p_factor','grammar.py',370),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',378),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',379),
  ('prop -> ID','prop',1,'p_prop','grammar.py',380),
  ('number -> FLOAT empty','number',2,'p_number','grammar.py',397),
  ('number -> INT','number',1,'p_number','grammar.py',398),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',420),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',425),
  ('args -> empty','args',1,'p_args','grammar.py',426),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',434),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',435),
  ('if_block -> IF ( exp exp_evaluation ) block','if_block',6,'p_if_block','grammar.py',454),
  ('if_block -> IF ( exp exp_evaluation ) block after_if_block ELSE block','if_block',9,'p_if_block','grammar.py',455),
  ('while_block -> WHILE ( leave_breadcrumb exp exp_evaluation ) block','while_block',7,'p_while_block','grammar.py',460),
  ('block -> { statements }','block',3,'p_block','grammar.py',465),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',478),
  ('new_quad -> empty','new_quad',1,'p_new_quad','grammar.py',500),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',510),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',519),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',527),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',533),
  ('exp_evaluation -> empty','exp_evaluation',1,'p_exp_evaluation','grammar.py',542),
  ('after_if_block -> empty','after_if_block',1,'p_after_if_block','grammar.py',547),
  ('leave_breadcrumb -> empty','leave_breadcrumb',1,'p_leave_breadcrumb','grammar.py',552),
]
