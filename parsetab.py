
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ EXPR FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' EXPR\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance class_block\n    inheritance : '<' ID '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID ':' return_type params func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : assignment\n                 | if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | EXPR\n                 | return\n    assignment : prop '=' EXPR ';'\n    prop : THIS '.' ID\n            | ID\n    if_block : IF '(' EXPR ')' block\n    while_block : WHILE '(' EXPR ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' EXPR ')' ';'\n    return : RETURN EXPR ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    empty :"
    
_lr_action_items = {'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,21,44,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,30,-52,-3,-16,-2,-4,-24,-52,-19,30,30,-30,]),'FLOAT_TYPE':([45,48,],[62,62,]),'VOID':([45,],[63,]),'STRING_TYPE':([45,48,],[65,65,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,21,44,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,28,-52,-3,-16,-2,-4,-24,-52,-19,28,28,-30,]),'INT_TYPE':([45,48,],[66,66,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,21,44,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,29,-52,-3,-16,-2,-4,-24,-52,-19,29,29,-30,]),'#':([0,3,4,5,7,11,18,19,21,22,44,46,69,70,73,94,96,108,116,],[-52,9,-52,-15,9,-14,-52,-3,-16,-52,-2,-52,9,-21,-4,-24,-19,-20,-30,]),'$':([0,3,4,5,7,8,10,11,15,18,21,22,73,94,95,96,116,],[-52,-52,-52,-15,-52,16,-23,-14,-22,16,-16,16,-4,-24,16,-19,-30,]),')':([62,64,65,66,72,75,76,80,82,91,92,93,105,106,111,115,],[-9,-11,-10,-8,-5,86,87,90,-52,103,-27,-52,-29,-26,-52,-28,]),'EXPR':([0,3,4,5,7,8,10,11,15,17,18,19,21,30,44,50,52,53,56,60,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,43,-52,-3,-16,54,-2,74,75,76,78,80,-4,-24,-52,-19,43,43,-30,]),',':([62,64,65,66,72,93,111,],[-9,-11,-10,-8,-5,104,104,]),'.':([40,],[61,]),';':([25,30,49,51,54,62,64,65,66,72,74,78,87,],[-52,55,73,-7,77,-9,-11,-10,-8,-5,-6,88,100,]),':':([20,24,],[45,48,]),'=':([25,31,38,62,64,65,66,72,81,],[50,56,-42,-9,-11,-10,-8,-5,-41,]),'<':([6,],[13,]),'>':([23,],[47,]),'@':([0,4,21,96,],[2,2,-16,-19,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,21,44,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,35,-52,-3,-16,-2,-4,-24,-52,-19,35,35,-30,]),'SKIP':([57,58,89,],[-51,-50,101,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,21,44,61,71,73,82,94,95,96,98,104,107,116,],[-52,6,-52,-52,-15,-52,-52,20,-23,-14,23,-22,24,38,-52,-3,-16,-2,81,85,-4,24,-24,-52,-19,38,24,38,-30,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,21,44,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,39,-52,-3,-16,-2,-4,-24,-52,-19,39,39,-30,]),'FOR_TO':([57,58,59,],[-51,-50,79,]),'BOOLEAN_TYPE':([45,48,],[64,64,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,21,44,73,94,95,96,98,107,116,],[-52,-52,-52,-15,-52,-52,-23,-14,-22,40,-52,-3,-16,-2,-4,-24,-52,-19,40,40,-30,]),'FLOAT':([35,79,101,],[58,58,58,]),'INT':([35,79,101,],[57,57,57,]),'(':([28,29,39,62,63,64,65,66,67,68,85,],[52,53,60,-9,-12,-11,-10,-8,82,-13,82,]),'{':([6,12,14,47,57,58,83,86,90,97,103,110,],[-52,22,-18,-17,-51,-50,95,98,98,95,-25,98,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,21,26,27,32,33,34,36,37,41,42,43,44,55,73,77,88,94,96,99,100,102,113,114,116,],[-52,0,-52,-52,-15,-52,-52,-23,-14,-22,-52,-52,-3,-16,-36,-1,-31,-32,-39,-37,-33,-34,-35,-38,-2,-48,-4,-47,-40,-24,-19,-44,-46,-43,-49,-45,-30,]),'}':([7,10,15,18,19,22,26,32,33,34,36,37,41,42,43,44,46,55,69,70,73,77,84,88,94,95,98,99,100,102,107,108,109,112,113,114,116,],[-52,-23,-22,-52,-3,-52,-36,-31,-32,-39,-37,-33,-34,-35,-38,-2,-52,-48,-52,-21,-4,-47,96,-40,-24,-52,-52,-44,-46,-43,-52,-20,113,116,-49,-45,-30,]),'~':([18,19,22,44,46,73,],[-52,-3,-52,-2,71,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'for_block':([17,98,107,],[26,26,26,]),'statements':([17,98,107,],[27,109,112,]),'attrs_alt':([93,111,],[106,115,]),'vars':([8,18,22,95,],[17,44,46,107,]),'class_block':([12,],[21,]),'attrs':([82,],[91,]),'functions':([3,7,69,],[8,15,84,]),'inheritance':([6,],[12,]),'prop':([17,98,107,],[31,31,31,]),'init':([25,],[49,]),'program':([0,],[1,]),'params':([67,85,],[83,97,]),'statement':([17,98,107,],[32,32,32,]),'var':([8,18,22,95,],[18,18,18,18,]),'type':([45,48,],[68,72,]),'empty':([0,3,4,6,7,8,17,18,22,25,46,69,82,93,95,98,107,111,],[5,10,5,14,10,19,33,19,19,51,70,10,92,105,19,33,33,105,]),'function':([3,7,69,],[7,7,7,]),'return':([17,98,107,],[34,34,34,]),'print_stmt':([17,98,107,],[36,36,36,]),'assignment':([17,98,107,],[37,37,37,]),'number':([35,79,101,],[59,89,110,]),'return_type':([45,],[67,]),'class':([0,4,],[4,4,]),'attr':([16,82,104,],[25,93,111,]),'func_block':([83,97,],[94,108,]),'if_block':([17,98,107,],[41,41,41,]),'while_block':([17,98,107,],[42,42,42,]),'classes':([0,4,],[3,11,]),'constructor':([46,],[69,]),'block':([86,90,110,],[99,102,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',5),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',9),
  ('vars -> empty','vars',1,'p_vars','grammar.py',10),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',14),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',18),
  ('init -> = EXPR','init',2,'p_init','grammar.py',22),
  ('init -> empty','init',1,'p_init','grammar.py',23),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',27),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',28),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',29),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',30),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',34),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',35),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',39),
  ('classes -> empty','classes',1,'p_classes','grammar.py',40),
  ('class -> @ ID inheritance class_block','class',4,'p_class','grammar.py',44),
  ('inheritance -> < ID >','inheritance',3,'p_inheritance','grammar.py',48),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',49),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',53),
  ('constructor -> ~ ID params func_block','constructor',4,'p_constructor','grammar.py',57),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',58),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',62),
  ('functions -> empty','functions',1,'p_functions','grammar.py',63),
  ('function -> # ID : return_type params func_block','function',6,'p_function','grammar.py',67),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',71),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',75),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',76),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',80),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',81),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',85),
  ('statements -> statement','statements',1,'p_statements','grammar.py',89),
  ('statements -> empty','statements',1,'p_statements','grammar.py',90),
  ('statement -> assignment','statement',1,'p_statement','grammar.py',94),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',95),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',96),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',97),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',98),
  ('statement -> EXPR','statement',1,'p_statement','grammar.py',99),
  ('statement -> return','statement',1,'p_statement','grammar.py',100),
  ('assignment -> prop = EXPR ;','assignment',4,'p_assignment','grammar.py',104),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',108),
  ('prop -> ID','prop',1,'p_prop','grammar.py',109),
  ('if_block -> IF ( EXPR ) block','if_block',5,'p_if_block','grammar.py',113),
  ('while_block -> WHILE ( EXPR ) block','while_block',5,'p_while_block','grammar.py',117),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',121),
  ('print_stmt -> PRINT ( EXPR ) ;','print_stmt',5,'p_print_stmt','grammar.py',125),
  ('return -> RETURN EXPR ;','return',3,'p_return','grammar.py',129),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',130),
  ('block -> { statements }','block',3,'p_block','grammar.py',134),
  ('number -> FLOAT','number',1,'p_number','grammar.py',138),
  ('number -> INT','number',1,'p_number','grammar.py',139),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',231),
]
