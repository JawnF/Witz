
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FLOAT FLOAT_TYPE FOR FOR_TO GE ID IF INT INT_TYPE LE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | '=' NEW constructor_call\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n            | ID check_class\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance scope_class class_block\n    inheritance : '<' ID check_class '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params scope_constructor func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID neg_lookup ':' return_type params scope_function func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements return '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n    assign : prop '=' exp\n    constructor_call : ID '(' args ')'\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp exp_evaluation  ')' block \n                | IF '(' exp exp_evaluation ')' block after_if_block ELSE block\n    while_block : WHILE '(' leave_breadcrumb exp exp_evaluation ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | empty\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read \n           | math_or \n           | assign\n           | string\n    string : STRING\n    read : READ '(' read_type ')'\n    read_type  :  INT_TYPE\n                  |  FLOAT_TYPE\n                  |  STRING_TYPE   \n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term new_quad math_exp_alt\n                    | '-' term new_quad math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor new_quad term_alt \n                | '/' factor new_quad term_alt\n                | empty\n    new_quad : empty\n    factor : id\n              | number\n              | call \n              | '(' math_or ')'\n    id : ID\n    math_or : math_and math_or_alt\n    math_or_alt : OR math_and new_quad math_or_alt\n                   | empty\n    math_and : math_comp math_and_alt\n    math_and_alt : AND math_comp new_quad math_and_alt\n                    | empty\n    math_comp : math_exp math_comp_alt\n    math_comp_alt : comparison_op math_exp new_quad\n                     | empty\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n                     | LE\n                     | GE\n    call : prop '(' args ')'\n            | stack_call\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : ID '.' stack_method\n    stack_method : POP '(' ')'\n                    | PUSH '(' id ')'\n                    | PEEK '(' ')'\n    empty :scope_class : empty\n    scope_function : empty\n    scope_constructor : empty\n    check_class : empty\n    neg_lookup : empty\n    exp_evaluation : empty\n    after_if_block : empty\n    leave_breadcrumb : empty\n    "
    
_lr_action_items = {'PEEK':([99,],[138,]),'RETURN':([18,19,27,42,44,48,54,55,57,60,106,117,183,210,212,220,221,225,228,230,232,],[-105,-3,-38,-34,-35,-39,-40,-36,-37,-2,-56,-4,-50,-46,-105,-48,-49,-105,-53,234,-47,]),'FLOAT_TYPE':([67,71,107,],[110,120,110,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,69,72,73,86,87,100,117,124,125,164,181,202,209,211,212,225,234,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,30,-105,-3,-2,-19,30,-105,30,30,30,30,-4,30,-113,30,30,-22,30,-27,-105,30,30,-33,]),'VOID':([107,],[147,]),'STRING_TYPE':([67,71,107,],[112,121,112,]),'NE':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,195,196,208,],[-54,-76,-96,-75,76,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,202,209,211,212,225,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,32,-105,-3,-2,-19,-4,-22,32,-27,-105,32,-33,]),'POP':([99,],[140,]),'INT_TYPE':([67,71,107,],[114,122,114,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,202,209,211,212,225,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,34,-105,-3,-2,-19,-4,-22,34,-27,-105,34,-33,]),'NEW':([69,],[118,]),'#':([0,3,4,5,7,11,18,19,60,63,64,108,117,150,151,202,211,227,236,],[-105,9,-105,-18,9,-17,-105,-3,-2,-19,-105,-105,-4,9,-24,-22,-27,-23,-33,]),'LE':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,195,196,208,],[-54,-76,-96,-75,75,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'$':([0,3,4,5,7,8,10,11,15,18,63,64,117,202,211,212,236,],[-105,-105,-105,-18,-105,16,-26,-17,-25,16,-19,16,-4,-22,-27,16,-33,]),')':([26,28,31,33,35,36,37,40,41,43,45,46,49,50,52,56,59,65,77,81,83,85,86,89,90,91,92,95,98,101,104,110,111,112,113,114,115,116,120,121,122,123,126,127,128,129,130,131,132,133,134,136,137,139,143,144,145,153,156,157,159,160,161,162,163,165,166,168,169,170,171,173,174,175,176,178,181,182,184,185,186,188,189,190,191,192,193,195,196,199,200,201,204,206,208,215,216,226,231,],[-58,-54,-76,-61,-96,-75,-105,-57,-77,-105,-105,-60,-105,-79,-105,-55,-59,-109,-86,-88,128,-79,-105,-83,-85,-80,-82,-70,-73,-66,-69,-10,-12,-11,-13,-9,-5,-105,-64,-65,-63,156,158,-105,-78,-98,161,-105,-41,-105,-105,-105,-105,-101,-105,-105,-105,-14,-62,-105,-87,-74,-95,-97,-100,-105,-105,-105,-105,190,191,-111,194,-105,-105,-105,-105,205,-105,-84,-81,-71,-72,-104,-102,208,-79,-68,-67,213,-30,-105,219,-99,-103,-32,-29,-105,-31,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,30,32,34,38,39,50,51,60,63,65,69,72,73,74,75,76,78,79,80,82,84,85,86,87,88,93,96,97,100,102,103,110,111,112,113,114,116,117,124,125,138,140,141,142,146,147,148,149,153,155,164,180,181,202,209,211,212,225,234,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,38,-105,-3,71,72,73,38,86,-45,100,-2,-19,-109,38,-105,38,38,-93,-92,-94,-91,-89,-90,86,-45,38,38,38,38,38,38,38,38,38,-10,-12,-11,-13,-9,-105,-4,38,-113,170,171,172,-44,-43,-15,178,-16,-14,181,38,178,38,-22,38,-27,-105,38,38,-33,]),'+':([28,31,35,36,41,49,50,52,56,85,95,98,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,208,],[-54,-76,-96,-75,-77,-105,-79,103,-55,-79,-70,-73,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,103,103,-71,-72,-104,-102,-103,]),'*':([28,31,35,36,41,49,50,56,85,128,136,137,139,160,161,168,169,190,191,208,],[-54,-76,-96,-75,-77,96,-79,-55,-79,-78,-105,-105,-101,-74,-95,96,96,-104,-102,-103,]),'-':([28,31,35,36,41,49,50,52,56,85,95,98,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,208,],[-54,-76,-96,-75,-77,-105,-79,102,-55,-79,-70,-73,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,102,102,-71,-72,-104,-102,-103,]),',':([26,28,31,33,35,36,37,40,41,43,45,46,49,50,52,56,59,65,77,81,85,89,90,91,92,95,98,101,104,110,111,112,113,114,115,116,127,128,131,132,133,134,136,137,139,144,145,153,156,159,160,161,165,166,168,169,175,176,184,185,186,188,189,190,191,195,196,201,208,226,],[-58,-54,-76,-61,-96,-75,-105,-57,-77,-105,-105,-60,-105,-79,-105,-55,-59,-109,-86,-88,-79,-83,-85,-80,-82,-70,-73,-66,-69,-10,-12,-11,-13,-9,-5,-105,-105,-78,164,-41,-105,-105,-105,-105,-101,-105,-105,-14,-62,-87,-74,-95,-105,-105,-105,-105,-105,-105,164,-84,-81,-71,-72,-104,-102,-68,-67,214,-103,214,]),'/':([28,31,35,36,41,49,50,56,85,128,136,137,139,160,161,168,169,190,191,208,],[-54,-76,-96,-75,-77,97,-79,-55,-79,-78,-105,-105,-101,-74,-95,97,97,-104,-102,-103,]),'.':([50,53,85,],[99,105,99,]),'PUSH':([99,],[141,]),';':([25,26,28,31,33,35,36,37,40,41,43,45,46,49,50,52,56,58,59,65,68,70,77,81,85,89,90,91,92,95,98,101,104,110,111,112,113,114,115,116,119,127,128,132,133,134,136,137,139,144,145,153,154,156,158,159,160,161,165,166,168,169,175,176,185,186,188,189,190,191,195,196,208,219,237,],[-105,-58,-54,-76,-61,-96,-75,-105,-57,-77,-105,-105,-60,-105,-79,-105,-55,106,-59,-109,117,-8,-86,-88,-79,-83,-85,-80,-82,-70,-73,-66,-69,-10,-12,-11,-13,-9,-5,-105,-6,-105,-78,-41,-105,-105,-105,-105,-101,-105,-105,-14,-7,-62,183,-87,-74,-95,-105,-105,-105,-105,-105,-105,-84,-81,-71,-72,-104,-102,-68,-67,-103,-42,238,]),':':([20,24,61,62,],[-105,67,107,-110,]),'=':([25,39,50,65,110,111,112,113,114,115,116,142,146,153,],[69,87,-45,-109,-10,-12,-11,-13,-9,-5,-105,-44,-43,-14,]),'<':([6,28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,195,196,208,],[13,-54,-76,-96,-75,80,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,27,29,42,44,48,54,55,57,60,63,106,117,183,202,210,211,220,221,228,232,236,],[-105,0,-105,-105,-18,-105,-105,-26,-17,-25,-105,-105,-3,-38,-1,-34,-35,-39,-40,-36,-37,-2,-19,-56,-4,-50,-22,-46,-27,-48,-49,-53,-47,-33,]),'@':([0,4,63,202,],[2,2,-19,-22,]),'STRING':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,69,72,73,86,87,100,117,124,125,164,181,202,209,211,212,225,234,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,33,-105,-3,-2,-19,33,-105,33,33,33,33,-4,33,-113,33,33,-22,33,-27,-105,33,33,-33,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,202,209,211,212,225,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,47,-105,-3,-2,-19,-4,-22,47,-27,-105,47,-33,]),'SKIP':([28,56,167,],[-54,-55,187,]),'ELSE':([210,223,224,228,],[-105,229,-112,-53,]),'GE':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,195,196,208,],[-54,-76,-96,-75,78,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'EQ':([28,31,35,36,37,41,49,50,52,56,85,95,98,101,104,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,195,196,208,],[-54,-76,-96,-75,79,-77,-105,-79,-105,-55,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,38,60,63,67,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,99,100,102,103,105,107,117,118,124,125,152,164,172,178,181,202,209,211,212,214,225,234,236,],[-105,6,-105,-105,-18,-105,-105,20,-26,-17,23,-25,24,50,-105,-3,85,-2,-19,116,50,-105,50,85,-93,-92,-94,-91,-89,-90,50,50,85,85,85,85,142,50,85,85,146,116,-4,155,50,-113,180,50,193,24,50,-22,50,-27,-105,24,50,50,-33,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,60,63,117,202,209,211,212,225,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,51,-105,-3,-2,-19,-4,-22,51,-27,-105,51,-33,]),'AND':([28,31,35,36,37,41,43,49,50,52,56,77,81,85,95,98,101,104,127,128,133,136,137,139,144,145,159,160,161,165,168,169,175,176,188,189,190,191,195,196,208,],[-54,-76,-96,-75,-105,-77,88,-105,-79,-105,-55,-86,-88,-79,-70,-73,-66,-69,-105,-78,-105,-105,-105,-101,-105,-105,-87,-74,-95,88,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'FOR_TO':([28,56,94,],[-54,-55,135,]),'BOOLEAN_TYPE':([67,107,],[111,111,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,38,60,63,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,100,102,103,117,124,125,164,181,202,209,211,212,225,234,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,53,-105,-3,53,-2,-19,53,-105,53,53,-93,-92,-94,-91,-89,-90,53,53,53,53,53,53,53,53,53,-4,53,-113,53,53,-22,53,-27,-105,53,53,-33,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,38,47,60,63,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,100,102,103,117,124,125,135,164,181,187,202,209,211,212,225,234,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,28,-105,-3,28,28,-2,-19,28,-105,28,28,-93,-92,-94,-91,-89,-90,28,28,28,28,28,28,28,28,28,-4,28,-113,28,28,28,28,-22,28,-27,-105,28,28,-33,]),'STACK':([67,107,],[113,113,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,38,47,60,63,69,72,73,74,75,76,78,79,80,82,86,87,88,93,96,97,100,102,103,117,124,125,135,164,181,187,202,209,211,212,225,234,236,],[-105,-105,-105,-18,-105,-105,-26,-17,-25,56,-105,-3,56,56,-2,-19,56,-105,56,56,-93,-92,-94,-91,-89,-90,56,56,56,56,56,56,56,56,56,-4,56,-113,56,56,56,56,-22,56,-27,-105,56,56,-33,]),'{':([6,12,14,21,22,28,56,109,177,194,197,198,203,205,207,213,217,218,229,],[-105,-105,-21,64,-106,-54,-55,-20,-105,209,212,-107,-105,209,209,-28,212,-108,209,]),'>':([23,28,31,35,36,37,41,49,50,52,56,65,66,85,95,98,101,104,128,136,137,139,144,145,160,161,168,169,175,176,188,189,190,191,195,196,208,],[-105,-54,-76,-96,-75,82,-77,-105,-79,-105,-55,-109,109,-79,-70,-73,-66,-69,-78,-105,-105,-101,-105,-105,-74,-95,-105,-105,-105,-105,-71,-72,-104,-102,-68,-67,-103,]),'}':([7,10,15,18,19,27,42,44,48,54,55,57,60,64,106,108,117,150,151,179,183,209,210,211,212,220,221,222,225,227,228,230,232,233,235,236,238,],[-105,-26,-25,-105,-3,-38,-34,-35,-39,-40,-36,-37,-2,-105,-56,-105,-4,-105,-24,202,-50,-105,-46,-27,-105,-48,-49,228,-105,-23,-53,-105,-47,236,-52,-33,-51,]),'OR':([28,31,35,36,37,41,43,45,49,50,52,56,77,81,85,89,90,95,98,101,104,127,128,133,134,136,137,139,144,145,159,160,161,165,166,168,169,175,176,185,188,189,190,191,195,196,208,],[-54,-76,-96,-75,-105,-77,-105,93,-105,-79,-105,-55,-86,-88,-79,-83,-85,-70,-73,-66,-69,-105,-78,-105,-105,-105,-105,-101,-105,-105,-87,-74,-95,-105,93,-105,-105,-105,-105,-84,-71,-72,-104,-102,-68,-67,-103,]),'~':([18,19,60,64,108,117,],[-105,-3,-2,-105,152,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'math_or':([17,38,69,73,86,87,100,124,164,181,209,225,234,],[26,83,26,26,26,26,26,26,26,26,26,26,26,]),'for_block':([17,209,225,],[27,27,27,]),'statements':([17,209,225,],[29,222,230,]),'attrs_alt':([201,226,],[216,231,]),'vars':([8,18,64,212,],[17,60,108,225,]),'stack_method':([99,],[139,]),'leave_breadcrumb':([72,],[124,]),'number':([17,38,47,69,73,74,86,87,88,93,96,97,100,102,103,124,135,164,181,187,209,225,234,],[31,31,94,31,31,31,31,31,31,31,31,31,31,31,31,31,167,31,31,207,31,31,31,]),'return':([230,],[233,]),'attrs':([178,],[199,]),'constructor_call':([118,],[154,]),'stack_call':([17,38,69,73,74,86,87,88,93,96,97,100,102,103,124,164,181,209,225,234,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'read_type':([71,],[123,]),'id':([17,38,69,73,74,86,87,88,93,96,97,100,102,103,124,164,172,181,209,225,234,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,192,36,36,36,36,]),'scope_function':([177,],[197,]),'math_or_alt':([45,166,],[91,186,]),'scope_constructor':([203,],[217,]),'functions':([3,7,150,],[8,15,179,]),'math_exp':([17,38,69,73,74,86,87,88,93,100,124,164,181,209,225,234,],[37,37,37,37,127,37,37,37,37,37,37,37,37,37,37,37,]),'func_block':([197,217,],[211,227,]),'inheritance':([6,],[12,]),'math_exp_alt':([52,175,176,],[101,195,196,]),'prop':([17,38,69,73,74,86,87,88,93,96,97,100,102,103,124,164,181,209,225,234,],[39,84,39,39,84,39,39,84,84,84,84,39,84,84,39,39,39,39,39,39,]),'read':([17,69,73,86,87,100,124,164,181,209,225,234,],[40,40,40,40,40,40,40,40,40,40,40,40,]),'init':([25,],[68,]),'program':([0,],[1,]),'call':([17,38,69,73,74,86,87,88,93,96,97,100,102,103,124,164,181,209,225,234,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'neg_lookup':([20,],[61,]),'statement':([17,209,225,],[42,42,42,]),'factor':([17,38,69,73,74,86,87,88,93,96,97,100,102,103,124,164,181,209,225,234,],[49,49,49,49,49,49,49,49,49,136,137,49,49,49,49,49,49,49,49,49,]),'var':([8,18,64,212,],[18,18,18,18,]),'params':([148,180,],[177,203,]),'type':([67,107,],[115,149,]),'empty':([0,3,4,6,7,8,12,17,18,20,23,25,37,43,45,49,52,64,72,86,108,116,127,131,133,134,136,137,143,144,145,150,157,165,166,168,169,175,176,177,178,181,184,201,203,209,210,212,225,226,230,],[5,10,5,14,10,19,22,44,19,62,65,70,81,90,92,98,104,19,125,129,151,65,160,163,160,160,160,160,173,160,160,10,173,90,92,98,98,104,104,198,200,129,163,215,218,44,224,19,44,215,235,]),'function':([3,7,150,],[7,7,7,]),'math_and':([17,38,69,73,86,87,93,100,124,164,181,209,225,234,],[45,45,45,45,45,45,134,45,45,45,45,45,45,45,]),'string':([17,69,73,86,87,100,124,164,181,209,225,234,],[46,46,46,46,46,46,46,46,46,46,46,46,]),'print_stmt':([17,209,225,],[48,48,48,]),'math_comp':([17,38,69,73,86,87,88,93,100,124,164,181,209,225,234,],[43,43,43,43,43,43,133,43,43,43,43,43,43,43,43,]),'args':([86,181,],[130,204,]),'comparison_op':([37,],[74,]),'class_block':([21,],[63,]),'math_comp_alt':([37,],[77,]),'scope_class':([12,],[21,]),'args_aux':([131,184,],[162,206,]),'after_if_block':([210,],[223,]),'return_type':([107,],[148,]),'class':([0,4,],[4,4,]),'term':([17,38,69,73,74,86,87,88,93,100,102,103,124,164,181,209,225,234,],[52,52,52,52,52,52,52,52,52,52,144,145,52,52,52,52,52,52,]),'new_quad':([127,133,134,136,137,144,145,],[159,165,166,168,169,175,176,]),'attr':([16,178,214,],[25,201,226,]),'term_alt':([49,168,169,],[95,188,189,]),'expr':([17,209,225,],[54,54,54,]),'if_block':([17,209,225,],[55,55,55,]),'math_and_alt':([43,165,],[89,185,]),'while_block':([17,209,225,],[57,57,57,]),'classes':([0,4,],[3,11,]),'check_class':([23,116,],[66,153,]),'exp':([17,69,73,86,87,100,124,164,181,209,225,234,],[58,119,126,131,132,143,157,184,131,58,58,237,]),'constructor':([108,],[150,]),'exp_evaluation':([143,157,],[174,182,]),'assign':([17,69,73,86,87,100,124,164,181,209,225,234,],[59,59,59,59,59,59,59,59,59,59,59,59,]),'block':([194,205,207,229,],[210,220,221,232,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',19),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',23),
  ('vars -> empty','vars',1,'p_vars','grammar.py',24),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',28),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',36),
  ('init -> = exp','init',2,'p_init','grammar.py',42),
  ('init -> = NEW constructor_call','init',3,'p_init','grammar.py',43),
  ('init -> empty','init',1,'p_init','grammar.py',44),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',52),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',53),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',54),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',55),
  ('type -> STACK','type',1,'p_type','grammar.py',56),
  ('type -> ID check_class','type',2,'p_type','grammar.py',57),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',62),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',63),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',68),
  ('classes -> empty','classes',1,'p_classes','grammar.py',69),
  ('class -> @ ID inheritance scope_class class_block','class',5,'p_class','grammar.py',73),
  ('inheritance -> < ID check_class >','inheritance',4,'p_inheritance','grammar.py',78),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',79),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',87),
  ('constructor -> ~ ID params scope_constructor func_block','constructor',5,'p_constructor','grammar.py',91),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',92),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',98),
  ('functions -> empty','functions',1,'p_functions','grammar.py',99),
  ('function -> # ID neg_lookup : return_type params scope_function func_block','function',8,'p_function','grammar.py',103),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',108),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',113),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',114),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',122),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',123),
  ('func_block -> { vars statements return }','func_block',5,'p_func_block','grammar.py',131),
  ('statements -> statement','statements',1,'p_statements','grammar.py',135),
  ('statements -> empty','statements',1,'p_statements','grammar.py',136),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',140),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',141),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',142),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',143),
  ('statement -> expr','statement',1,'p_statement','grammar.py',144),
  ('assign -> prop = exp','assign',3,'p_assign','grammar.py',148),
  ('constructor_call -> ID ( args )','constructor_call',4,'p_constructor_call','grammar.py',157),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',164),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',165),
  ('prop -> ID','prop',1,'p_prop','grammar.py',166),
  ('if_block -> IF ( exp exp_evaluation ) block','if_block',6,'p_if_block','grammar.py',181),
  ('if_block -> IF ( exp exp_evaluation ) block after_if_block ELSE block','if_block',9,'p_if_block','grammar.py',182),
  ('while_block -> WHILE ( leave_breadcrumb exp exp_evaluation ) block','while_block',7,'p_while_block','grammar.py',188),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',194),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',198),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',202),
  ('return -> empty','return',1,'p_return','grammar.py',203),
  ('block -> { statements }','block',3,'p_block','grammar.py',211),
  ('number -> FLOAT','number',1,'p_number','grammar.py',215),
  ('number -> INT','number',1,'p_number','grammar.py',216),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',221),
  ('exp -> read','exp',1,'p_exp','grammar.py',225),
  ('exp -> math_or','exp',1,'p_exp','grammar.py',226),
  ('exp -> assign','exp',1,'p_exp','grammar.py',227),
  ('exp -> string','exp',1,'p_exp','grammar.py',228),
  ('string -> STRING','string',1,'p_string','grammar.py',233),
  ('read -> READ ( read_type )','read',4,'p_read','grammar.py',238),
  ('read_type -> INT_TYPE','read_type',1,'p_read_type','grammar.py',242),
  ('read_type -> FLOAT_TYPE','read_type',1,'p_read_type','grammar.py',243),
  ('read_type -> STRING_TYPE','read_type',1,'p_read_type','grammar.py',244),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',248),
  ('math_exp_alt -> + term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',255),
  ('math_exp_alt -> - term new_quad math_exp_alt','math_exp_alt',4,'p_math_exp_alt','grammar.py',256),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',257),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',263),
  ('term_alt -> * factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',270),
  ('term_alt -> / factor new_quad term_alt','term_alt',4,'p_term_alt','grammar.py',271),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',272),
  ('new_quad -> empty','new_quad',1,'p_new_quad','grammar.py',278),
  ('factor -> id','factor',1,'p_factor','grammar.py',289),
  ('factor -> number','factor',1,'p_factor','grammar.py',290),
  ('factor -> call','factor',1,'p_factor','grammar.py',291),
  ('factor -> ( math_or )','factor',3,'p_factor','grammar.py',292),
  ('id -> ID','id',1,'p_id','grammar.py',300),
  ('math_or -> math_and math_or_alt','math_or',2,'p_math_or','grammar.py',306),
  ('math_or_alt -> OR math_and new_quad math_or_alt','math_or_alt',4,'p_math_or_alt','grammar.py',314),
  ('math_or_alt -> empty','math_or_alt',1,'p_math_or_alt','grammar.py',315),
  ('math_and -> math_comp math_and_alt','math_and',2,'p_math_and','grammar.py',321),
  ('math_and_alt -> AND math_comp new_quad math_and_alt','math_and_alt',4,'p_math_and_alt','grammar.py',328),
  ('math_and_alt -> empty','math_and_alt',1,'p_math_and_alt','grammar.py',329),
  ('math_comp -> math_exp math_comp_alt','math_comp',2,'p_math_comp','grammar.py',335),
  ('math_comp_alt -> comparison_op math_exp new_quad','math_comp_alt',3,'p_math_comp_alt','grammar.py',342),
  ('math_comp_alt -> empty','math_comp_alt',1,'p_math_comp_alt','grammar.py',343),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',349),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',350),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',351),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',352),
  ('comparison_op -> LE','comparison_op',1,'p_comparison_op','grammar.py',353),
  ('comparison_op -> GE','comparison_op',1,'p_comparison_op','grammar.py',354),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',359),
  ('call -> stack_call','call',1,'p_call','grammar.py',360),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',365),
  ('args -> empty','args',1,'p_args','grammar.py',366),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',374),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',375),
  ('stack_call -> ID . stack_method','stack_call',3,'p_stack_call','grammar.py',383),
  ('stack_method -> POP ( )','stack_method',3,'p_stack_method','grammar.py',388),
  ('stack_method -> PUSH ( id )','stack_method',4,'p_stack_method','grammar.py',389),
  ('stack_method -> PEEK ( )','stack_method',3,'p_stack_method','grammar.py',390),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',394),
  ('scope_class -> empty','scope_class',1,'p_scope_class','grammar.py',405),
  ('scope_function -> empty','scope_function',1,'p_scope_function','grammar.py',413),
  ('scope_constructor -> empty','scope_constructor',1,'p_scope_constructor','grammar.py',421),
  ('check_class -> empty','check_class',1,'p_check_class','grammar.py',427),
  ('neg_lookup -> empty','neg_lookup',1,'p_neg_lookup','grammar.py',432),
  ('exp_evaluation -> empty','exp_evaluation',1,'p_exp_evaluation','grammar.py',439),
  ('after_if_block -> empty','after_if_block',1,'p_after_if_block','grammar.py',444),
  ('leave_breadcrumb -> empty','leave_breadcrumb',1,'p_leave_breadcrumb','grammar.py',449),
]
