
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOLEAN_TYPE ELSE EQ FALSE FLOAT FLOAT_TYPE FOR FOR_TO ID IF INT INT_TYPE NE NEW OR PEEK POP PRINT PUSH READ RETURN SKIP STACK STRING STRING_TYPE THIS TRUE VOID WHILEprogram : classes functions vars statements\n    vars : var vars\n            | empty\n    var : '$' attr init ';'\n    attr : ID ':' type\n    init : '=' exp\n            | empty\n    type : INT_TYPE\n            | FLOAT_TYPE\n            | STRING_TYPE\n            | BOOLEAN_TYPE\n            | STACK\n    return_type : VOID\n                   | type\n    classes : class classes\n               | empty\n    class : '@' ID inheritance class_block\n    inheritance : '<' ID '>'\n                   | empty\n    class_block : '{' vars constructor functions '}'\n    constructor : '~' ID params func_block\n                   | empty\n    functions : function functions\n                 | empty\n    function : '#' ID ':' return_type params func_block\n    params : '(' attrs ')'\n    attrs : attr attrs_alt\n             | empty\n    attrs_alt : ',' attr attrs_alt\n                 | empty\n    func_block : '{' vars statements '}'\n    statements : statement\n                  | empty\n    statement : if_block\n                 | while_block\n                 | for_block\n                 | print_stmt\n                 | expr\n                 | return\n    assign : prop '=' expr\n              | prop '=' NEW ID\n    prop : THIS '.' ID\n            | ID '.' ID\n            | ID\n    if_block : IF '(' exp ')' block\n                | IF '(' exp ')' block ELSE block\n    while_block : WHILE '(' exp ')' block\n    for_block : FOR number FOR_TO number SKIP number block\n    print_stmt : PRINT '(' exp ')' ';'\n    return : RETURN exp ';'\n              | RETURN ';'\n    block : '{' statements '}'\n    number : FLOAT\n              | INT\n    expr : exp ';'\n    exp : read\n           | logic_exp\n           | assign\n    read : READ '(' string ')'\n    string : ID\n              | STRING\n    math_exp : term math_exp_alt\n    math_exp_alt : '+' term math_exp_alt\n                    | '-' term math_exp_alt \n                    | empty \n    term : factor term_alt\n    term_alt : '*' factor term_alt \n                | '/' factor term_alt\n                | empty\n    factor : ID\n              | number\n              | call\n              | '(' math_exp ')' \n    logic_exp : log_a logic_exp_alt\n    logic_exp_alt : OR log_a logic_exp_alt\n                     | empty\n    log_a : log_b log_a_alt\n    log_a_alt : AND log_b log_a_alt\n                 | empty\n    log_b : '(' logic_exp ')' \n             | bool\n             | comparison\n    bool : TRUE\n            | FALSE\n    comparison : math_exp comparison_op math_exp\n                  | math_exp\n    comparison_op : '<'\n                     | '>'\n                     | EQ\n                     | NE\n    call : prop '(' args ')'\n            | stack_call '(' args ')'\n    args : exp args_aux\n            | empty\n    args_aux : ',' exp args_aux\n                | empty\n    stack_call : prop stack_method\n    stack_method : POP\n                    | PUSH\n                    | PEEK\n    empty :"
    
_lr_action_items = {'PEEK':([38,52,82,85,148,150,],[86,-44,86,-44,-43,-42,]),'RETURN':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,33,-101,-3,-17,-2,-4,-25,-101,-20,33,33,-31,]),'FLOAT_TYPE':([64,67,],[111,111,]),'READ':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,63,69,72,73,87,91,97,108,123,163,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,29,-101,-3,-17,29,-2,29,29,29,29,29,29,29,-4,29,-25,-101,-20,29,29,-31,]),'VOID':([64,],[112,]),'STRING_TYPE':([64,67,],[114,114,]),'NE':([27,30,42,43,50,51,52,59,83,85,92,95,99,100,133,141,142,145,146,160,166,167,169,170,171,],[-53,-71,-101,-72,-101,103,-70,-54,103,-70,-69,-66,-62,-65,-73,-101,-101,-101,-101,-91,-67,-68,-92,-64,-63,]),'WHILE':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,31,-101,-3,-17,-2,-4,-25,-101,-20,31,31,-31,]),'POP':([38,52,82,85,148,150,],[89,-44,89,-44,-43,-42,]),'INT_TYPE':([64,67,],[116,116,]),'PRINT':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,32,-101,-3,-17,-2,-4,-25,-101,-20,32,32,-31,]),'NEW':([91,],[138,]),'TRUE':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,63,69,72,73,76,81,87,91,97,108,123,163,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,34,-101,-3,-17,34,34,-2,34,34,34,34,34,34,34,34,34,-4,34,-25,-101,-20,34,34,-31,]),'#':([0,3,4,5,7,11,18,19,21,22,63,65,119,120,123,176,178,191,202,],[-101,9,-101,-16,9,-15,-101,-3,-17,-101,-2,-101,9,-22,-4,-25,-20,-21,-31,]),'$':([0,3,4,5,7,8,10,11,15,18,21,22,123,176,177,178,202,],[-101,-101,-101,-16,-101,16,-24,-15,-23,16,-17,16,-4,-25,16,-20,-31,]),')':([27,30,34,35,36,39,40,42,43,45,50,51,52,54,55,59,62,77,78,79,80,83,84,85,87,92,95,97,99,100,110,111,113,114,115,116,122,125,126,127,128,129,131,132,133,134,135,136,137,139,141,142,144,145,146,147,149,151,155,158,159,160,161,162,164,165,166,167,169,170,171,173,174,175,183,188,189,193,196,201,],[-53,-71,-83,-101,-101,-56,-81,-101,-72,-57,-101,-86,-70,-82,-84,-54,-58,-79,-77,-74,-76,133,134,-70,-101,-69,-66,-101,-62,-65,-55,-9,-11,-10,-12,-8,-5,-61,-60,155,156,157,-101,-101,-73,-80,-94,160,-101,-40,-101,-101,169,-101,-101,-85,172,-101,-59,-78,-75,-91,-93,-96,-41,133,-67,-68,-92,-64,-63,186,-28,-101,-101,-30,-27,-95,-101,-29,]),'(':([0,3,4,5,7,8,10,11,15,17,18,19,21,29,31,32,33,37,38,48,52,53,63,69,72,73,76,81,82,85,86,87,88,89,90,91,93,94,97,98,101,102,103,104,105,106,108,111,112,113,114,115,116,117,118,123,140,148,150,154,163,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,37,-101,-3,-17,71,72,73,37,37,87,97,-44,108,-2,37,37,37,37,37,87,-44,-100,37,-97,-98,-99,37,140,140,37,140,140,140,-90,-89,-87,-88,37,-9,-13,-11,-10,-12,-8,151,-14,-4,140,-43,-42,151,37,-25,-101,-20,37,37,-31,]),'+':([27,30,42,43,50,52,59,85,92,95,133,141,142,145,146,160,166,167,169,],[-53,-71,-101,-72,101,-70,-54,-70,-69,-66,-73,-101,-101,101,101,-91,-67,-68,-92,]),'*':([27,30,42,43,52,59,85,133,141,142,160,169,],[-53,-71,93,-72,-70,-54,-70,-73,93,93,-91,-92,]),'-':([27,30,42,43,50,52,59,85,92,95,133,141,142,145,146,160,166,167,169,],[-53,-71,-101,-72,98,-70,-54,-70,-69,-66,-73,-101,-101,98,98,-91,-67,-68,-92,]),',':([27,30,34,35,36,39,40,42,43,45,50,51,52,54,55,59,62,77,78,79,80,85,92,95,99,100,110,111,113,114,115,116,122,131,132,133,134,137,139,141,142,145,146,147,155,158,159,160,164,166,167,169,170,171,175,183,196,],[-53,-71,-83,-101,-101,-56,-81,-101,-72,-57,-101,-86,-70,-82,-84,-54,-58,-79,-77,-74,-76,-70,-69,-66,-62,-65,-55,-9,-11,-10,-12,-8,-5,-101,-101,-73,-80,163,-40,-101,-101,-101,-101,-85,-59,-78,-75,-91,-41,-67,-68,-92,-64,-63,187,163,187,]),'/':([27,30,42,43,52,59,85,133,141,142,160,169,],[-53,-71,94,-72,-70,-54,-70,-73,94,94,-91,-92,]),'.':([52,56,85,],[107,109,107,]),'PUSH':([38,52,82,85,148,150,],[90,-44,90,-44,-43,-42,]),';':([25,27,30,33,34,35,36,39,40,42,43,45,50,51,52,54,55,59,61,62,68,70,75,77,78,79,80,85,92,95,99,100,110,111,113,114,115,116,122,124,131,132,133,134,139,141,142,145,146,147,155,157,158,159,160,164,166,167,169,170,171,],[-101,-53,-71,74,-83,-101,-101,-56,-81,-101,-72,-57,-101,-86,-70,-82,-84,-54,110,-58,123,-7,130,-79,-77,-74,-76,-70,-69,-66,-62,-65,-55,-9,-11,-10,-12,-8,-5,-6,-101,-101,-73,-80,-40,-101,-101,-101,-101,-85,-59,182,-78,-75,-91,-41,-67,-68,-92,-64,-63,]),':':([20,24,],[64,67,]),'=':([25,38,52,111,113,114,115,116,122,148,150,],[69,91,-44,-9,-11,-10,-12,-8,-5,-43,-42,]),'<':([6,27,30,42,43,50,51,52,59,83,85,92,95,99,100,133,141,142,145,146,160,166,167,169,170,171,],[13,-53,-71,-101,-72,-101,105,-70,-54,105,-70,-69,-66,-62,-65,-73,-101,-101,-101,-101,-91,-67,-68,-92,-64,-63,]),'$end':([0,1,3,4,5,7,8,10,11,15,17,18,19,21,26,28,41,44,46,49,57,58,60,63,74,110,123,130,176,178,181,182,185,198,199,200,202,],[-101,0,-101,-101,-16,-101,-101,-24,-15,-23,-101,-101,-3,-17,-36,-1,-32,-33,-39,-37,-38,-34,-35,-2,-51,-55,-4,-50,-25,-20,-47,-49,-45,-52,-48,-46,-31,]),'@':([0,4,21,178,],[2,2,-17,-20,]),'STRING':([71,],[125,]),'FOR':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,47,-101,-3,-17,-2,-4,-25,-101,-20,47,47,-31,]),'SKIP':([27,59,168,],[-53,-54,184,]),'ELSE':([185,198,],[195,-52,]),'EQ':([27,30,42,43,50,51,52,59,83,85,92,95,99,100,133,141,142,145,146,160,166,167,169,170,171,],[-53,-71,-101,-72,-101,104,-70,-54,104,-70,-69,-66,-62,-65,-73,-101,-101,-101,-101,-91,-67,-68,-92,-64,-63,]),'ID':([0,2,3,4,5,7,8,9,10,11,13,15,16,17,18,19,21,33,37,63,69,71,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,107,108,109,121,123,138,140,151,163,176,177,178,180,187,190,202,],[-101,6,-101,-101,-16,-101,-101,20,-24,-15,23,-23,24,52,-101,-3,-17,52,85,-2,52,126,52,52,85,85,52,52,85,85,52,85,85,85,-90,-89,-87,-88,148,52,150,154,-4,164,85,24,52,-25,-101,-20,52,24,52,-31,]),'IF':([0,3,4,5,7,8,10,11,15,17,18,19,21,63,123,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,53,-101,-3,-17,-2,-4,-25,-101,-20,53,53,-31,]),'AND':([27,30,34,35,40,42,43,50,51,52,54,55,59,83,85,92,95,99,100,131,133,134,141,142,145,146,147,160,166,167,169,170,171,],[-53,-71,-83,76,-81,-101,-72,-101,-86,-70,-82,-84,-54,-86,-70,-69,-66,-62,-65,76,-73,-80,-101,-101,-101,-101,-85,-91,-67,-68,-92,-64,-63,]),'FOR_TO':([27,59,96,],[-53,-54,143,]),'FALSE':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,63,69,72,73,76,81,87,91,97,108,123,163,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,55,-101,-3,-17,55,55,-2,55,55,55,55,55,55,55,55,55,-4,55,-25,-101,-20,55,55,-31,]),'BOOLEAN_TYPE':([64,67,],[113,113,]),'THIS':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,63,69,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,108,123,140,163,176,177,178,180,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,56,-101,-3,-17,56,56,-2,56,56,56,56,56,56,56,56,56,56,56,56,56,-90,-89,-87,-88,56,-4,56,56,-25,-101,-20,56,56,-31,]),'FLOAT':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,47,63,69,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,108,123,140,143,163,176,177,178,180,184,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,27,-101,-3,-17,27,27,27,-2,27,27,27,27,27,27,27,27,27,27,27,27,27,-90,-89,-87,-88,27,-4,27,27,27,-25,-101,-20,27,27,27,-31,]),'STACK':([64,67,],[115,115,]),'INT':([0,3,4,5,7,8,10,11,15,17,18,19,21,33,37,47,63,69,72,73,76,81,87,91,93,94,97,98,101,102,103,104,105,106,108,123,140,143,163,176,177,178,180,184,190,202,],[-101,-101,-101,-16,-101,-101,-24,-15,-23,59,-101,-3,-17,59,59,59,-2,59,59,59,59,59,59,59,59,59,59,59,59,59,-90,-89,-87,-88,59,-4,59,59,59,-25,-101,-20,59,59,59,-31,]),'{':([6,12,14,27,59,66,152,156,172,179,186,194,195,],[-101,22,-19,-53,-54,-18,177,180,180,177,-26,180,180,]),'>':([23,27,30,42,43,50,51,52,59,83,85,92,95,99,100,133,141,142,145,146,160,166,167,169,170,171,],[66,-53,-71,-101,-72,-101,106,-70,-54,106,-70,-69,-66,-62,-65,-73,-101,-101,-101,-101,-91,-67,-68,-92,-64,-63,]),'}':([7,10,15,18,19,22,26,41,44,46,49,57,58,60,63,65,74,110,119,120,123,130,153,176,177,180,181,182,185,190,191,192,197,198,199,200,202,],[-101,-24,-23,-101,-3,-101,-36,-32,-33,-39,-37,-38,-34,-35,-2,-101,-51,-55,-101,-22,-4,-50,178,-25,-101,-101,-47,-49,-45,-101,-21,198,202,-52,-48,-46,-31,]),'OR':([27,30,34,35,36,40,42,43,50,51,52,54,55,59,77,78,83,85,92,95,99,100,131,132,133,134,141,142,145,146,147,158,160,166,167,169,170,171,],[-53,-71,-83,-101,81,-81,-101,-72,-101,-86,-70,-82,-84,-54,-79,-77,-86,-70,-69,-66,-62,-65,-101,81,-73,-80,-101,-101,-101,-101,-85,-78,-91,-67,-68,-92,-64,-63,]),'~':([18,19,22,63,65,123,],[-101,-3,-101,-2,121,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'args_aux':([137,183,],[161,193,]),'for_block':([17,180,190,],[26,26,26,]),'statements':([17,180,190,],[28,192,197,]),'attrs_alt':([175,196,],[189,201,]),'vars':([8,18,22,177,],[17,63,65,190,]),'class_block':([12,],[21,]),'attrs':([151,],[173,]),'params':([117,154,],[152,179,]),'stack_call':([17,33,37,69,72,73,76,81,87,91,93,94,97,98,101,102,108,140,163,180,190,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'string':([71,],[127,]),'log_b':([17,33,37,69,72,73,76,81,87,91,97,108,163,180,190,],[35,35,35,35,35,35,131,35,35,35,35,35,35,35,35,]),'functions':([3,7,119,],[8,15,153,]),'log_a':([17,33,37,69,72,73,81,87,91,97,108,163,180,190,],[36,36,36,36,36,36,132,36,36,36,36,36,36,36,]),'func_block':([152,179,],[176,191,]),'inheritance':([6,],[12,]),'math_exp_alt':([50,145,146,],[99,170,171,]),'prop':([17,33,37,69,72,73,76,81,87,91,93,94,97,98,101,102,108,140,163,180,190,],[38,38,82,38,38,38,82,82,38,38,82,82,38,82,82,82,38,82,38,38,38,]),'read':([17,33,69,72,73,87,91,97,108,163,180,190,],[39,39,39,39,39,39,39,39,39,39,39,39,]),'init':([25,],[68,]),'program':([0,],[1,]),'call':([17,33,37,69,72,73,76,81,87,91,93,94,97,98,101,102,108,140,163,180,190,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'math_exp':([17,33,37,69,72,73,76,81,87,91,97,102,108,140,163,180,190,],[51,51,83,51,51,51,51,51,51,51,51,147,51,165,51,51,51,]),'factor':([17,33,37,69,72,73,76,81,87,91,93,94,97,98,101,102,108,140,163,180,190,],[42,42,42,42,42,42,42,42,42,42,141,142,42,42,42,42,42,42,42,42,42,]),'var':([8,18,22,177,],[18,18,18,18,]),'bool':([17,33,37,69,72,73,76,81,87,91,97,108,163,180,190,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'type':([64,67,],[118,122,]),'empty':([0,3,4,6,7,8,17,18,22,25,35,36,42,50,65,87,97,119,131,132,137,141,142,145,146,151,175,177,180,183,190,196,],[5,10,5,14,10,19,44,19,19,70,77,80,92,100,120,135,135,10,77,80,162,92,92,100,100,174,188,19,44,162,44,188,]),'logic_exp':([17,33,37,69,72,73,87,91,97,108,163,180,190,],[45,45,84,45,45,45,45,45,45,45,45,45,45,]),'function':([3,7,119,],[7,7,7,]),'return':([17,180,190,],[46,46,46,]),'statement':([17,180,190,],[41,41,41,]),'print_stmt':([17,180,190,],[49,49,49,]),'args':([87,97,],[136,144,]),'comparison_op':([51,83,],[102,102,]),'number':([17,33,37,47,69,72,73,76,81,87,91,93,94,97,98,101,102,108,140,143,163,180,184,190,],[30,30,30,96,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,168,30,30,194,30,]),'log_a_alt':([35,131,],[78,158,]),'return_type':([64,],[117,]),'class':([0,4,],[4,4,]),'comparison':([17,33,37,69,72,73,76,81,87,91,97,108,163,180,190,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'term':([17,33,37,69,72,73,76,81,87,91,97,98,101,102,108,140,163,180,190,],[50,50,50,50,50,50,50,50,50,50,50,145,146,50,50,50,50,50,50,]),'attr':([16,151,187,],[25,175,196,]),'term_alt':([42,141,142,],[95,166,167,]),'expr':([17,91,180,190,],[57,139,57,57,]),'if_block':([17,180,190,],[58,58,58,]),'stack_method':([38,82,],[88,88,]),'while_block':([17,180,190,],[60,60,60,]),'classes':([0,4,],[3,11,]),'logic_exp_alt':([36,132,],[79,159,]),'exp':([17,33,69,72,73,87,91,97,108,163,180,190,],[61,75,124,128,129,137,61,137,149,183,61,61,]),'constructor':([65,],[119,]),'assign':([17,33,69,72,73,87,91,97,108,163,180,190,],[62,62,62,62,62,62,62,62,62,62,62,62,]),'block':([156,172,194,195,],[181,185,199,200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> classes functions vars statements','program',4,'p_program','grammar.py',6),
  ('vars -> var vars','vars',2,'p_vars','grammar.py',10),
  ('vars -> empty','vars',1,'p_vars','grammar.py',11),
  ('var -> $ attr init ;','var',4,'p_var','grammar.py',16),
  ('attr -> ID : type','attr',3,'p_attr','grammar.py',20),
  ('init -> = exp','init',2,'p_init','grammar.py',24),
  ('init -> empty','init',1,'p_init','grammar.py',25),
  ('type -> INT_TYPE','type',1,'p_type','grammar.py',29),
  ('type -> FLOAT_TYPE','type',1,'p_type','grammar.py',30),
  ('type -> STRING_TYPE','type',1,'p_type','grammar.py',31),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','grammar.py',32),
  ('type -> STACK','type',1,'p_type','grammar.py',33),
  ('return_type -> VOID','return_type',1,'p_return_type','grammar.py',37),
  ('return_type -> type','return_type',1,'p_return_type','grammar.py',38),
  ('classes -> class classes','classes',2,'p_classes','grammar.py',42),
  ('classes -> empty','classes',1,'p_classes','grammar.py',43),
  ('class -> @ ID inheritance class_block','class',4,'p_class','grammar.py',48),
  ('inheritance -> < ID >','inheritance',3,'p_inheritance','grammar.py',52),
  ('inheritance -> empty','inheritance',1,'p_inheritance','grammar.py',53),
  ('class_block -> { vars constructor functions }','class_block',5,'p_class_block','grammar.py',57),
  ('constructor -> ~ ID params func_block','constructor',4,'p_constructor','grammar.py',61),
  ('constructor -> empty','constructor',1,'p_constructor','grammar.py',62),
  ('functions -> function functions','functions',2,'p_functions','grammar.py',66),
  ('functions -> empty','functions',1,'p_functions','grammar.py',67),
  ('function -> # ID : return_type params func_block','function',6,'p_function','grammar.py',71),
  ('params -> ( attrs )','params',3,'p_params','grammar.py',75),
  ('attrs -> attr attrs_alt','attrs',2,'p_attrs','grammar.py',79),
  ('attrs -> empty','attrs',1,'p_attrs','grammar.py',80),
  ('attrs_alt -> , attr attrs_alt','attrs_alt',3,'p_attrs_alt','grammar.py',84),
  ('attrs_alt -> empty','attrs_alt',1,'p_attrs_alt','grammar.py',85),
  ('func_block -> { vars statements }','func_block',4,'p_func_block','grammar.py',89),
  ('statements -> statement','statements',1,'p_statements','grammar.py',93),
  ('statements -> empty','statements',1,'p_statements','grammar.py',94),
  ('statement -> if_block','statement',1,'p_statement','grammar.py',98),
  ('statement -> while_block','statement',1,'p_statement','grammar.py',99),
  ('statement -> for_block','statement',1,'p_statement','grammar.py',100),
  ('statement -> print_stmt','statement',1,'p_statement','grammar.py',101),
  ('statement -> expr','statement',1,'p_statement','grammar.py',102),
  ('statement -> return','statement',1,'p_statement','grammar.py',103),
  ('assign -> prop = expr','assign',3,'p_assign','grammar.py',107),
  ('assign -> prop = NEW ID','assign',4,'p_assign','grammar.py',108),
  ('prop -> THIS . ID','prop',3,'p_prop','grammar.py',112),
  ('prop -> ID . ID','prop',3,'p_prop','grammar.py',113),
  ('prop -> ID','prop',1,'p_prop','grammar.py',114),
  ('if_block -> IF ( exp ) block','if_block',5,'p_if_block','grammar.py',118),
  ('if_block -> IF ( exp ) block ELSE block','if_block',7,'p_if_block','grammar.py',119),
  ('while_block -> WHILE ( exp ) block','while_block',5,'p_while_block','grammar.py',123),
  ('for_block -> FOR number FOR_TO number SKIP number block','for_block',7,'p_for_block','grammar.py',127),
  ('print_stmt -> PRINT ( exp ) ;','print_stmt',5,'p_print_stmt','grammar.py',131),
  ('return -> RETURN exp ;','return',3,'p_return','grammar.py',135),
  ('return -> RETURN ;','return',2,'p_return','grammar.py',136),
  ('block -> { statements }','block',3,'p_block','grammar.py',140),
  ('number -> FLOAT','number',1,'p_number','grammar.py',144),
  ('number -> INT','number',1,'p_number','grammar.py',145),
  ('expr -> exp ;','expr',2,'p_expr','grammar.py',149),
  ('exp -> read','exp',1,'p_exp','grammar.py',153),
  ('exp -> logic_exp','exp',1,'p_exp','grammar.py',154),
  ('exp -> assign','exp',1,'p_exp','grammar.py',155),
  ('read -> READ ( string )','read',4,'p_read','grammar.py',159),
  ('string -> ID','string',1,'p_string','grammar.py',163),
  ('string -> STRING','string',1,'p_string','grammar.py',164),
  ('math_exp -> term math_exp_alt','math_exp',2,'p_math_exp','grammar.py',168),
  ('math_exp_alt -> + term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',172),
  ('math_exp_alt -> - term math_exp_alt','math_exp_alt',3,'p_math_exp_alt','grammar.py',173),
  ('math_exp_alt -> empty','math_exp_alt',1,'p_math_exp_alt','grammar.py',174),
  ('term -> factor term_alt','term',2,'p_term','grammar.py',178),
  ('term_alt -> * factor term_alt','term_alt',3,'p_term_alt','grammar.py',182),
  ('term_alt -> / factor term_alt','term_alt',3,'p_term_alt','grammar.py',183),
  ('term_alt -> empty','term_alt',1,'p_term_alt','grammar.py',184),
  ('factor -> ID','factor',1,'p_factor','grammar.py',188),
  ('factor -> number','factor',1,'p_factor','grammar.py',189),
  ('factor -> call','factor',1,'p_factor','grammar.py',190),
  ('factor -> ( math_exp )','factor',3,'p_factor','grammar.py',191),
  ('logic_exp -> log_a logic_exp_alt','logic_exp',2,'p_logic_exp','grammar.py',195),
  ('logic_exp_alt -> OR log_a logic_exp_alt','logic_exp_alt',3,'p_logic_exp_alt','grammar.py',199),
  ('logic_exp_alt -> empty','logic_exp_alt',1,'p_logic_exp_alt','grammar.py',200),
  ('log_a -> log_b log_a_alt','log_a',2,'p_log_a','grammar.py',204),
  ('log_a_alt -> AND log_b log_a_alt','log_a_alt',3,'p_log_a_alt','grammar.py',208),
  ('log_a_alt -> empty','log_a_alt',1,'p_log_a_alt','grammar.py',209),
  ('log_b -> ( logic_exp )','log_b',3,'p_log_b','grammar.py',213),
  ('log_b -> bool','log_b',1,'p_log_b','grammar.py',214),
  ('log_b -> comparison','log_b',1,'p_log_b','grammar.py',215),
  ('bool -> TRUE','bool',1,'p_bool','grammar.py',219),
  ('bool -> FALSE','bool',1,'p_bool','grammar.py',220),
  ('comparison -> math_exp comparison_op math_exp','comparison',3,'p_comparison','grammar.py',224),
  ('comparison -> math_exp','comparison',1,'p_comparison','grammar.py',225),
  ('comparison_op -> <','comparison_op',1,'p_comparison_op','grammar.py',229),
  ('comparison_op -> >','comparison_op',1,'p_comparison_op','grammar.py',230),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','grammar.py',231),
  ('comparison_op -> NE','comparison_op',1,'p_comparison_op','grammar.py',232),
  ('call -> prop ( args )','call',4,'p_call','grammar.py',236),
  ('call -> stack_call ( args )','call',4,'p_call','grammar.py',237),
  ('args -> exp args_aux','args',2,'p_args','grammar.py',241),
  ('args -> empty','args',1,'p_args','grammar.py',242),
  ('args_aux -> , exp args_aux','args_aux',3,'p_args_aux','grammar.py',246),
  ('args_aux -> empty','args_aux',1,'p_args_aux','grammar.py',247),
  ('stack_call -> prop stack_method','stack_call',2,'p_stack_call','grammar.py',251),
  ('stack_method -> POP','stack_method',1,'p_stack_method','grammar.py',255),
  ('stack_method -> PUSH','stack_method',1,'p_stack_method','grammar.py',256),
  ('stack_method -> PEEK','stack_method',1,'p_stack_method','grammar.py',257),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',262),
]
